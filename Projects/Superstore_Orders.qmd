---
title: "Market Basket Analysis"
date: "Last updated on `r format(Sys.time(), '%d %B, %Y')`"
---

**Frequent Pattern Mining: Market Basket Analysis**

This project aims to discover links between items frequently purchased together through analysing transaction data.

[Link to reference article](https://medium.com/swlh/market-basket-analysis-using-rstudio-ba72ebe0c29)

# 1: Data Preparation

## 1.1: R Packages

```{r}
#| message: false
#| warning: false
pacman::p_load(readxl, tidyverse, plyr, dplyr,
               ggplot2, lubridate,
               RcolorBrewer,
               arules, arulesViz)
```

## 1.2: Data Loading and Transformation

This Project uses Online Retail dataset from [UCI Machine Learning Repository](http://archive.ics.uci.edu/ml/datasets/online+retail)

The dataset contains the following attributes:

::: {.solvebox .solve data-latex="solve"}
-   **InvoiceNo:** Invoice number. Nominal, a 6-digit integral number uniquely assigned to each transaction. If this code starts with letter 'c', it indicates a cancellation.\
-   **StockCode:** Product (item) code. Nominal, a 5-digit integral number uniquely assigned to each distinct product.\
-   **Description:** Product (item) name.\
-   **Quantity:** The quantities of each product (item) per transaction.\
-   **InvoiceDate:** Invoice Date and time. Numeric, the day and time when each transaction was generated.\
-   **UnitPrice:** Unit price. Numeric, Product price per unit in sterling.\
-   **CustomerID:** Customer number. Nominal, a 5-digit integral number uniquely assigned to each customer.\
-   **Country:** Country name. Nominal, the name of the country where each customer resides.
:::

```{r}
order_data <- read_excel("data/Online_Retail.xlsx")
```

`complete.cases(data)` returns a logical vector indicating which rows have no missing values. `data[,]` filters out the rows with missing values:

```{r}
order_data <- order_data[complete.cases(order_data), ]
summary(order_data)
```

-   `mutate()` character data types to factor using `as.factor()`
-   Convert InvoiceNo to Numeric
-   Store InvoiceDate as date in new variable, 'TransDate'
-   Extract time from InvoiceDate and store in another variable, 'TransTime'

```{r}
order_data %>%
  mutate(across(where(is.character), as.factor()))

order_data$InvoiceNo <- as.numeric(order_data$InvoiceNo)

order_data$TransDate <- as.Date(order_data$InvoiceDate)

order_data$TransTime <- format(order_data$InvoiceDate, format = "%H:%M:%S")

glimpse(order_data)
```

## 1.3: Creating a **basket** and storing it as transactionData

```{r}
transactionData <- ddply(order_data, c("InvoiceNo","TransDate"),
                         function(df1)paste(df1$Description,
                                            collapse = ","))
transactionData$InvoiceNo <- NULL
transactionData$Date <- NULL

colnames(transactionData) <- c("items")

write.csv(transactionData,"data/market_basket_transactions.csv", quote = FALSE, row.names = FALSE)
```

Read transaction data:

```{r}
trans <- read.transactions('data/market_basket_transactions.csv', 
                           format = 'basket', 
                           quote = "",
                           sep=',')
dim(trans)
```

`dim(data)` shows that there are 18,839 transactions (rows) and 4231 items (columns).

```{r}
summary(trans)
```

`summary()` data reveals that the 2-itemset size is 1401, the largest amongst all k-itemsets.

# 2: Generating Item Frequency Plot

`topN = 20` parameter specifies top 20 items by frequency

```{r}
#| fig-height: 8
#| fig-width: 12
itemFrequencyPlot(trans, 
                  topN = 20,
                  type = "absolute",
                  col = "#3A3B60",
                  main = "Item Frequency Plot",
                  xlab = "Absolute Frequency")
```

# 3: Generating Association Rules using `apriori()`

Each basket can be represented as a vector containing Boolean values pertaining to whether an item is in the basket (1) or not (0). Analysing the baskets to find patterns in the most common items purchased together to form **association rules** can be useful.

```{r}
association_rules <- apriori(trans, parameter = list(supp=0.001,
                                                     conf=0.8,
                                                     maxlen=10))
```

Display First 20 association rules by confidence:

```{r}
association_rules <- sort(association_rules,
                          decreasing = TRUE,
                          by = "confidence")

inspect(association_rules[1:20])
```

Display association rules by **lift value**:

::: {.focusbox .focus data-latex="focus"}
**Lift**

-   Lift value is the measure of importance of an association rule
-   It is the ratio of the confidence of the rule / expected confidence of the rule
-   **Lift value \< 1**: negative dependence or substitution effect
-   **Lift value \> 1**: positive dependence or complementary effect
-   **Lift value = 1**: implies almost no association between items
:::

```{=tex}
\n
\n
```
$$Lift = \frac{Confidence}{Expected\ Confidence} = \frac{P\left(A \cap B\right)}{P\left(A\right).P\left(B\right)}$$\
\n \n $$Lift({X} -> {Y}) = \frac{(Transactions\ containing\ both\ X\ and\ Y)/(Transactions\ containing\ X)}{(Transactions\ containing\ Y)}$$\
\n \n

```{r}
inspect(head(sort(association_rules, by = "lift")))
```

# 4: Filter rules

## 4.1: Select only association rules with confidence greater than 0.6 or 60%

```{r}
subRules<-association_rules[quality(association_rules)$confidence > 0.6]

summary(subRules)
```

Interactive Scatterplot:

```{r}
plot(subRules, 
     method = "scatterplot", 
     measure = c("support", "confidence"),
     shading = "lift",
     max = 100,
     jitter = 0,
     engine = "plotly")
```

## 4.2 Generating rules for specific items

Suppose we would like to find out more about rules regarding most frequent item, "WHITE HANGING HEART T-LIGHT HOLDER":

```{r}
rules_frequent_item <- apriori (data=trans, 
                                parameter=list (supp=0.001,conf = 0.6), 
                                appearance = list (default="lhs",rhs="WHITE HANGING HEART T-LIGHT HOLDER"), 
                                control = list (verbose=F))

rules_frequent_item <-sort(rules_frequent_item,
                               decreasing = TRUE,
                               by = "confidence")

# remove redundant rules that are subsets of larger rules
subsetRules <- which(colSums(is.subset(rules_frequent_item, rules_frequent_item)) > 1) 
#length(subsetRules) #> 584
rules_frequent_item <- rules_frequent_item[-subsetRules]

inspect(sort(rules_frequent_item[1:20], by = "lift"))
```

Plot top 10 rules for item by confidence:

```{r}
#| fig-height: 8
rules_frequent_item <-sort(rules_frequent_item,
                          decreasing = TRUE,
                          by = "confidence")

top10_rules <- rules_frequent_item[1:10]

plot(top10_rules,
     method = "graph",
     engine = "htmlwidget")
```
