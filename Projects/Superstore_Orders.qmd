---
title: "Market Basket Analysis"
date: "Last updated on `r format(Sys.time(), '%d %B, %Y')`"
---
**Frequent Pattern Mining: Market Basket Analysis**

This project aims to discover links between items frequently purchased together through analysing transaction data. 

[Link to reference article](https://medium.com/swlh/market-basket-analysis-using-rstudio-ba72ebe0c29)

# 1: Data Preparation

## 1.1: R Packages

```{r}
#| message: false
#| warning: false
pacman::p_load(readxl, tidyverse, plyr, dplyr,
               ggplot2, lubridate,
               RcolorBrewer,
               arules, arulesViz)
```

## 1.2: Data Loading and Transformation

This Project uses Online Retail dataset from [UCI Machine Learning Repository](http://archive.ics.uci.edu/ml/datasets/online+retail) 

The dataset contains the following attributes:

::: {.solvebox .solve data-latex="solve"}

-   **InvoiceNo:** Invoice number. Nominal, a 6-digit integral number uniquely
assigned to each transaction. If this code starts with letter 'c', it indicates a cancellation.  
-   **StockCode:** Product (item) code. Nominal, a 5-digit integral number uniquely assigned to each distinct product.  
-   **Description:** Product (item) name.  
-   **Quantity:** The quantities of each product (item) per transaction.  
-   **InvoiceDate:** Invoice Date and time. Numeric, the day and time when each transaction was generated.  
-   **UnitPrice:** Unit price. Numeric, Product price per unit in sterling.  
-   **CustomerID:** Customer number. Nominal, a 5-digit integral number uniquely assigned to each customer.  
-   **Country:** Country name. Nominal, the name of the country where each customer resides.
:::

```{r}
order_data <- read_excel("data/Online_Retail.xlsx")
```

`complete.cases(data)` returns a logical vector indicating which rows have no missing values. `data[,]` filters out the rows with missing values:

```{r}
order_data <- order_data[complete.cases(order_data), ]
summary(order_data)
```

*   `mutate()` character data types to factor using `as.factor()`
*   Convert InvoiceNo to Numeric
*   Store InvoiceDate as date in new variable, 'TransDate'
*   Extract time from InvoiceDate and store in another variable, 'TransTime'


```{r}
order_data %>%
  mutate(across(where(is.character), as.factor()))

order_data$InvoiceNo <- as.numeric(order_data$InvoiceNo)

order_data$TransDate <- as.Date(order_data$InvoiceDate)

order_data$TransTime <- format(order_data$InvoiceDate, format = "%H:%M:%S")

glimpse(order_data)
```

## 1.3: Creating a **basket** and storing it as transactionData

```{r}
transactionData <- ddply(order_data, c("InvoiceNo","TransDate"),
                         function(df1)paste(df1$Description,
                                            collapse = ","))
transactionData$InvoiceNo <- NULL
transactionData$Date <- NULL

colnames(transactionData) <- c("items")

write.csv(transactionData,"data/market_basket_transactions.csv", quote = FALSE, row.names = FALSE)
```

Read transaction data:

```{r}
trans <- read.transactions('data/market_basket_transactions.csv', 
                           format = 'basket', 
                           quote = "",
                           sep=',')
dim(trans)
```
`dim(data)` shows that there are 18,839 transactions (rows) and 4231 items (columns).

```{r}
summary(trans)
```

# 2: Generating Item Frequency Plot

`topN = 20` parameter specifies top 20 items by frequency

```{r}
#| fig-height: 8
#| fig-width: 12
itemFrequencyPlot(trans, 
                  topN = 20,
                  type = "absolute",
                  col = "#3A3B60",
                  main = "Item Frequency Plot",
                  xlab = "Absolute Frequency")
```
# 3: Generating Frequent Items using `apriori()`

`eclat()` and `apriori()` can both generate frequent itemsets.  
However, `apriori()` can also generate association rules. 

```{r}
association.rules <- apriori(trans, parameter = list(supp=0.001,
                                                     conf=0.8,
                                                     maxlen=10))
```

```{r}
inspect(association.rules[1:10])
```

# 4: Filter rules 

Select only association rules with confidence greater than 0.4 or 40%
```{r}
subRules<-association.rules[quality(association.rules)$confidence>0.4]

summary(subRules)
```

Interactive Scatterplot:

```{r}
plot(subRules, 
     method = "scatterplot", 
     measure = c("support", "confidence"),
     shading = "lift",
     max = 100,
     jitter = 0,
     engine = "plotly")
```

