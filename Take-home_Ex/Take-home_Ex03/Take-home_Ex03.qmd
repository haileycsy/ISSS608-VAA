---
title: "Take-home Exercise 3"
date: "Last updated on `r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    code-fold: false
    code-summary: "code block"
---

<font size = "5">**VAST Challenge: Mini-Challenge 3**</font>

# Project Brief

FishEye International, a non-profit focused on countering illegal, unreported, and unregulated (IUU) fishing, has been given access to an international finance corporation's database on **fishing related companies.** In the past, FishEye has determined that companies with anomalous structures are far more likely to be involved in IUU (or other *fishy* business). FishEye has transformed the database into a knowledge graph, including information about companies, owners, workers, and financial status. FishEye is aiming to use this graph to identify anomalies that could indicate if a company is involved in IUU.

# Project Objectives

This study aims to use visual analytics to understand patterns of groups in the knowledge graph. This will endeavour to:

* **develop a visual analytics process to find similar companies and group them**
* **focus on presenting key features of the business to the user**

This will be done through investigating the following variables:

```{mermaid}
%%{
  init: {
    "theme": "base",
    "themeVariables": {
      "primaryColor": "#d8e8e6",
      "primaryTextColor": "#325985",
      "primaryBorderColor": "#325985",
      "lineColor": "#325985",
      "secondaryColor": "#cedded",
      "tertiaryColor": "#fff" 
      }
  }
}%%

flowchart LR
    A{Overall\nNetwork} --> B{Companies}
    B -->|Similarities?| C(Company Structure)
    B -->|Similarities?| D(Location)
    B -->|Similarities?| E(Business Type)
    B -->|Similarities?| F(Financial Status)

```

# 1: Data Preparation

## 1.1: Loading R Packages

```{r intstall-packages}
#| code-fold: true
pacman::p_load(jsonlite, tidyverse, DT, lubridate, Hmisc, 
               urbnthemes,visNetwork, tidygraph, ggraph, 
               ggiraph, igraph, scales, ggplot2, 
               gganimate, ggstatsplot, ggrain, ggridges, 
               graphlayouts, plotly, patchwork, kableExtra, 
               ggpubr, ggrepel, ggforce, tidytext,
               tm, wordcloud2, forcats, skimr)
```

## 1.2: Loading the Data

Use `jsonlite` package to read .json files

```{r load-mc2}
mc3 <- fromJSON("data/MC3.json")
```

**mc3** data consists of undirected graph data, with links and nodes. These are stored as *lists* instead of vector columns. To transform this into a dataframe, each column is mutated into a character data type using `mutate()` and `as.character()` methods.

```{r}
#| warning: false
#| code-fold: true
mc3_links <- as_tibble(mc3$links) %>%
  distinct() %>%
  # Change all variable types to character to create dataframe
  mutate(source = as.character(source),
         target = as.character(target),
         type = as.character(type)) %>%
  group_by(source, target, type) %>%
  summarise(weights = n()) %>%
  filter(source != target) %>%
  select(-weights) %>%
  ungroup

mc3_nodes <- as_tibble(mc3$nodes) %>%
  mutate(id = as.character(id), 
         type = as.character(type), 
         country = as.character(country), 
         product_services = as.character(product_services),
  # Convert to character first to unlist, then revert to numeric form 
         revenue_omu = as.numeric(as.character(revenue_omu))) %>%
  # Reorganize columns 
  select(id, country, type, revenue_omu, product_services)
```

## 1.3: Data Health

::: panel-tabset
## **Nodes**

**I. Checking for Missing Values:**

```{r}
# Check for columns with missing values
colSums(is.na(mc3_nodes))
```

There are 21,515 missing values from the **revenue_omu** column.

**II. Checking for Duplicates**

```{r}
mc3_nodes[duplicated(mc3_nodes),]
```

There are 2,595 duplicated entries. These are removed so as to prevent skewing of aggregate figures in subsequent analyses:

```{r}
mc3_nodes <- unique(mc3_nodes)
```

## **Links**

**I. Checking for Missing Values:**

```{r}
# Check for columns with missing values
colSums(is.na(mc3_links))
```

There are no missing values in mc3_links

**II. Checking for Duplicates:**

```{r}
mc3_links[duplicated(mc3_links),]
```

There are no duplicated rows for **mc3_links** data.
:::

# 2: Exploratory Analysis

```{r}
skim(mc3_links)
```


## **Who are the Stakeholders?**  

:::{ .solvebox .solve data-latex="solve"}  

**Nodes** data is aggregated by country and type to visualise frequency of roles, as well as where each company or person is operating geographically.

:::

```{r}
#| code-fold: true
# Set default plot theme
set_urbn_defaults(style = "print")

nodes_type <- mc3_nodes %>%
  ggplot(
    aes(x = type)
  ) +
  geom_bar() +
 # Set count annotations above bar
  geom_text(
    stat = "count",
    aes(label = after_stat(count)),
    vjust = -1
  ) +  
 # Ensure than annotations are not cut off
  ylim(0, 11000) +
  labs(
    title = "Highest Count of Beneficial Owners"
  ) +
  theme(
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.text.y = element_blank(),
    plot.background = element_rect(fill="#F8F3E6",colour="#F8F3E6")
  )

nodes_type
  
```  


## **Where are they operating from?**  

```{r}
#| fig-height: 6
#| message: false
#| code-fold: true
# Aggregate data frame by country and type
nodes_agg <- mc3_nodes %>%
  group_by(country, type) %>%
  # Count number of companies per country
  summarise(count = n(),
  # Calculate total revenue per country
            revenue_omu = sum(revenue_omu)) %>%
  ungroup()


# Create separate plots for each type
p_company <- nodes_agg %>%
  # Only plot countries with more than 100 companies
  filter(type == "Company" &
           count > 100) %>%
  ggplot(
  # Arrange in Descending order of count
    aes(x = fct_rev(fct_reorder(country, count)),
        y = count)
  ) +
  geom_col() +
  # Set to prevent trunctation when patched
  ylim(0,3800) +
  geom_text(
    aes(label = count),
    vjust = -1
  ) +  #< Set count annotations above bar
  labs(
    title = "Most Number of Companies Operating from ZH"
  ) +
  theme(
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.text.y = element_blank(),
    plot.background = element_rect(fill="#F8F3E6",colour="#F8F3E6")
  )

# Plot for company contacts
p_contact <- nodes_agg %>%
  # Only plot countries with more than 100 companies
  filter(type == "Company Contacts") %>%
  ggplot(
  # Arrange in Descending order of count
    aes(x = fct_rev(fct_reorder(country, count)),
        y = count)
  ) +
  geom_col() +
  geom_text(
    aes(label = count),
    vjust = -1
  ) + 
  ylim(0,10000) +
  labs(
    title = "Company Contacts"
  ) +
  theme(
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.text.y = element_blank(),
    plot.background = element_rect(fill="#F8F3E6",colour="#F8F3E6")
  )

# Plot for beneficial owners
p_owner <- nodes_agg %>%
  # Only plot countries with more than 100 companies
  filter(type == "Beneficial Owner") %>%
  ggplot(
  # Arrange in Descending order of count
    aes(x = fct_rev(fct_reorder(country, count)),
        y = count)
  ) +
  geom_col() +
  geom_text(
    aes(label = count),
    vjust = -1
  ) +
  ylim(0,13000) +
  labs(
    title = "Beneficial Owners"
  ) +
  theme(
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.text.y = element_blank(),
    plot.background = element_rect(fill="#F8F3E6",colour="#F8F3E6")
  )

bottompatch <- (p_contact + p_owner) +
  plot_annotation(title = "Almost all Company Contacts & Beneficial Owners from ZH")

fullpatch <- p_company / bottompatch
fullpatch & theme(plot.background = element_rect(fill="#F8F3E6",colour="#F8F3E6"))
```
## **Who are the companies connected to?**  

```{r}
#| message: false
#| code-fold: true
#| fig-height: 3
# Get number of type by source (Company)
links_count <- mc3_links %>%
  group_by(source, type) %>%
  summarise(count = n()) %>%
  ungroup()

# Plot strip chart to show distibution

links_count %>%
  ggplot(
    aes(x = count, 
        y = type)
  ) +
  geom_point(
    alpha = .2, 
    size = 7
  ) +
  scale_x_continuous() +  
  stat_summary(
    color = "salmon", 
    fun = "median", 
    geom = "point", 
    size = 3.5, 
    alpha = .9
  ) +
  labs(title = "Higher Number of Beneficial Owners Indicative of Publicly Listed Companies",
       subtitle = "Highlighted points represent median values",
       x = NULL,
       y = NULL
  ) +
  theme(axis.ticks.y = element_blank(),
        plot.background = element_rect(fill="#F8F3E6",colour="#F8F3E6")
  )
```
:::{ .focusbox .focus data-latex="focus"}  

**Initial Insights:**  

* **Nodes data** seems to list all names of Companies, Beneficial Owners as well as Company Contacts in the Fishing Network. Majority of the companies are based in *ZH** and **Oceanus**, with Company Contacts and Beneficial Owners overwhelmingly from **ZH**. This suggests that the businesses are concentrated within a smaller geographical scope.   

* **Links Data** has 'source' and 'target' columns, and seem to denote the relationship of individuals (target) to companies (source), as well as classifying the relationship as **type: Company Contact** or **Beneficial Owner**.  

* Counting the number of individuals per type revealed a much larger variation in **Beneficial Owner** Count, which could be a good variable to use in classifying the company as Publicly listed (high number of beneficial owners - shareholders) or Sole Proprietorship (Single Beneficial Owner). However, this will also have to be further analysed in tandem with company revenue when grouping similar companies together. 

:::


## **How much revenue is being reported by the Companies?**  

```{r}
#| warning: false
#| code-fold: true
#| fig-height: 3

# Only feature data from Companies
company_nodes <- mc3_nodes %>%
  filter(type == "Company")

company_rev <-
  ggplot(company_nodes, 
       aes(x = 1, 
           y = revenue_omu)
  ) +
  geom_rain(
    color = "#1696d2",
    alpha = .5
  ) +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n=5),
    labels = scales::dollar
  ) +
  labs(
    title = "Skewed Distribution of Revenue Suggests Range of Company Sizes"
  ) +
  theme(
    axis.ticks.y = element_blank(),
    axis.title = element_blank(),
    axis.text.y = element_blank(),
    plot.background = element_rect(fill="#F8F3E6",colour="#F8F3E6")
  ) +
  coord_flip()

company_rev

```

:::{ .focusbox .focus data-latex="focus"}  

Distribution of  revenue as well as quantile values show a **highly right-skewed distribution**, which could be an indication of company size. To use this variable for further classification of anomalous groups, revenue is binned by percentile and assigned a label. As missing Revenue values could be a data lapse issue, or a sign of concealing possible *fishy* actvity, whis is kept as a separate category for further analysis:

* Above 80th Percentile: 1
* 60-80th Percentile: 2
* 40-60th Percentile: 3
* 20-40th Percentile: 4
* Below 20th Percentile: 5
* Missing Values : NA

:::

```{r}
#| code-fold: true
# Calculate the percentiles
percentiles <- quantile(mc3_nodes$revenue_omu, 
                        probs = c(0, 0.2, 0.4, 0.6, 0.8, 1),
                        na.rm = TRUE)

# Create a new column and assign labels based on percentiles
mc3_nodes$revenue_group <- cut(mc3_nodes$revenue_omu, 
                                   breaks = percentiles, 
                                   labels = c(5, 4, 3, 2, 1), 
                                   include.lowest = TRUE)
```

```{r}
#| code-fold: true
# Barchart of revenue group
ggplot(
  mc3_nodes, 
  aes(x = revenue_group)
  ) +
  geom_bar() +
  labs(
    # Linebreak added to title so it does not get truncated
    title = "Highest Count of Missing Revenue Reports for Beneficial Owners", 
    x = "Revenue Group",
    y = NULL
  ) +
  geom_text(
    stat = "count",
    aes(label = after_stat(count)),
    vjust = -1
  ) +
  ylim(0,10500) +
  theme(
    text = element_text(size = 12),
    plot.background = element_rect(fill="#F8F3E6",colour="#F8F3E6")
  ) +
  facet_wrap(~type)

```

# 3: Exploring Anomalous Structures  

Based on initial analysis, there is an avenue to explore the relationship between different variables to sieve out anomalous groups within the overall network: 

```{mermaid}
%%| fig-width: 7
%%{
  init: {
    "theme": "base",
    "themeVariables": {
      "primaryColor": "#d8e8e6",
      "primaryTextColor": "#325985",
      "primaryBorderColor": "#325985",
      "lineColor": "#325985",
      "secondaryColor": "#cedded",
      "tertiaryColor": "#fff" 
      }
  }
}%%

flowchart LR
    A{Overall\nNetwork} --> B{Fishy\nCompanies}
    B --> C(Company Structure)
    B --> D(Financial Status) -.->E[High Revenue]
    D -.-> F[Unreported Revenue]
    C -.->|Overlapping?|G[Beneficial Owners]
    C -.->|Overlapping?|H[Company Contacts]

```
Firstly, the company ownership and company contact structure can be visualised through plotting network graphs. This will give a better sense of how the individual records listed in the **links** data are related, as well as sieve out possible *fishy* patterns. The following filters are used to investigate possible 'groups' and anomalies:  

* High Revenue & Companies with Higher numbers of Beneficial Owners
* Company Contacts of High Revenue Companies
* Unreported Revenue & Higher numbers of Beneficial Owners
* Company Contacts of Companies with Unreported Revenue 



## **3.1: What is the structure of companies based on revenue?**


### **3.1.1: High Revenue Groups**  

::: panel-tabset

## **Extracting Nodes and Links**

```{r}
# Extract nodes from Highest revenue band
nodes_highrev <- mc3_nodes %>%
  filter(revenue_group == "1")

# Only get Beneficial Owners from companies with higher counts
high_owner_count <- links_count %>%
  filter(type == "Beneficial Owner") %>%
  filter(count >20)

links_highrev <- mc3_links %>%
  filter(type == "Beneficial Owner") %>%
  filter(source %in% high_owner_count$source) %>%
  filter(source %in% nodes_highrev$id) %>%
  rename("from" = "source",
         "to" = "target")
```

## **Getting Distinct Source and Target**

```{r}
# Get distinct Source and Target
hirev_source <- links_highrev %>%
  distinct(from) %>%
  rename("id" = "from")

hirev_target <- links_highrev %>%
  distinct(to) %>%
  rename("id" = "to")
```

## **Creating Nodes and Edges Dataframes**

```{r}
# Bind into single dataframe
nodes_hirev_new <- bind_rows(hirev_source, hirev_target)

nodes_hirev_new$group <- ifelse(nodes_hirev_new$id %in% company_nodes$id, "Company", "Beneficial Owner")

```
:::

```{r}
#| code-fold: true
#| fig-height: 6

visNetwork(
    nodes_hirev_new, 
    links_highrev,
    width = "100%",
    main = list(text = "High Revenue Companies Feature Overlapping Owners",
                style = "font-size:17x;
                weight:bold;
                text-align:right;")
  ) %>%
  visIgraphLayout(
    layout = "layout_with_fr"
  ) %>%
  visGroups(groupname = "Company",
            color = "#1696d2") %>%
  visGroups(groupname = "Beneficial Owner",
            color = "#fccb41") %>%
  visLegend() %>%
  visEdges(
    arrows = "to"
  ) %>%
  visOptions(
  # Specify additional Interactive Elements
    highlightNearest = list(enabled = T, degree = 2, hover = T),
  # Add drop-down menu to filter by company name
    nodesIdSelection = TRUE,
  # Add drop-down menu to filter by category
    selectedBy = "group",
    collapse = TRUE) %>%
  visInteraction(navigationButtons = TRUE)
```



```{r}
#| code-fold: true
links_highrev_cc <- mc3_links %>%
  filter(type == "Company Contacts") %>%
  filter(source %in% nodes_highrev$id) %>%
  rename("from" = "source",
         "to" = "target")

# Get distinct Source and Target
hirev_source_cc <- links_highrev_cc %>%
  distinct(from) %>%
  rename("id" = "from")

hirev_target_cc <- links_highrev_cc %>%
  distinct(to) %>%
  rename("id" = "to")

# Bind into single dataframe
nodes_hirev_cc <- bind_rows(hirev_source_cc, hirev_target_cc)

nodes_hirev_cc$group <- ifelse(nodes_hirev_cc$id %in% company_nodes$id, "Company", "Company Contacts")
```

```{r}
#| code-fold: true
#| fig-height: 6

visNetwork(
    nodes_hirev_cc, 
    links_highrev_cc,
    width = "100%",
    main = list(text = "Few Interlinks between Company Contacts for High Revenue Group ",
                style = "font-size:17px;
                weight:bold;
                text-align:right;")
  ) %>%
  visIgraphLayout(
    layout = "layout_with_graphopt"
  ) %>%
  visGroups(groupname = "Company",
            color = "#1696d2") %>%
  visGroups(groupname = "Company Contacts",
            color = "#eb99c2") %>%
  visLegend() %>%
  visEdges(
    arrows = "to"
  ) %>%
  visOptions(
  # Specify additional Interactive Elements
    highlightNearest = list(enabled = T, degree = 2, hover = T),
  # Add drop-down menu to filter by company name
    nodesIdSelection = TRUE,
  # Add drop-down menu to filter by category
    selectedBy = "group",
    collapse = TRUE) %>%
  visInteraction(navigationButtons = TRUE)
```  
  
  
  
:::{ .focusbox .focus data-latex="focus"}  

**Insights from Visualisations:**  

* 'Clusters' of Beneficial Owners in the network graph suggest that the companies are large or publicly-listed
* Several common Beneficial Owners can be observed in the network, which also form links to other 'clusters' or companies. This could be suggestive of more complex ownership patterns or related companies 
* Network of Company Contacts show that most companies in the High Revenue band have a single contact. Identifying companies with abnormally large numbers of contacts could be a possible sign of *fishy* company structure

:::


### **3.1.2: Unreported Revenue but high number of links**

::: panel-tabset

## **Extracting Nodes and Links**

```{r}
# Extract nodes that have unreported revenue
nodes_missingrev <- mc3_nodes %>%
  filter(is.na(revenue_group))


links_missingrev <- mc3_links %>%
  filter(type == "Beneficial Owner") %>%
  filter(source %in% high_owner_count$source) %>%
  filter(source %in% nodes_missingrev$id) %>%
  distinct() %>%
  rename("from" = "source",
         "to" = "target")
```

## **Getting Distinct Source and Target**

```{r}
# Get distinct Source and Target
missingrev_source <- links_missingrev %>%
  distinct(from) %>%
  rename("id" = "from")

missingrev_target <- links_missingrev %>%
  distinct(to) %>%
  rename("id" = "to")
```

## **Creating Nodes and Edges Dataframes**

```{r}
# Bind into single dataframe
nodes_missingrev_new <- bind_rows(missingrev_source, missingrev_target)

nodes_missingrev_new$group <- ifelse(nodes_missingrev_new$id %in% company_nodes$id, "Company", "Beneficial Owner")

```

:::

```{r}
#| code-fold: true
#| fig-height: 6

visNetwork(
    nodes_missingrev_new, 
    links_missingrev,
    width = "100%",
    main = list(text = "Highly Clustered Network with Only Single Overlapping Owner",
                style = "font-size:17x;
                weight:bold;
                text-align:right;")
  ) %>%
  visIgraphLayout(
    layout = "layout_with_fr"
  ) %>%
  visGroups(groupname = "Company",
            color = "#1696d2") %>%
  visGroups(groupname = "Beneficial Owner",
            color = "#fccb41") %>%
  visLegend() %>%
  visEdges(
    arrows = "to"
  ) %>%
  visOptions(
  # Specify additional Interactive Elements
    highlightNearest = list(enabled = T, degree = 2, hover = T),
  # Add drop-down menu to filter by company name
    nodesIdSelection = TRUE,
  # Add drop-down menu to filter by category
    selectedBy = "group",
    collapse = TRUE) %>%
  visInteraction(navigationButtons = TRUE)
```


::: panel-tabset

## **Extracting Nodes and Links**

```{r}
high_cc_count <- links_count %>%
  filter(count >= 4)

links_missingrev_cc <- mc3_links %>%
  filter(type == "Company Contacts") %>%
  filter(source %in% high_cc_count$source) %>%
  filter(source %in% nodes_missingrev$id) %>%
  distinct() %>%
  rename("from" = "source",
         "to" = "target")
```

## **Getting Distinct Source and Target**

```{r}
# Get distinct Source and Target
missingrev_source_cc <- links_missingrev_cc %>%
  distinct(from) %>%
  rename("id" = "from")

missingrev_target_cc <- links_missingrev_cc %>%
  distinct(to) %>%
  rename("id" = "to")
```

## **Creating Nodes and Edges Dataframes**

```{r}
# Bind into single dataframe
nodes_missingrev_new_cc <- bind_rows(missingrev_source_cc, missingrev_target_cc)

nodes_missingrev_new_cc$group <- ifelse(nodes_missingrev_new_cc$id %in% company_nodes$id, "Company", "Company Contacts")

```

:::

```{r}
#| code-fold: true
#| fig-height: 6

visNetwork(
    nodes_missingrev_new_cc, 
    links_missingrev_cc,
    width = "100%",
    main = list(text = "Companies Mostly with Fewer Contacts",
                style = "font-size:17px;
                weight:bold;
                text-align:right;")
    
  ) %>%
  visIgraphLayout(
    layout = "layout_with_fr"
  ) %>%
  visGroups(groupname = "Company",
            color = "#1696d2") %>%
  visGroups(groupname = "Company Contacts",
            color = "#eb99c2") %>%
  visLegend() %>%
  visEdges(
    arrows = "from"
  ) %>%
  visOptions(
  # Specify additional Interactive Elements
    highlightNearest = list(enabled = T, degree = 2, hover = T),
  # Add drop-down menu to filter by company name
    nodesIdSelection = TRUE,
  # Add drop-down menu to filter by category
    selectedBy = "group",
    collapse = TRUE) %>%
  visInteraction(navigationButtons = TRUE)
```

:::{ .focusbox .focus data-latex="focus"}  

**Insights from Visualisations:**  

* Similar 'clusters' of companies can be observed in the unreported revenue group (compared to high revenue group), although with far fewer common Beneficial Owners. 
* A couple of companies with abnormally higher count of company contacts can be observed in the second network graph. This could be a possible flag for anomalous structures. 
* Some Company Contacts also form a network amongst themselves, and are not linked to a Company. This could be indicative of suspicious networks, such as Shell companies that are registered under Individual names instead of Company names

:::

### **3.1.3: Who is linked to Higher Number of Multiple Companies?**

```{r}
links_by_target <- mc3_links %>%
  group_by(target, type) %>%
  summarise(company_count = n()) %>%
  arrange(desc(company_count)) %>%
  ungroup()

datatable(links_by_target)
```

From the data output, it seems as though there are multiple individuals who are Beneficial Owners of many companies. As this could be indicative of more convoluted ties between companies or IUU fishing networks, these are filtered out and visualised:

::: panel-tabset

## **Extracting Nodes and Links**

```{r}

# Only get individuals who are Company contacts of more than or equal to 3 companies
cc_count <- links_by_target %>%
  filter(type == "Company Contacts") %>%
  filter(company_count >= 3)

cc_links <- mc3_links %>%
  filter(type == "Company Contacts") %>%
  filter(target %in% cc_count$target) %>%
  rename("from" = "source",
         "to" = "target")
```

## **Getting Distinct Source and Target**

```{r}
# Get distinct Source and Target
cc_source <- cc_links %>%
  distinct(from) %>%
  rename("id" = "from")

cc_target <- cc_links %>%
  distinct(to) %>%
  rename("id" = "to")
```

## **Creating Nodes and Edges Dataframes**

```{r}
# Bind into single dataframe
cc_nodes <- bind_rows(cc_source, cc_target)

cc_nodes$group <- ifelse(cc_nodes$id %in% company_nodes$id, "Company", "Company Contacts")

```
:::

```{r}
#| code-fold: true
#| fig-height: 6

visNetwork(
    cc_nodes, 
    cc_links,
    width = "100%",
    main = list(text = "Multiple Companies Seem to be Owned by Individuals",
                style = "font-size:17x;
                weight:bold;
                text-align:right;")
  ) %>%
  visIgraphLayout(
    layout = "layout_with_fr"
  ) %>%
  visGroups(groupname = "Company",
            color = "#1696d2") %>%
  visGroups(groupname = "Company Contacts",
            color = "#eb99c2") %>%
  visLegend() %>%
  visEdges(
    arrows = "from"
  ) %>%
  visOptions(
  # Specify additional Interactive Elements
    highlightNearest = list(enabled = T, degree = 2, hover = T),
  # Add drop-down menu to filter by company name
    nodesIdSelection = TRUE,
  # Add drop-down menu to filter by category
    selectedBy = "group",
    collapse = TRUE) %>%
  visInteraction(navigationButtons = TRUE)
```

## **Extracting Nodes and Links**

```{r}

# Only get individuals who are beneficial owners of more than or equal to 4 companies
owner_count <- links_by_target %>%
  filter(type == "Beneficial Owner") %>%
  filter(company_count >= 4)

links_owner <- mc3_links %>%
  filter(type == "Beneficial Owner") %>%
  filter(target %in% owner_count$target) %>%
  rename("from" = "source",
         "to" = "target")
```

## **Getting Distinct Source and Target**

```{r}
# Get distinct Source and Target
owner_source <- links_owner %>%
  distinct(from) %>%
  rename("id" = "from")

owner_target <- links_owner %>%
  distinct(to) %>%
  rename("id" = "to")
```

## **Creating Nodes and Edges Dataframes**

```{r}
# Bind into single dataframe
owner_nodes <- bind_rows(owner_source, owner_target)

owner_nodes$group <- ifelse(owner_nodes$id %in% company_nodes$id, "Company", "Beneficial Owner")

```
:::

```{r}
#| code-fold: true
#| fig-height: 6

visNetwork(
    owner_nodes, 
    links_owner,
    width = "100%",
    main = list(text = "Multiple Companies Seem to be Owned by Individuals",
                style = "font-size:17x;
                weight:bold;
                text-align:right;")
  ) %>%
  visIgraphLayout(
    layout = "layout_with_fr"
  ) %>%
  visGroups(groupname = "Company",
            color = "#1696d2") %>%
  visGroups(groupname = "Beneficial Owner",
            color = "#fccb41") %>%
  visLegend() %>%
  visEdges(
    arrows = "to"
  ) %>%
  visOptions(
  # Specify additional Interactive Elements
    highlightNearest = list(enabled = T, degree = 2, hover = T),
  # Add drop-down menu to filter by company name
    nodesIdSelection = TRUE,
  # Add drop-down menu to filter by category
    selectedBy = "group",
    collapse = TRUE) %>%
  visInteraction(navigationButtons = TRUE)
```



## **3.2: What are the most common products/services?**

```{mermaid}
%%| fig-width: 7
%%{
  init: {
    "theme": "base",
    "themeVariables": {
      "primaryColor": "#d8e8e6",
      "primaryTextColor": "#325985",
      "primaryBorderColor": "#325985",
      "lineColor": "#325985",
      "secondaryColor": "#cedded",
      "tertiaryColor": "#fff" 
      }
  }
}%%

flowchart LR
    A{Overall\nNetwork} --> B{Fishy\nCompanies}
    B --> C(Business Type) -.->|Dubious?|D[Products or\nServices]

```


### 3.2.1: Data Preparation: Tokenisation

```{r}
#|code-fold: true
# Replace all 'character(0)' values as unknown
mc3_nodes$product_services[mc3_nodes$product_services == "character(0)"] <- "Unknown"

# Create new dataframe with words split into separate rows
nodes_unnest <- mc3_nodes %>%
  # Create new column 'word' to store split words
  unnest_tokens(word, 
                product_services,
    # Change all words to lowercase for more accurate tokenisation
                to_lower = TRUE,
    # Remove punctuation to exclude from tokenisation
                strip_punct = TRUE)
```


::: panel-tabset
## **Step 1: Extract the Text**

```{r}
# Create a vector containing only the text
nodes_text <- nodes_unnest$word 

# Create a corpus
text <- Corpus(VectorSource(nodes_text))
```

## **Step 2: Clean the text data**

The process of removing specific stopwords using `removeWords` is an iterative process, where higher frequency words are removed if deemed out of context (such as 'well', 'including', 'related' or unproductive in giving specific information about the nature of businesses (such as 'source', 'materials', etc).

```{r}
#| warning: false
text <- text %>%
  # Remove any whitespace
  tm_map(stripWhitespace) %>%
  # remove stopwords
  tm_map(removeWords, stopwords(kind = "en")) %>%
  # Specity stopwords based on initial analysis of word frequency
  tm_map(removeWords, c("products", "including", "well", "related", "services", "source", "materials", "goods", "offers", "range"))
```

## **Step 3: Create a document-term-matrix to count frequency of words**

```{r}
# Generate a document-term-matrix
dtm <- TermDocumentMatrix(text) 
matrix <- as.matrix(dtm) 
# Sort matrix according to frequency
words <- sort(rowSums(matrix),decreasing = TRUE) 
# Count frequency of each word and save as new column in dataframe
text_df <- data.frame(word = names(words),freq = words)

kable(head(text_df,15))
```

The table output shows that "Unknown" products and services are the most frequently listed. While this could possibly point to {{< fa fish-fins >}} *fishy* business relationships, these records may also be masking other anomalies present. A separate text dataframe is created without "unknown" products and services:

```{r}
text_df_known <- text_df[-1,]
```
:::

```{r}
#| code-fold: true
wordcloud2(text_df_known, 
           color = "random-dark", 
           backgroundColor = "#F8F3E6")
```


### 3.2.2: Plotting a Bigram of frequent Products/Services

::: panel-tabset

## **Step 1: Unnesting tokens as bigrams**

```{r}
#| warning: false
nodes_unnest2 <- mc3_nodes %>%
   unnest_tokens(bigram, 
                 product_services, 
                 token = "ngrams", 
                 n = 2, 
                 to_lower = TRUE,) %>%
  # remove empty rows
   filter(!is.na(bigram)) %>%
  # Remove specific stopwords from bigrams
   filter(!str_detect(bigram,"including|range|related"))
```

## **Step 2: Creating Links**

```{r}
product_bigram <- nodes_unnest2 %>%
    count(bigram, sort = TRUE) %>%
  # Split bigram words into separate columns, uding space as delimiter
    separate(bigram, c("word1", "word2"), sep = " ") %>%
  # Only match words not in stopwords
    anti_join(stop_words, by = c("word1" = "word")) %>%
    anti_join(stop_words, by = c("word2" = "word")) %>%
  # Keep only characters, dropping numbers 
    filter(str_detect(word1, "[a-z]") & str_detect(word2, "[a-z]"))

```

## **Step 3: Creating Graph Object**  

Applying a `filter` to keep only most frequently related bigrams

```{r}
product_bigram_graph <- product_bigram %>%
  filter(n >15) %>%
  graph_from_data_frame()
```

:::

```{r}
#| fig-width: 8
#| fig-height: 8
#| code-fold: true
#| warning: false

set.seed(1234)
ggraph(
  product_bigram_graph, 
  layout = "nicely"
  ) +
  geom_edge_link(
    # Adjust transparency of link based on how common the bigram is
    aes(edge_alpha = n),
    arrow = grid::arrow(type = "closed", 
                        length = unit(.2, "cm")),
    # Leave a gap between arrow head and circle
    end_cap = circle(.2, 'cm'),
    show.legend = FALSE
  ) +
  geom_node_point(
    alpha = .7,
    size = 3) +
  geom_node_text(
    aes(label = name), 
    repel = TRUE
  ) +
  labs(title = "High Frequency of Companies Dealing in Seafood Products",
       subtitle = "Darker links indicate higher commonality of related terms"
  ) +
  theme(plot.background = element_rect(fill="#F8F3E6",colour="#F8F3E6")
  )
```


```{r}
datatable(product_bigram)
```




## **How well-connected are the companies?**


