[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "haileycsy",
    "section": "",
    "text": "gif source"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse, forcats)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-themes",
    "title": "Hands on Exercise 1",
    "section": "1: Working with Themes",
    "text": "1: Working with Themes\n\nggplot(data = exam_data,\n       aes(x = RACE)) +\n    geom_bar() + \n    coord_flip()+\n    theme_minimal() + \n    theme(\n      panel.background=element_rect(fill='lightblue', colour='lightblue'),\n      panel.border=element_blank(),\n      panel.grid.major=element_line(linewidth=0.2, linetype='solid', colour=\"white\"), \n      panel.grid.minor=element_line(linewidth=0.2, linetype='solid', colour=\"white\"),\n      plot.background=element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#makeover-design-for-pupil-count-by-race",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#makeover-design-for-pupil-count-by-race",
    "title": "Hands on Exercise 1",
    "section": "2: Makeover Design for Pupil Count by Race",
    "text": "2: Makeover Design for Pupil Count by Race\n\nFormulaForcats\n\n\n\nggplot(data = exam_data, \n       aes(x = reorder(RACE, RACE, function(x)-length(x)))) +\n    geom_bar()+\n    ylim(0, 220) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-1) +\n    labs(x = \"Race\",\n         y = \"No. of\\nPupils\") + \n    theme_grey() +\n    theme(\n      axis.title.y = element_text(hjust=1, angle=0),\n      plot.background=element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n    )\n\n\n\n\n\n\n\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0),\n        plot.background=element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#makeover-design-for-distribution-of-math-scores",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#makeover-design-for-distribution-of-math-scores",
    "title": "Hands on Exercise 1",
    "section": "3: Makeover Design for Distribution of Math Scores",
    "text": "3: Makeover Design for Distribution of Math Scores\n\nggplot(data=exam_data,\n       aes(x=MATHS)) + \n    geom_histogram(bins=20, \n                   color=\"grey30\", \n                   fill=\"lightblue\") +\n    labs(x = \"Math Score\",\n         y = \"No. of Pupils\",\n         title = \"Distribution of Math Scores\") + \n    geom_vline(aes(xintercept=median(exam_data$MATHS, na.rm=T)),\n               color=\"grey30\", linewidth=1, linetype=\"dashed\") + \n    geom_vline(aes(xintercept=mean(exam_data$MATHS, na.rm=T)),\n               colour=\"red\", linewidth=1, linetype=\"dashed\") + \n    theme(plot.background=element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#makeover-design-for-distribution-of-english-score-by-gender",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#makeover-design-for-distribution-of-english-score-by-gender",
    "title": "Hands on Exercise 1",
    "section": "4: Makeover Design for Distribution of English Score by Gender",
    "text": "4: Makeover Design for Distribution of English Score by Gender\n\neng_data <- exam_data[\"ENGLISH\"]\n\nggplot(data=exam_data,\n       aes(x=ENGLISH, fill=GENDER)) +\n    geom_histogram(bins=20, data=eng_data, fill=\"grey\", alpha=0.7, na.rm=T) + \n    geom_histogram(bins=20, color=\"black\", na.rm=T) + \n    facet_wrap(~ GENDER) +\n    xlim(20,100) + \n    labs(x = \"English Score\",\n         y = \"No. of Pupils\",\n         title = \"Distribution of English Scores by Gender\") + \n    theme_bw() + \n    theme(plot.background=element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n    )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#makeover-design-for-scatterplot-of-english-and-math-scores",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#makeover-design-for-scatterplot-of-english-and-math-scores",
    "title": "Hands on Exercise 1",
    "section": "5: Makeover Design for Scatterplot of English and Math Scores",
    "text": "5: Makeover Design for Scatterplot of English and Math Scores\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_vline(aes(xintercept=50),\n               color=\"grey\", linewidth=0.8, linetype=\"dashed\") + \n  geom_hline(aes(yintercept=50),\n               color=\"grey\", linewidth=0.8, linetype=\"dashed\") + \n  labs(x = \"Math Score\",\n       y = \"English Score\",\n       title = \"Correlation between English and Math Scores\") + \n  theme_gray() +\n  theme(plot.background=element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, ggpmisc,\n               ggthemes, hrbrthemes, InraeThemes, ggthemr,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#annotations-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#annotations-with-ggrepel",
    "title": "Hands on Exercise 2",
    "section": "1: Annotations with ggrepel",
    "text": "1: Annotations with ggrepel\nA comparison between annotations using geom_label(), geom_text() and package ggrepel\n\nwith ggrepelwithout\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5,\n              formula = y~x) +  \n  geom_label_repel(aes(label = ID), \n                   fontface=\"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  labs(x=\"Math\",\n       y=\"English\",\n       title=\"Correlation between English and Maths scores for Primary 3\",\n       subtitle=\"There is a positive correlation between English and Math Scores\") +\n  theme(text=element_text(family=\"mono\"),\n        plot.background=element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5,\n              formula = y~x) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  labs(x=\"Math\",\n       y=\"English\",\n       title=\"Correlation between English and Maths scores for Primary 3\",\n       subtitle=\"There are too many annotations to see the points clearly\") +\n  theme(plot.background=element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#customising-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#customising-themes",
    "title": "Hands on Exercise 2",
    "section": "2: Customising themes",
    "text": "2: Customising themes\n\n2.1: ggtheme package\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  labs(x = \"Math Scores\",\n       y = \"No. of Students\",\n       title = \"Distribution of Math Scores\") +\n  theme_economist()\n\n\n\n\n\n\n2.2: hbrthemes package\n\nPlot 1Code 1Plot 2Code 2\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  labs(x = \"Math Scores\",\n       y = \"No. of Students\",\n       title = \"Distribution of Math Scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  labs(x = \"Math Scores\",\n       y = \"Number of Students\",\n       title = \"Distribution of Math Scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 12,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#composite-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#composite-graphs",
    "title": "Hands on Exercise 2",
    "section": "3: Composite Graphs",
    "text": "3: Composite Graphs\n\n3.1 Combining 2 graphs: ‘+’ operator\n\np1 <- ggplot(data=exam_data, \n            aes(x = MATHS)) +\n        geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey90\", \n                 fill=\"#3A3B60\") +\n        labs(x = \"Math Scores\",\n             y = \"Number of Students\",\n             title = \"Distribution of Math Scores\")\n\np2 <- ggplot(data=exam_data, \n            aes(x = ENGLISH)) +\n        geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey90\", \n                 fill=\"#4d5887\") +\n        labs(x = \"English Scores\",\n             title = \"Distribution of English Scores\") +\n        theme(axis.title.y = element_blank())\n\np1 + p2\n\n\n\n\n\n\n3.2 Combining 3 graphs: ‘|’, ‘/’, ‘()’\n\nUse different operators to specify composition\n\n“|” operator to stack two ggplot2 graphs\n“/” operator to place the plots beside each other\n“()” operator defines the sequence of the plotting\n\n\n\np3 <- ggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n      geom_point() +\n      geom_smooth(method=lm, \n              linewidth=0.5,\n              formula = y~x) + \n      stat_poly_line() +\n      stat_poly_eq() +\n      coord_cartesian(xlim=c(0,100),\n                      ylim=c(0,100)) +\n      labs(x=\"Math\",\n           y=\"English\",\n           title=\"Correlation between Math and English Scores\")\n\n(p1/p2) | p3\n\n\n\n\n\n\n3.3: Adding Annotations\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\nApplying themes to composite\ntheme_economist()\n\npatchwork <- ((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\npatchwork & theme_economist()\n\n\n\n\ntheme_inrae()\n\npatchwork <- ((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\npatchwork & theme_inrae()\n\n\n\n\ntheme_solarized_2()\n\npatchwork <- ((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\npatchwork & theme_solarized_2()\n\n\n\n\nggthemr: chalk\n\nggthemr(\"chalk\")\n\npatchwork <- ((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\npatchwork\n\n\n\n\n\n\n3.4: Inset Figures\nUsing inset_element() to place a plot within another plot\n\nggthemr_reset()\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "code block\npacman::p_load(ggiraph, plotly, gganimate,\n               gifski, gapminder,\n               DT, tidyverse, patchwork, readxl,\n               urbnthemes, ggthemr, wesanderson)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph-package",
    "title": "Hands-on Exercise 3",
    "section": "ggiraph package",
    "text": "ggiraph package\n\nInteractive Arguments of ggiraph\n\nTooltip: displayed when hovering over chart elements\nOnclick: executed when elements are clicked\nData_id: Uses columns as id to show association of elements"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltips",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltips",
    "title": "Hands-on Exercise 3",
    "section": "1: Tooltips",
    "text": "1: Tooltips\nOriginal ggplot dotplot:\n\n\ncode block\nset_urbn_defaults(style = \"print\")\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(stackdir = \"up\", \n               binwidth = 1,\n               dotsize = 1) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(x = \"Math Scores\") + \n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank())\n\n\n\n\n\nWith ggiraph tooltips:\n\n\ncode block\np <- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1,\n    dotsize = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(x = \"Math Scores\")\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n1.1: Controlling Information in Tooltips\nCustomise information to be included in tooltips by creating a new list\n\n\ncode block\nexam_data$tooltip <- c(paste0(\n  \"Name:\", exam_data$ID,\n  \"\\n Class:\", exam_data$CLASS\n))\n\np <- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE, \n    binwidth = 1,\n    dotsize = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(x = \"Math Scores\")\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n1.2: Formatting style of Tooltips\nAdding css arguments to opts_tooltip() of ggiraph\n\n\ncode block\ntooltip_css <- \"background-color:#dfdfeb; font-style:bold; color:black;\"  #<<\n\nexam_data$tooltip <- c(paste0(\n  \"Name:\", exam_data$ID,\n  \"\\n Class:\", exam_data$CLASS\n))\n\np <- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE, \n    binwidth = 1,\n    dotsize = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(x = \"Math Scores\")\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                               \n\n\n\n\n\n\n\n\n1.3: Displaying Statistics in tooltips\nAdding stat_summary() calculations in ggplot\n\n\ncode block\nggthemr(\"flat\")\n\ntooltip <- function(y, ymax, accuracy = .01) {   #<<\n  mean <- scales::number(y, accuracy = accuracy) #<<\n  sem <- scales::number(ymax - y, accuracy = accuracy) #<<\n  paste(\"Mean Math Score:\", mean, \"+/-\", sem) #<<\n} #<<\n\np2 <- ggplot(data=exam_data, \n                   aes(x = RACE)) +\n  stat_summary(aes(y = MATHS, \n                  tooltip = after_stat(tooltip(y, ymax))),\n                  fun.data =\"mean_se\",\n                  geom = GeomInteractiveCol,\n                  fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom =\"errorbar\", \n               width = 0.2, linewidth = 0.2) +\n  labs(y =\"Math Scores\") + \n  theme(axis.title.x = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\ngirafe(ggobj = p2,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id",
    "title": "Hands-on Exercise 3",
    "section": "2: Hover effect with data_id",
    "text": "2: Hover effect with data_id\n\ndata_id is specified as an aes() argument in the interactive geom functions\ne.g: geom_dotplot_interactive(aes(data_id = variablename))\n\n\n\ncode block\np <- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             #<<\n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL) + \n  labs(x =\"Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)        \n\n\n\n\n\n\n\n2.1: Formatting Style of Hover Effect\n\nCustomisation Options\n\nopts_hover(css = NULL, reactive = FALSE, nearest_distance = NULL) > effect on geometries\n\nopts_hover_inv(css = NULL) > effect on other geometries, while one is hovered\nopts_hover_key(css = NULL, reactive = FALSE) > interactive scales\nopts_hover_theme(css = NULL, reactive = FALSE) > interactive theme elements\n\n\n\n\ncode block\np <- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL) + \n  labs(x =\"Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                     #<<\n  opts_hover(css = \"fill: #202020;\"), #<<\n  opts_hover_inv(css = \"opacity:0.2;\") #<<\n  )                                   #<<  \n) \n\n\n\n\n\n\n\n\n1 + 2: Tooltip + Hover Powers Combined!!\n\n\ncode block\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, #<<\n        data_id = CLASS),#<<              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  labs(x =\"Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n2.2: Coordinated Multiple Views\n\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too\n\nUse interactive functions of ggiraph to create multiple views\n\nPatchwork function from patchwork package weaves views together as coordinated plots\n\n\n\n\ncode block\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  labs(x =\"Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS,\n        data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  labs(x =\"English Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\ngirafe(code = print(p1 / p2), #<<\n       width_svg = 6,\n       height_svg = 6,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#onlick",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#onlick",
    "title": "Hands-on Exercise 3",
    "section": "3: Onlick",
    "text": "3: Onlick\nonclick argument opens link up in new window when clicked.\n\n\ncode block\ntt <- \"click me\"\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.onemap.gov.sg/main/v2/schoolquery\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(aes(tooltip = tt,\n                               onclick = exam_data$onclick),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL) +\n  labs(x =\"Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-package",
    "title": "Hands-on Exercise 3",
    "section": "plotly package",
    "text": "plotly package\nCreate interactive graphs using:\n\nplot_ly()\nggplotly()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#using-plot_ly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#using-plot_ly",
    "title": "Hands-on Exercise 3",
    "section": "3.1: Using plot_ly()",
    "text": "3.1: Using plot_ly()\n\n\ncode block\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n3.1.2: Adding Visual Variables\nAdding color argument to code chunk to vary marker colors by specified category\n\n\ncode block\nplot_ly(data = exam_data, \n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#using-ggplotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#using-ggplotly",
    "title": "Hands-on Exercise 3",
    "section": "3.2: Using ggplotly()",
    "text": "3.2: Using ggplotly()\n\n\ncode block\nmoonrise_cols <- wes_palette(\"Moonrise2\", type = \"discrete\")\n\np <- ggplot(data = exam_data,\n            aes(x = ENGLISH,\n                y = MATHS,\n                color = RACE,\n                text = paste(\"<b>English Score:</b>\", ENGLISH, \"<br><b>Math Score:</b>\", MATHS,\"<br>Race:\", RACE))) +\n      geom_point(size = 1.5) +\n      labs(title = \"Math and English Scores by Race\",\n           x = \"English Score\",\n           y = \"Math Score\") +\n      scale_color_manual(values = wes_palette(\"Moonrise2\", n = 4)) + \n      theme_grey() +\n      theme(plot.title = element_text(color = moonrise_cols[4], size = 14, face = \"bold\"),\n            axis.title.x = element_text(color = moonrise_cols[1], size = 10, face = \"bold\"),\n            axis.title.y = element_text(color = moonrise_cols[1], size = 10, face = \"bold\"),\n            plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\")\n           )\n\nggplotly(p, tooltip = \"text\")\n\n\n\n\n\n\n\n3.2.2: Coordinated Multiple views with ggplotly\n\nThis involves three steps:\n\nhighlight_key() of plotly package is used as shared data\ncreate scatterplots using ggplot2 functions\nsubplot() of plotly package is used to place them side-by-side\n\n\n\n\ncode block\nd <- highlight_key(exam_data)\n\np1 <- ggplot(data = d, \n            aes(x = MATHS,\n                y = ENGLISH,\n                text = paste(\"<b>Math Score:</b>\", MATHS,\"<br><b>English Score:\", ENGLISH))) +\n  geom_point(size = 1, shape = 18) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) + \n  theme(plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\np2 <- ggplot(data = d, \n            aes(x = MATHS,\n                y = SCIENCE,\n                text = paste(\"<b>Math Score:</b>\", MATHS,\"<br><b>Science Score:\", SCIENCE))) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  theme(plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\nsubplot(ggplotly(p1, tooltip = \"text\"),\n        ggplotly(p2, tooltip = \"text\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#crosstalk-and-dt",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#crosstalk-and-dt",
    "title": "Hands-on Exercise 3",
    "section": "Crosstalk and DT",
    "text": "Crosstalk and DT\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\nLimitations of Crosstalk:\n\nHTML widgets must be specifically modified to support Crosstalk\nOnly works for linked brushing and filtering of views that show individual data points, not aggregate or summary views\nBecause all data must be loaded into the browser, Crosstalk is not appropriate for large data sets"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#datatables-using-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#datatables-using-dt-package",
    "title": "Hands-on Exercise 3",
    "section": "4.1: DataTables using DT package",
    "text": "4.1: DataTables using DT package\nDT package allow rendering of data objects as HTML tables\n\n\ncode block\nDT::datatable(exam_data[c(\"ID\",\"CLASS\",\"GENDER\",\"RACE\",\"ENGLISH\",\"MATHS\",\"SCIENCE\")],\n              caption = htmltools::tags$caption(style = \"caption-side: bottom; text-align: center;\",\n                                                \"Table 1: \", htmltools::em(\"Exam Data for Primary 3\")),\n              class = \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linking-plot-to-table",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linking-plot-to-table",
    "title": "Hands-on Exercise 3",
    "section": "4.2: Linking Plot to Table",
    "text": "4.2: Linking Plot to Table\n\n\ncode block\nexam_data <- subset(exam_data, select = c(1:7))\nd <- highlight_key(exam_data)\n\np <- ggplot(data = d, \n            aes(x = MATHS,\n                y = ENGLISH,\n                text = paste(\"<b>Math Score:</b>\", MATHS,\"<br><b>English Score:\", ENGLISH))) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) + \n  theme(plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\ngg <- highlight(ggplotly(p, tooltip = \"text\"),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#gganimate-and-gifski-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#gganimate-and-gifski-packages",
    "title": "Hands-on Exercise 3",
    "section": "gganimate and gifski packages",
    "text": "gganimate and gifski packages\ngganimate provides a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time\nview_*() defines how the positional scales should change along the animation\nshadow_*() defines how data from other points in time should be presented in the given point in time\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation\nease_aes() defines how different aesthetics should be eased during transitions\n\ngifski converts video frames to GIF animations\n*Importing Data**\n\n\ncode block\ncol <- c(\"Ethnicity\")\n\nmsia_pop <- read_csv(\"data/Malaysia_demographics.csv\") %>%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-bubble-plot-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-bubble-plot-1",
    "title": "Hands-on Exercise 3",
    "section": "5.1: Animated Bubble Plot 1",
    "text": "5.1: Animated Bubble Plot 1\n\nThis involves three steps:\n\nCreate a static Bubble Plot using ggplot\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year)\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce\n\n\n\n\ncode block\nggplot(msia_pop, aes(x = Pct_Old, y = Pct_Young, \n                      size = Population, \n                      colour = Ethnicity)) +\n  geom_point(alpha = 0.7) +\n  scale_colour_manual(values = wes_palette(\"Darjeeling1\")) +\n  scale_size(range = c(5, 25)) +\n  labs(title = 'Malaysian Population by Ethnicity for Year: {frame_time}',\n       subtitle = \"Data Source: https://www.kaggle.com/datasets/jasonkwm/malaysia-demographic-20102019\",\n       x = '% Aged', \n       y = '% Young') +\n  guides(size = \"none\") +\n  theme(legend.position = \"bottom\",\n        plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\")) + \n  transition_time(Year) +       #<<\n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-bubble-plot-2",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-bubble-plot-2",
    "title": "Hands-on Exercise 3",
    "section": "5.2: Animated Bubble Plot 2",
    "text": "5.2: Animated Bubble Plot 2\n*Importing data**\n\n\ncode block\nglobalPop <- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate(across(where(is.character), as.factor)) %>%\n  mutate(Year = as.integer(Year))\n\n\n\n\ncode block\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  theme_gray() + \n  theme(plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\")) + \n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-frame-animations",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-frame-animations",
    "title": "Hands-on Exercise 3",
    "section": "Plotly Frame Animations",
    "text": "Plotly Frame Animations"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggplotly-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggplotly-animated-bubble-plot",
    "title": "Hands-on Exercise 3",
    "section": "6.1: ggplotly Animated Bubble Plot",
    "text": "6.1: ggplotly Animated Bubble Plot\nggplotly() is used to convert the R graphic object into an animated svg object.\n\n\ncode block\ngg <- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),  #<<\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme_gray() + \n  theme(plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plot_ly-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plot_ly-animated-bubble-plot",
    "title": "Hands-on Exercise 3",
    "section": "6.2: plot_ly() Animated Bubble Plot",
    "text": "6.2: plot_ly() Animated Bubble Plot\n\n\ncode block\nbp <- globalPop %>%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands on Exercise 4",
    "section": "",
    "text": "Load and Install R Packages\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nImporting the data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nhead(exam_data, 10)\n\n# A tibble: 10 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n\n\n\n\nOne-Sample Test: gghistostats()\n\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\") + \n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\n\n\n\n\nBayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\n\n\n\nTwo-Sample Test of difference in means: ggbetweenstats()\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE) +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\n\n\n\n\n\nOne-way ANOVA Test of difference in means: ggbetweenstats()\n\nggbetweenstats(\n  data = exam_data,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE) +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\n\n\n\n\n\nCorrelation Test: ggscatterstats()\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE) +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\n\n\n\n\n\nAssociation Test (Dependence): ggbarstats()\n\nexam1 <- exam_data %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER) +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands on Exercise 5",
    "section": "",
    "text": "Modelling, Visualising and Analysing Network Data with R"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-date-and-time-formats",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-date-and-time-formats",
    "title": "Hands on Exercise 5",
    "section": "1.1: Changing Date and Time formats",
    "text": "1.1: Changing Date and Time formats\n\n\ndmy() transforms the SentDate to Date data type.\n\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE.\n\n\n\n\ncode block\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 10\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    <date> 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     <ord> Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#aggregating-attributes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#aggregating-attributes",
    "title": "Hands on Exercise 5",
    "section": "1.2 Aggregating Attributes",
    "text": "1.2 Aggregating Attributes\nGAStech_edges data.frame consists of individual e-mail flow records, which is not very useful for visualisation.\nIn view of this, data will be aggregated by date, senders, receivers, main subject and day of the week.\n\n\ncode block\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-a-network-graph-dataframe",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-a-network-graph-dataframe",
    "title": "Hands on Exercise 5",
    "section": "2.1: Using tbl_graph() to build a network graph dataframe",
    "text": "2.1: Using tbl_graph() to build a network graph dataframe\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data\n\nas_tbl_graph() converts network data and objects to a tbl_graph network\n\n\n\ncode block\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 54 × 4\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag…\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n# ℹ 48 more rows\n#\n# A tibble: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\n\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.It states that the Node Data is active – this makes it possible to manipulate the data in one tibble at a time."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-activate-to-change-the-activate-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-activate-to-change-the-activate-object",
    "title": "Hands on Exercise 5",
    "section": "2.2: Using activate() to change the activate object",
    "text": "2.2: Using activate() to change the activate object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\n\ncode block\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 1,372 × 4\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# ℹ 1,366 more rows\n#\n# A tibble: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#basic-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#basic-network-graph",
    "title": "Hands on Exercise 5",
    "section": "3.1: Basic Network Graph",
    "text": "3.1: Basic Network Graph\n\n\ncode block\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point() +\n  theme_graph(background = NA)\n\n\n\n\n\ncode block\nth_foreground(\n  foreground = \"#F8F3E6\", \n  border = FALSE)\n\n\nList of 2\n $ panel.border    : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ strip.background:List of 5\n  ..$ fill         : chr \"#F8F3E6\"\n  ..$ colour       : chr \"#F8F3E6\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#playing-with-themes-and-colors",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#playing-with-themes-and-colors",
    "title": "Hands on Exercise 5",
    "section": "3.2: Playing with Themes and Colors",
    "text": "3.2: Playing with Themes and Colors\n\n\ncode block\ng <- ggraph(\n  GAStech_graph\n  ) + \n  geom_edge_link(\n    aes(colour = 'grey50')\n  ) +\n  geom_node_point(\n    aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#playing-with-graph-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#playing-with-graph-layouts",
    "title": "Hands on Exercise 5",
    "section": "3.3: Playing with Graph Layouts",
    "text": "3.3: Playing with Graph Layouts\nFruchterman and Reingold layout\n\n\ncode block\ng <- ggraph(\n  GAStech_graph, \n    layout = \"fr\"\n  ) +\n  geom_edge_link(\n    aes()\n  ) +\n  geom_node_point(\n    aes())\n\ng + theme_graph()\n\n\n\n\n\nAdding color codes to nodes\n\n\ncode block\ng <- ggraph(\n    GAStech_graph, \n    layout = \"nicely\"\n  ) + \n  geom_edge_link(\n    aes()\n  ) +\n  geom_node_point(\n    aes(colour = Department, \n    size = 3))\n\ng + theme_graph()\n\n\n\n\n\nModifying Edges\n\n\ncode block\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#facet-edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#facet-edges",
    "title": "Hands on Exercise 5",
    "section": "4.1: Facet Edges",
    "text": "4.1: Facet Edges\n\n\ncode block\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#framed-facet-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#framed-facet-graphs",
    "title": "Hands on Exercise 5",
    "section": "4.2: Framed Facet Graphs",
    "text": "4.2: Framed Facet Graphs\n\n\ncode block\nset_graph_style() \n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#measuring-centrality",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#measuring-centrality",
    "title": "Hands on Exercise 5",
    "section": "6.1: Measuring Centrality",
    "text": "6.1: Measuring Centrality\nCentrality allows us to quantify the relationships within the network. It reports\n* the connectivity of the node within a network, * the complexity of a network, * the clusters or sub-groups within a network.\n\n\ncode block\ng <- GAStech_graph %>%\n  # Use tidyverse functions for tidygraph\n  mutate(betweenness_centrality = centrality_betweenness()) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n          # varying size of nodes by centrality measure            \n            size=betweenness_centrality))\ng \n\n\n\n\n\nNetwork Metrics: Degree Degree refers to the number of direct connections a node has. It is often interpreted in terms of the immediate risk of node for catching whatever is flowing through the network (such as a virus, or some information).\nThis is different from betweenness index, which smeasures the relative “weight” of importance of the node.\nNetwork Metrics: Betweenness centrality Betweenness is a centrality measure of a vertex within a graph. It is a way of detecting the amount of influence a node has over the flow of information in a graph. It is often used to find nodes that serve as a bridge from one part of a graph to another.Vertices that occur on many shortest paths between other vertices have higher betweenness than those that do not.\nNetwork Metrics: In-degree & Out-degree If the network is directed (meaning that ties have direction), then we usually define two separate measures of degree centrality, namely indegree and outdegree. Indegree is a count of the number of ties directed to the node, and outdegree is the number of ties that the node directs to others.\nFor positive relations such as friendship or advice, we normally interpret indegree as a form of popularity, and outdegree as gregariousness."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "title": "Hands on Exercise 5",
    "section": "7.1: Data Preparation",
    "text": "7.1: Data Preparation\n\n\ncode block\nGAStech_edges_aggregated <- GAStech_edges %>%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %>%\n  rename(from = id) %>%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %>%\n  rename(to = id) %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(from, to) %>%\n    summarise(weight = n()) %>%\n  filter(from!=to) %>%\n  filter(weight > 1) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'from'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-graph",
    "title": "Hands on Exercise 5",
    "section": "7.2: Plotting the Graph",
    "text": "7.2: Plotting the Graph\n\n\ncode block\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#adding-colored-groups",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#adding-colored-groups",
    "title": "Hands on Exercise 5",
    "section": "7.3: Adding colored groups",
    "text": "7.3: Adding colored groups\n\n\ncode block\n#rename categorical color variable from \"Department\" to \"group\"\nGAStech_nodes <- GAStech_nodes %>%\n  rename(group = Department) \n\n# Assign colors with vislegend()\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#specifying-curved-edges-with-visedges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#specifying-curved-edges-with-visedges",
    "title": "Hands on Exercise 5",
    "section": "7.4: Specifying curved edges with visEdges()",
    "text": "7.4: Specifying curved edges with visEdges()\n\n\ncode block\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#incorporating-interactivity-menu-with-visoptions",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#incorporating-interactivity-menu-with-visoptions",
    "title": "Hands on Exercise 5",
    "section": "7.5: Incorporating interactivity menu with visOptions()",
    "text": "7.5: Incorporating interactivity menu with visOptions()\nAdd argument nodesIdSelection = TRUE\n\n\ncode block\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands on Exercise 6",
    "section": "",
    "text": "Multivariate Analysis & Visualisation"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#loading-packages",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#loading-packages",
    "title": "Hands on Exercise 6",
    "section": "Loading packages",
    "text": "Loading packages\n\npacman::p_load(plotly, tidyverse, DT, ggtern, urbnthemes)\n\n\n\ncode block\nlibrary(ggtern)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data",
    "title": "Hands on Exercise 6",
    "section": "Data",
    "text": "Data\nDataset consists of demographic data about Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling (June 2000-2018)\n\n\ncode block\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\nRows: 108126 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): PA, SZ, AG\ndbl (2): Year, Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nDerive new measures from the dataset, using mutate()\n\n\ncode block\n#Deriving the young, old and economically categories\nagpop_mutated <- pop_data %>%\n  mutate(\n    `Year` = as.character(Year))%>%\n  pivot_wider(\n    names_from = AG, \n    values_from = Population) %>%\n  mutate(\n    YOUNG = rowSums(.[4:8]))%>%\n  mutate(\n    ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(\n    OLD = rowSums(.[17:21])) %>%\n  mutate(\n    TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)\n\ndatatable(head(agpop_mutated))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#static-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#static-ternary-diagram",
    "title": "Hands on Exercise 6",
    "section": "1.1: Static Ternary Diagram",
    "text": "1.1: Static Ternary Diagram\n\n\ncode block\nset_urbn_defaults(style = \"print\")\n\n#ternary plots take x,y,z values \nggtern(\n    data = agpop_mutated,\n    aes(x = YOUNG,\n        y= ACTIVE, \n        z = OLD)\n  ) +\n  geom_point() +\n  theme(\n    plot.background = element_rect(fill = \"#F8F3E6\"),\n    panel.background = element_rect(fill = \"#F8F3E6\")\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#theming-by-color",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#theming-by-color",
    "title": "Hands on Exercise 6",
    "section": "1.2: Theming by Color",
    "text": "1.2: Theming by Color\n\n\ncode block\nggtern(\n    data = agpop_mutated,\n    aes(x = YOUNG,\n        y= ACTIVE, \n        z = OLD)\n  ) +\n  geom_point() +\n  labs(\n    title=\"Population structure, 2015\"\n  ) +\n  theme_rgbw() +\n  theme(\n    plot.background = element_rect(fill = \"#F8F3E6\"),\n    panel.background = element_rect(fill = \"#F8F3E6\")\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-ternary-diagrams-with-plot_ly",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-ternary-diagrams-with-plot_ly",
    "title": "Hands on Exercise 6",
    "section": "1.3: Interactive Ternary Diagrams with plot_ly()",
    "text": "1.3: Interactive Ternary Diagrams with plot_ly()\n\n\ncode block\n# function for creating annotation object\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# function for axis formatting\naxis <- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  # plot_ly uses a,b,c instead of x,y,z\n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"#3E4254\"), \n  # Make points more transparent to see overlaps\n  alpha = .7,\n  type = \"scatterternary\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes,\n  # Add margin arguments to layout to prevent plot truncation \n    margin = list(t = 60,\n                  b = 60)\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#required-packages",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#required-packages",
    "title": "Hands on Exercise 6",
    "section": "Required packages",
    "text": "Required packages\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-1",
    "title": "Hands on Exercise 6",
    "section": "Data",
    "text": "Data\nA Wine Quality Data Set from the UCI Machine Learning Repository is used for this study.\n\n\n\n\n\n\n\n\n\n\n\nInput Variables\nfixed acidity\nvolatile acidity\ncitric acid\nresidual sugar\ndensity\n\n\n\n\n\nchlorides\nfree sulfur dioxide\nYes\ntotal sulfur dioxide\npH\n\n\nOutput Variables\nquality (0-10)\n\n\n\n\n\n\n\n\n\ncode block\nwine <- read_csv(\"data/wine_quality.csv\")\n\n\nRows: 6497 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): type\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\ncode block\ndatatable(head(wine))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#correlation-matrix-using-base-r-pairs",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#correlation-matrix-using-base-r-pairs",
    "title": "Hands on Exercise 6",
    "section": "2.1: Correlation Matrix using Base R pairs()",
    "text": "2.1: Correlation Matrix using Base R pairs()\n\n\ncode block\n# Plot only columns 1 - 11\npairs(wine[,1:11])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#lower-corner-upper-corner-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#lower-corner-upper-corner-matrix",
    "title": "Hands on Exercise 6",
    "section": "2.2: Lower Corner/ Upper Corner Matrix",
    "text": "2.2: Lower Corner/ Upper Corner Matrix\nLower\n\n\ncode block\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\nUpper\n\n\ncode block\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#including-correlation-coefficients-in-plots",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#including-correlation-coefficients-in-plots",
    "title": "Hands on Exercise 6",
    "section": "2.3: Including Correlation Coefficients in Plots",
    "text": "2.3: Including Correlation Coefficients in Plots\nThe complicated way\n\n\ncode block\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#basic-plot",
    "title": "Hands on Exercise 6",
    "section": "4.1: Basic plot",
    "text": "4.1: Basic plot\n\n\ncode block\ncorrplot(wine_cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#working-with-shapes",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#working-with-shapes",
    "title": "Hands on Exercise 6",
    "section": "4.2: Working with shapes",
    "text": "4.2: Working with shapes\n\npieellipseshadenumber\n\n\n\n\ncode block\ncorrplot(wine_cor,\n         method = \"pie\")\n\n\n\n\n\n\n\n\n\ncode block\ncorrplot(wine_cor,\n         method = \"ellipse\")\n\n\n\n\n\n\n\n\n\ncode block\ncorrplot(wine_cor,\n         method = \"shade\")\n\n\n\n\n\n\n\n\n\ncode block\ncorrplot(wine_cor,\n         method = \"number\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#working-with-upper-lower-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#working-with-upper-lower-layouts",
    "title": "Hands on Exercise 6",
    "section": "4.3: Working with Upper & Lower Layouts",
    "text": "4.3: Working with Upper & Lower Layouts\n\n\ncode block\ncorrplot(wine_cor,\n         method = \"shade\",\n         type = \"lower\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#working-with-mixed-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#working-with-mixed-layouts",
    "title": "Hands on Exercise 6",
    "section": "4.4: Working with Mixed layouts",
    "text": "4.4: Working with Mixed layouts\n\n\ncode block\ncorrplot.mixed(wine_cor, \n               lower = \"circle\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#changing-font-colors-and-removing-elements",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#changing-font-colors-and-removing-elements",
    "title": "Hands on Exercise 6",
    "section": "4.5: Changing font colors and removing elements",
    "text": "4.5: Changing font colors and removing elements\n\n\ncode block\ncorrplot(wine_cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"grey10\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#adding-test-of-significance-to-corrgram",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#adding-test-of-significance-to-corrgram",
    "title": "Hands on Exercise 6",
    "section": "4.6: Adding Test of Significance to corrgram",
    "text": "4.6: Adding Test of Significance to corrgram\nCompute p-values and confidence intervals using corr.mtest()\n\n\ncode block\nwine_sig = cor.mtest(wine_cor, conf.level= .95)\n\n\n\n\ncode block\ncorrplot(wine_cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         # Insert test to graph using this argument\n         p.mat = wine_sig$p,\n         sig.level = .05)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#reordering-a-corrgram",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#reordering-a-corrgram",
    "title": "Hands on Exercise 6",
    "section": "4.7: Reordering a corrgram",
    "text": "4.7: Reordering a corrgram\n\nCorrplot package supports 4 sorting methods:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.”hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n\n\nhclustAOE\n\n\n\n\ncode block\ncorrplot.mixed(wine_cor, \n               lower = \"shade\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               tl.col = \"grey10\",\n               order=\"hclust\",\n               hclust.method = \"ward.D\",\n               addrect = 3)\n\n\n\n\n\n\n\n\n\ncode block\ncorrplot.mixed(wine_cor, \n               lower = \"shade\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"grey10\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#required-packages-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#required-packages-1",
    "title": "Hands on Exercise 6",
    "section": "Required Packages",
    "text": "Required Packages\n\npacman::p_load(seriation, dendextend, heatmaply)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-2",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-2",
    "title": "Hands on Exercise 6",
    "section": "Data",
    "text": "Data\nData used for this study is the World Happiness 2018 Report.\n\n\ncode block\nwh <- read_csv(\"data/WHData-2018.csv\")\n\n\nRows: 156 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country, Region\ndbl (10): Happiness score, Whisker-high, Whisker-low, Dystopia, GDP per capi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\ncode block\ndatatable(head(wh))\n\n\n\n\n\n\n\nPreparing the data:\n\n# row names should be country\nrow.names(wh) <- wh$Country\n\n# transform dataframe into datamatrix\n\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#base-r-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#base-r-heatmap",
    "title": "Hands on Exercise 6",
    "section": "5.1: Base R heatmap()",
    "text": "5.1: Base R heatmap()\nThe arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n\ncode block\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv = NA, \n                      Colv = NA)\n\n\n\n\n\nBase R cluster heatmap\n\n\ncode block\nwh_heatmap <- heatmap(wh_matrix)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-heatmap-with-heatmaply",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-heatmap-with-heatmaply",
    "title": "Hands on Exercise 6",
    "section": "5.2: Interactive Heatmap with heatmaply",
    "text": "5.2: Interactive Heatmap with heatmaply\n\n\ncode block\nheatmaply(mtcars)\n\n\n\n\n\n\n\n5.2.1: Column and Row Scaling\nWhen variables come from normal distribution, scaling will bring them closer to standard normal distribution\n\n\ncode block\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n5.2.2: Normal Standardisation\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\n\n\ncode block\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands on Exercise 7",
    "section": "",
    "text": "It’s About Time"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#preparation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#preparation",
    "title": "Hands on Exercise 7",
    "section": "Preparation",
    "text": "Preparation\nR Packages:\n\npacman::p_load(ggHoriPlot, ggthemes, tidyverse)\n\nLoading the Data:\n\naverp <- read_csv(\"data/AVERP.csv\") %>%\n  mutate(Date = dmy(Date)) %>%\n  rename(Consumer_items = 'Consumer Items')\n\nRows: 7452 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Date, Consumer Items\ndbl (1): Values\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-the-horizon-plot",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-the-horizon-plot",
    "title": "Hands on Exercise 7",
    "section": "Plotting the Horizon Plot",
    "text": "Plotting the Horizon Plot\n\naverp %>% \n  filter(Date >= \"2018-01-01\") %>%\n  ggplot() +\n  geom_horizon(\n    aes(x = Date, y = Values), \n    origin = \"midpoint\", \n    horizonscale = 6\n  )+\n  facet_grid(Consumer_items~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  scale_x_date(\n    expand=c(0,0), \n    date_breaks = \"3 month\", \n    date_labels = \"%b%y\"\n  ) +\n  labs(\n    title = \"Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)\"\n  ) +\n  theme(\n    panel.spacing.y = unit(0, \"lines\"), \n    strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n    legend.position = \"none\",\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size = 7, angle = 90),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank(),\n    panel.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"),\n    plot.background = element_rect(fill = \"#F8F3E6\", color = \"#F8F3E6\"))\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse, skimr)\n\n\n\n\nDataset types used for this study are:\n\nESRI Shapefile: MP14_SUBZONE_WEB_PL\naspatial data file: respopagesextod2011to2020.csv, with fields used as unique identifiers to geocode the shapefile\n\n\nESRI Shapefileaspatial data\n\n\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\haileycsy\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nskim(mpsz)\n\nWarning: Couldn't find skimmers for class: sfc_MULTIPOLYGON, sfc; No\nuser-defined `sfl` provided. Falling back to `character`.\n\n\n\nData summary\n\n\nName\nmpsz\n\n\nNumber of rows\n323\n\n\nNumber of columns\n16\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n9\n\n\nDate\n1\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSUBZONE_N\n0\n1\n4\n29\n0\n323\n0\n\n\nSUBZONE_C\n0\n1\n6\n6\n0\n323\n0\n\n\nCA_IND\n0\n1\n1\n1\n0\n2\n0\n\n\nPLN_AREA_N\n0\n1\n4\n23\n0\n55\n0\n\n\nPLN_AREA_C\n0\n1\n2\n2\n0\n55\n0\n\n\nREGION_N\n0\n1\n11\n17\n0\n5\n0\n\n\nREGION_C\n0\n1\n2\n3\n0\n5\n0\n\n\nINC_CRC\n0\n1\n16\n16\n0\n323\n0\n\n\ngeometry\n0\n1\n642\n75093\n0\n323\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nFMEL_UPD_D\n0\n1\n2014-12-05\n2014-12-05\n2014-12-05\n1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nOBJECTID\n0\n1\n162.00\n93.39\n1.00\n81.50\n162.00\n242.50\n323.00\n▇▇▇▇▇\n\n\nSUBZONE_NO\n0\n1\n4.63\n3.23\n1.00\n2.00\n4.00\n6.50\n17.00\n▇▃▂▁▁\n\n\nX_ADDR\n0\n1\n27257.42\n7960.90\n5092.89\n21863.96\n28465.40\n31673.72\n50424.79\n▁▃▇▃▁\n\n\nY_ADDR\n0\n1\n36106.43\n5664.60\n19579.07\n31776.14\n35112.62\n39868.91\n49552.79\n▁▅▇▅▂\n\n\nSHAPE_Leng\n0\n1\n6524.39\n6995.82\n871.55\n3709.64\n5211.87\n6942.61\n68083.94\n▇▁▁▁▁\n\n\nSHAPE_Area\n0\n1\n2420881.68\n6566826.26\n39437.94\n628260.89\n1229894.42\n2106482.99\n69748298.79\n▇▁▁▁▁\n\n\n\n\n\n\n\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nskim(popdata)\n\n\nData summary\n\n\nName\npopdata\n\n\nNumber of rows\n984656\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nPA\n0\n1\n4\n23\n0\n55\n0\n\n\nSZ\n0\n1\n4\n29\n0\n335\n0\n\n\nAG\n0\n1\n6\n11\n0\n19\n0\n\n\nSex\n0\n1\n5\n7\n0\n2\n0\n\n\nTOD\n0\n1\n6\n39\n0\n8\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPop\n0\n1\n39.86\n132.25\n0\n0\n0\n10\n2860\n▇▁▁▁▁\n\n\nTime\n0\n1\n2015.51\n2.88\n2011\n2013\n2016\n2018\n2020\n▇▇▇▇▇\n\n\n\n\n\n\n\n\n\n\n\nOnly selected variables from year 2020 will be used for the study:\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n# Preparing the attribute dataframe\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMICALLY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMICALLY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMICALLY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n\npopdata2020 <- popdata2020 %>%\n  mutate(PA = toupper(PA), \n         SZ = toupper(SZ)) %>%\n  filter(`ECONOMICALLY ACTIVE` > 0)\n\n\n\n\nleft_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 <- left_join(\n  mpsz, \n  popdata2020,\n  by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\n\n\n\nThis creates a quick cartographic standard choropleth map:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\ntmap has highly customizable options, with more control over map aesthetics:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\n    \"DEPENDENCY\", \n    style = \"quantile\", \n    palette = \"Purples\",\n    title = \"Dependency ratio\"\n  ) +\n  tm_layout(\n    main.title = \"Distribution of Dependency Ratio by planning subzone\",\n    main.title.position = \"center\",\n    main.title.size = 1.2,\n    legend.height = 0.45, \n    legend.width = 0.3,\n    frame = FALSE,\n    bg.color = \"#F8F3E6\"\n  ) +\n  tm_borders(alpha = 0.3) +\n  tm_compass(\n    type=\"8star\", \n    size = 1\n  ) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\n    \"Source: Planning Sub-zone boundary from URA\\n and Population data from Department of Statistics DOS\", \n   position = c(\"left\", \"bottom\")\n  )\n\n\n\n\n\n\nUnderstanding distribution of DEPENDENCY values:\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nAdding breaks argument to tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\n    \"DEPENDENCY\",\n    breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n  ) +\n  tm_layout( bg.color = \"#F8F3E6\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          # Use '-' to reverse color\n          palette = \"-Purples\"\n  ) +\n  tm_layout( bg.color = \"#F8F3E6\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Purples\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE,\n             bg.color = \"#F8F3E6\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\ntm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = FALSE,\n            bg.color = \"#F8F3E6\" ) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nNOTE: to reset default map style, use:\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\", \"Purples\") \n  ) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n            bg.color = \"#F8F3E6\",\n            frame = FALSE) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Purples\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20,\n            bg.color = \"#F8F3E6\") +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Purples\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\ntm_shape(\n  # Only plotting dependency for central region\n  mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]\n  )+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Purples\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE,\n            bg.color = \"#F8F3E6\") +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "Links to Tableau Visualisations:\nSuperstore Orders\nExam Data"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "Loading and Installing R Packages\n\npacman::p_load(tidyverse, rstatix, gt, patchwork, webshot2)\n\n\n\nImporting Data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\nVisualising the Normal Distribution\n\nThe plotThe Code\n\n\nQ-Q Plot: quantile-quantile plot determines whether\n\n\n\n\n\n\n\n\n# QQ plots use 'sample' argument instead of 'x' or 'y'\nggplot(exam_data,\n       aes(sample = ENGLISH)) +\n  stat_qq() +\n  stat_qq_line()\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can see that the points on the plot deviate significantly from the straight diagonal line. This is a clear indication that the set of data is not normally distributed.\n\n\n\n\nPatchwork\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\nqq <- ggplot(exam_data,\n        aes(sample = ENGLISH)) +\n        stat_qq() +\n        stat_qq_line()\n\nsw_t <- exam_data %>%\n          shapiro_test(ENGLISH) %>%\n          gt() #< save as gt table (static)\n\n#create a temp folder to save tibble as an image\ntmp <- tempfile(fileext = \".png\")\ngtsave(sw_t, tmp)\n\n# Assign table image to a variable name to call into patchwork\ntable_png <- png::readPNG(tmp,\n                          native = TRUE)\n\nqq + table_png"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "VAST Challenge - MC1\n\nInstalling R Packages\n\njsonlite package is needed to read json files\n\nvisNetwork for visualising networks\n\n\npacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, tidyverse)\n\n\n\nLoading the json Data\n\nMC1 <- jsonlite::fromJSON(\"data/MC1.json\")\n\n\nglimpse(MC1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     : Named list()\n $ nodes     :'data.frame': 3428 obs. of  4 variables:\n  ..$ type   : chr [1:3428] \"company\" \"organization\" \"organization\" \"organization\" ...\n  ..$ dataset: chr [1:3428] \"MC1\" \"MC1\" \"MC1\" \"MC1\" ...\n  ..$ country: chr [1:3428] \"Nalakond\" NA NA NA ...\n  ..$ id     : chr [1:3428] \"Spanish Shrimp  Carriers\" \"12744\" \"143129355\" \"7775\" ...\n $ links     :'data.frame': 11069 obs. of  6 variables:\n  ..$ type   : chr [1:11069] \"ownership\" \"partnership\" \"partnership\" \"ownership\" ...\n  ..$ weight : num [1:11069] 0.9 0.846 0.965 0.964 0.823 ...\n  ..$ dataset: chr [1:11069] \"MC1\" \"MC1\" \"MC1\" \"MC1\" ...\n  ..$ source : chr [1:11069] \"Spanish Shrimp  Carriers\" \"Spanish Shrimp  Carriers\" \"Spanish Shrimp  Carriers\" \"Spanish Shrimp  Carriers\" ...\n  ..$ target : chr [1:11069] \"12744\" \"21323516\" \"290834957\" \"3506021\" ...\n  ..$ key    : int [1:11069] 0 0 0 0 0 0 0 0 0 0 ...\n\n\n\n\nCreate separate tibbles for nodes and edges\n\nMC1_nodes <- as_tibble(MC1$nodes) %>%\n    # Select can be used to reorder dataframe columns\n  select(id, type, country)\n\nMC1_edges <- as_tibble(MC1$links) %>%\n  # Move Source and Target to the front\n  select(source, target, type, weight, key)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "haileycsy",
    "section": "",
    "text": "ISSS608_VAA <- c( \"Data\", \"R\", \"Tableau\", \"Coffee\", \"Tears\", \"StackOverflow\", \"ChatGPT\" )"
  },
  {
    "objectID": "Projects/Superstore_Orders.html",
    "href": "Projects/Superstore_Orders.html",
    "title": "Market Basket Analysis",
    "section": "",
    "text": "Frequent Pattern Mining: Market Basket Analysis\nThis project aims to discover links between items frequently purchased together through analysing transaction data.\nLink to reference article"
  },
  {
    "objectID": "Projects/Superstore_Orders.html#r-packages",
    "href": "Projects/Superstore_Orders.html#r-packages",
    "title": "Market Basket Analysis",
    "section": "1.1: R Packages",
    "text": "1.1: R Packages\n\npacman::p_load(readxl, tidyverse, plyr, dplyr,\n               ggplot2, lubridate,\n               RcolorBrewer,\n               arules, arulesViz)"
  },
  {
    "objectID": "Projects/Superstore_Orders.html#data-loading-and-transformation",
    "href": "Projects/Superstore_Orders.html#data-loading-and-transformation",
    "title": "Market Basket Analysis",
    "section": "1.2: Data Loading and Transformation",
    "text": "1.2: Data Loading and Transformation\nThis Project uses Online Retail dataset from UCI Machine Learning Repository\nThe dataset contains the following attributes:\n\n\nInvoiceNo: Invoice number. Nominal, a 6-digit integral number uniquely assigned to each transaction. If this code starts with letter ‘c’, it indicates a cancellation.\n\nStockCode: Product (item) code. Nominal, a 5-digit integral number uniquely assigned to each distinct product.\n\nDescription: Product (item) name.\n\nQuantity: The quantities of each product (item) per transaction.\n\nInvoiceDate: Invoice Date and time. Numeric, the day and time when each transaction was generated.\n\nUnitPrice: Unit price. Numeric, Product price per unit in sterling.\n\nCustomerID: Customer number. Nominal, a 5-digit integral number uniquely assigned to each customer.\n\nCountry: Country name. Nominal, the name of the country where each customer resides.\n\n\n\norder_data <- read_excel(\"data/Online_Retail.xlsx\")\n\ncomplete.cases(data) returns a logical vector indicating which rows have no missing values. data[,] filters out the rows with missing values:\n\norder_data <- order_data[complete.cases(order_data), ]\nsummary(order_data)\n\n  InvoiceNo          StockCode         Description           Quantity        \n Length:406829      Length:406829      Length:406829      Min.   :-80995.00  \n Class :character   Class :character   Class :character   1st Qu.:     2.00  \n Mode  :character   Mode  :character   Mode  :character   Median :     5.00  \n                                                          Mean   :    12.06  \n                                                          3rd Qu.:    12.00  \n                                                          Max.   : 80995.00  \n  InvoiceDate                       UnitPrice          CustomerID   \n Min.   :2010-12-01 08:26:00.00   Min.   :    0.00   Min.   :12346  \n 1st Qu.:2011-04-06 15:02:00.00   1st Qu.:    1.25   1st Qu.:13953  \n Median :2011-07-31 11:48:00.00   Median :    1.95   Median :15152  \n Mean   :2011-07-10 16:30:57.88   Mean   :    3.46   Mean   :15288  \n 3rd Qu.:2011-10-20 13:06:00.00   3rd Qu.:    3.75   3rd Qu.:16791  \n Max.   :2011-12-09 12:50:00.00   Max.   :38970.00   Max.   :18287  \n   Country         \n Length:406829     \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\n\nmutate() character data types to factor using as.factor()\nConvert InvoiceNo to Numeric\nStore InvoiceDate as date in new variable, ‘TransDate’\nExtract time from InvoiceDate and store in another variable, ‘TransTime’\n\n\norder_data %>%\n  mutate(across(where(is.character), as.factor()))\n\n# A tibble: 406,829 × 8\n   InvoiceNo StockCode Description        Quantity InvoiceDate         UnitPrice\n   <chr>     <chr>     <chr>                 <dbl> <dttm>                  <dbl>\n 1 536365    85123A    WHITE HANGING HEA…        6 2010-12-01 08:26:00      2.55\n 2 536365    71053     WHITE METAL LANTE…        6 2010-12-01 08:26:00      3.39\n 3 536365    84406B    CREAM CUPID HEART…        8 2010-12-01 08:26:00      2.75\n 4 536365    84029G    KNITTED UNION FLA…        6 2010-12-01 08:26:00      3.39\n 5 536365    84029E    RED WOOLLY HOTTIE…        6 2010-12-01 08:26:00      3.39\n 6 536365    22752     SET 7 BABUSHKA NE…        2 2010-12-01 08:26:00      7.65\n 7 536365    21730     GLASS STAR FROSTE…        6 2010-12-01 08:26:00      4.25\n 8 536366    22633     HAND WARMER UNION…        6 2010-12-01 08:28:00      1.85\n 9 536366    22632     HAND WARMER RED P…        6 2010-12-01 08:28:00      1.85\n10 536367    84879     ASSORTED COLOUR B…       32 2010-12-01 08:34:00      1.69\n# ℹ 406,819 more rows\n# ℹ 2 more variables: CustomerID <dbl>, Country <chr>\n\norder_data$InvoiceNo <- as.numeric(order_data$InvoiceNo)\n\nWarning: NAs introduced by coercion\n\norder_data$TransDate <- as.Date(order_data$InvoiceDate)\n\norder_data$TransTime <- format(order_data$InvoiceDate, format = \"%H:%M:%S\")\n\nglimpse(order_data)\n\nRows: 406,829\nColumns: 10\n$ InvoiceNo   <dbl> 536365, 536365, 536365, 536365, 536365, 536365, 536365, 53…\n$ StockCode   <chr> \"85123A\", \"71053\", \"84406B\", \"84029G\", \"84029E\", \"22752\", …\n$ Description <chr> \"WHITE HANGING HEART T-LIGHT HOLDER\", \"WHITE METAL LANTERN…\n$ Quantity    <dbl> 6, 6, 8, 6, 6, 2, 6, 6, 6, 32, 6, 6, 8, 6, 6, 3, 2, 3, 3, …\n$ InvoiceDate <dttm> 2010-12-01 08:26:00, 2010-12-01 08:26:00, 2010-12-01 08:2…\n$ UnitPrice   <dbl> 2.55, 3.39, 2.75, 3.39, 3.39, 7.65, 4.25, 1.85, 1.85, 1.69…\n$ CustomerID  <dbl> 17850, 17850, 17850, 17850, 17850, 17850, 17850, 17850, 17…\n$ Country     <chr> \"United Kingdom\", \"United Kingdom\", \"United Kingdom\", \"Uni…\n$ TransDate   <date> 2010-12-01, 2010-12-01, 2010-12-01, 2010-12-01, 2010-12-0…\n$ TransTime   <chr> \"08:26:00\", \"08:26:00\", \"08:26:00\", \"08:26:00\", \"08:26:00\"…"
  },
  {
    "objectID": "Projects/Superstore_Orders.html#creating-a-basket-and-storing-it-as-transactiondata",
    "href": "Projects/Superstore_Orders.html#creating-a-basket-and-storing-it-as-transactiondata",
    "title": "Market Basket Analysis",
    "section": "1.3: Creating a basket and storing it as transactionData",
    "text": "1.3: Creating a basket and storing it as transactionData\n\ntransactionData <- ddply(order_data, c(\"InvoiceNo\",\"TransDate\"),\n                         function(df1)paste(df1$Description,\n                                            collapse = \",\"))\ntransactionData$InvoiceNo <- NULL\ntransactionData$Date <- NULL\n\ncolnames(transactionData) <- c(\"items\")\n\nwrite.csv(transactionData,\"data/market_basket_transactions.csv\", quote = FALSE, row.names = FALSE)\n\nRead transaction data:\n\ntrans <- read.transactions('data/market_basket_transactions.csv', \n                           format = 'basket', \n                           quote = \"\",\n                           sep=',')\n\nWarning in asMethod(object): removing duplicated items in transactions\n\ndim(trans)\n\n[1] 18839  4231\n\n\ndim(data) shows that there are 18,839 transactions (rows) and 4231 items (columns).\n\nsummary(trans)\n\ntransactions as itemMatrix in sparse format with\n 18839 rows (elements/itemsets/transactions) and\n 4231 columns (items) and a density of 0.005236714 \n\nmost frequent items:\nWHITE HANGING HEART T-LIGHT HOLDER           REGENCY CAKESTAND 3 TIER \n                              2011                               1830 \n           JUMBO BAG RED RETROSPOT                      PARTY BUNTING \n                              1635                               1397 \n     ASSORTED COLOUR BIRD ORNAMENT                            (Other) \n                              1385                             409149 \n\nelement (itemset/transaction) length distribution:\nsizes\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1 1401  734  644  635  667  611  576  589  621  524  551  502  476  521  548 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n 547  469  440  481  424  414  349  337  312  245  267  251  221  265  232  204 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n 173  170  173  149  125  139  110  129  123  115  110   98   92   87   90   82 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n  79   79   80   68   59   65   68   63   49   55   49   47   37   45   35   33 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n  35   32   40   39   38   23   29   32   14   27   32   25   21   19   17   10 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n  17   18   19   16   20   16   11   15   13    9    8   11   15   12   10    5 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   8   10   11    3    7   13    4    9    7    2    3    3    6    4    3    3 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   2    5    4    4    7    5    5    5    5    4    8    5    1    4    5    3 \n 129  131  133  134  135  136  137  138  139  140  141  142  143  144  145  147 \n   4    2    1    4    1    1    3    3    1    1    2    2    2    2    1    5 \n 149  150  151  152  153  156  158  159  160  165  166  168  171  172  178  179 \n   1    1    1    2    1    2    1    1    1    1    1    1    1    2    3    2 \n 181  182  186  188  194  195  197  205  206  209  212  221  231  251  260  264 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 274  284  340  352  357  367  380  388  423  441  443  530  534  548 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    8.00   16.00   22.16   28.00  548.00 \n\nincludes extended item information - examples:\n                      labels\n1                   1 HANGER\n2     10 COLOUR SPACEBOY PEN\n3 12 COLOURED PARTY BALLOONS\n\n\nsummary() data reveals that the 2-itemset size is 1401, the largest amongst all k-itemsets."
  },
  {
    "objectID": "Projects/Superstore_Orders.html#select-only-association-rules-with-confidence-greater-than-0.6-or-60",
    "href": "Projects/Superstore_Orders.html#select-only-association-rules-with-confidence-greater-than-0.6-or-60",
    "title": "Market Basket Analysis",
    "section": "4.1: Select only association rules with confidence greater than 0.6 or 60%",
    "text": "4.1: Select only association rules with confidence greater than 0.6 or 60%\n\nsubRules<-association_rules[quality(association_rules)$confidence > 0.6]\n\nsummary(subRules)\n\nset of 274262 rules\n\nrule length distribution (lhs + rhs):sizes\n    2     3     4     5     6     7     8     9    10 \n  128  8208 24106 57299 85063 66943 27329  4826   360 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.000   5.000   6.000   6.025   7.000  10.000 \n\nsummary of quality measures:\n    support           confidence        coverage             lift        \n Min.   :0.001009   Min.   :0.8000   Min.   :0.001009   Min.   :  7.494  \n 1st Qu.:0.001062   1st Qu.:0.8333   1st Qu.:0.001168   1st Qu.: 16.174  \n Median :0.001115   Median :0.8750   Median :0.001327   Median : 19.893  \n Mean   :0.001288   Mean   :0.8856   Mean   :0.001461   Mean   : 32.820  \n 3rd Qu.:0.001327   3rd Qu.:0.9231   3rd Qu.:0.001539   3rd Qu.: 29.643  \n Max.   :0.025054   Max.   :1.0000   Max.   :0.030893   Max.   :897.095  \n     count       \n Min.   : 19.00  \n 1st Qu.: 20.00  \n Median : 21.00  \n Mean   : 24.26  \n 3rd Qu.: 25.00  \n Max.   :472.00  \n\nmining info:\n  data ntransactions support confidence\n trans         18839   0.001        0.8\n                                                                           call\n apriori(data = trans, parameter = list(supp = 0.001, conf = 0.8, maxlen = 10))\n\n\nInteractive Scatterplot:\n\nplot(subRules, \n     method = \"scatterplot\", \n     measure = c(\"support\", \"confidence\"),\n     shading = \"lift\",\n     max = 100,\n     jitter = 0,\n     engine = \"plotly\")\n\nWarning: Too many rules supplied. Only plotting the best 100 using 'lift'\n(change control parameter max if needed)."
  },
  {
    "objectID": "Projects/Superstore_Orders.html#generating-rules-for-specific-items",
    "href": "Projects/Superstore_Orders.html#generating-rules-for-specific-items",
    "title": "Market Basket Analysis",
    "section": "4.2 Generating rules for specific items",
    "text": "4.2 Generating rules for specific items\nSuppose we would like to find out more about rules regarding most frequent item, “WHITE HANGING HEART T-LIGHT HOLDER”:\n\nrules_frequent_item <- apriori (data=trans, \n                                parameter=list (supp=0.001,conf = 0.6), \n                                appearance = list (default=\"lhs\",rhs=\"WHITE HANGING HEART T-LIGHT HOLDER\"), \n                                control = list (verbose=F))\n\nrules_frequent_item <-sort(rules_frequent_item,\n                               decreasing = TRUE,\n                               by = \"confidence\")\n\n# remove redundant rules that are subsets of larger rules\nsubsetRules <- which(colSums(is.subset(rules_frequent_item, rules_frequent_item)) > 1) \n#length(subsetRules) #> 584\nrules_frequent_item <- rules_frequent_item[-subsetRules]\n\ninspect(sort(rules_frequent_item[1:20], by = \"lift\"))\n\n     lhs                                       rhs                                      support confidence    coverage     lift count\n[1]  {KNITTED UNION FLAG HOT WATER BOTTLE,                                                                                           \n      SET 7 BABUSHKA NESTING BOXES}         => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001220872  1.0000000 0.001220872 9.367976    23\n[2]  {GLASS STAR FROSTED T-LIGHT HOLDER,                                                                                             \n      SET 7 BABUSHKA NESTING BOXES}         => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001220872  0.9583333 0.001273953 8.977644    23\n[3]  {GLASS STAR FROSTED T-LIGHT HOLDER,                                                                                             \n      WHITE METAL LANTERN}                  => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001114709  0.9545455 0.001167790 8.942159    21\n[4]  {GLASS STAR FROSTED T-LIGHT HOLDER,                                                                                             \n      KNITTED UNION FLAG HOT WATER BOTTLE}  => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001114709  0.9545455 0.001167790 8.942159    21\n[5]  {GLASS STAR FROSTED T-LIGHT HOLDER,                                                                                             \n      RED WOOLLY HOTTIE WHITE HEART.}       => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001061627  0.9090909 0.001167790 8.516342    20\n[6]  {SET 7 BABUSHKA NESTING BOXES,                                                                                                  \n      WHITE METAL LANTERN}                  => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001061627  0.9090909 0.001167790 8.516342    20\n[7]  {KNITTED UNION FLAG HOT WATER BOTTLE,                                                                                           \n      WHITE METAL LANTERN}                  => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001008546  0.9047619 0.001114709 8.475788    19\n[8]  {GLASS STAR FROSTED T-LIGHT HOLDER,                                                                                             \n      WOOD 2 DRAWER CABINET WHITE FINISH}   => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001061627  0.8333333 0.001273953 7.806647    20\n[9]  {CREAM CUPID HEARTS COAT HANGER,                                                                                                \n      KNITTED UNION FLAG HOT WATER BOTTLE}  => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001008546  0.8260870 0.001220872 7.738763    19\n[10] {PACK OF 60 DINOSAUR CAKE CASES,                                                                                                \n      POPCORN HOLDER,                                                                                                                \n      SET OF 4 PANTRY JELLY MOULDS}         => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001008546  0.8260870 0.001220872 7.738763    19\n[11] {CREAM CUPID HEARTS COAT HANGER,                                                                                                \n      SET 7 BABUSHKA NESTING BOXES}         => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001061627  0.8000000 0.001327034 7.494381    20\n[12] {SET 7 BABUSHKA NESTING BOXES,                                                                                                  \n      WOOD 2 DRAWER CABINET WHITE FINISH}   => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001061627  0.8000000 0.001327034 7.494381    20\n[13] {HEART OF WICKER LARGE,                                                                                                         \n      HOME BUILDING BLOCK WORD,                                                                                                      \n      NATURAL SLATE HEART CHALKBOARD}       => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001061627  0.8000000 0.001327034 7.494381    20\n[14] {VINTAGE BILLBOARD LOVE/HATE MUG,                                                                                               \n      WOOD 2 DRAWER CABINET WHITE FINISH}   => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001008546  0.7916667 0.001273953 7.416314    19\n[15] {RED WOOLLY HOTTIE WHITE HEART.,                                                                                                \n      WHITE METAL LANTERN}                  => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001008546  0.7916667 0.001273953 7.416314    19\n[16] {SAVE THE PLANET MUG,                                                                                                           \n      SET 7 BABUSHKA NESTING BOXES}         => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001008546  0.7916667 0.001273953 7.416314    19\n[17] {CREAM CUPID HEARTS COAT HANGER,                                                                                                \n      WHITE METAL LANTERN}                  => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001167790  0.7857143 0.001486278 7.360553    22\n[18] {SET 7 BABUSHKA NESTING BOXES,                                                                                                  \n      WOODEN PICTURE FRAME WHITE FINISH}    => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001167790  0.7857143 0.001486278 7.360553    22\n[19] {RED WOOLLY HOTTIE WHITE HEART.,                                                                                                \n      SET 7 BABUSHKA NESTING BOXES}         => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001327034  0.7812500 0.001698604 7.318731    25\n[20] {GLASS STAR FROSTED T-LIGHT HOLDER,                                                                                             \n      WOODEN FRAME ANTIQUE WHITE}           => {WHITE HANGING HEART T-LIGHT HOLDER} 0.001061627  0.7692308 0.001380116 7.206135    20\n\n\nPlot top 10 rules for item by confidence:\n\nrules_frequent_item <-sort(rules_frequent_item,\n                          decreasing = TRUE,\n                          by = \"confidence\")\n\ntop10_rules <- rules_frequent_item[1:10]\n\nplot(top10_rules,\n     method = \"graph\",\n     engine = \"htmlwidget\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Exploring Population Statistics of the City of Engagement \nDesign a user-friendly and interactive solution that helps city managers and planners to explore complex population data in an engaging way and reveal hidden patterns. This project aims to reveal the demographic and financial characteristics of the City of Engagement, using appropriate static and interactive statistical graphics methods in R."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#installing-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#installing-r-packages",
    "title": "Take-home Exercise 1",
    "section": "1.1: Installing R packages",
    "text": "1.1: Installing R packages\npacman::p_load() function from the pacman package is used in the following code chunk to install and call the libraries of multiple R packages:\n\npacman::p_load(tidyverse, ggstatsplot, ggridges, plotly, \n               patchwork, scales, paletteer, viridis,\n               ggiraph, ggiraphExtra, gganimate, ggmosaic, \n               gifski, ggpubr, ggdist, ggrain, GGally,\n               qqplotr, gt, ggpmisc, webr,\n               transformr, Hmisc, vcd, knitr, \n               kableExtra, DT, rstatix, urbnthemes)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-sets",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-sets",
    "title": "Take-home Exercise 1",
    "section": "1.2: Data Sets",
    "text": "1.2: Data Sets\nTwo datasets are provided for the task: Participants.csv and FinancialJournal.csv.\nThese are uploaded as demo_data and financial_data respectively."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-demo_data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-demo_data",
    "title": "Take-home Exercise 1",
    "section": "1.2.1: Summary Statistics of demo_data",
    "text": "1.2.1: Summary Statistics of demo_data\n\n\ncode block\ndemo_data <- read_csv(\"data/Participants.csv\")\n\n\n\nFirst 5 RowsDataset StructureData Health\n\n\nDisplaying first 5 rows using head():\n\nhead(demo_data,5) %>%\n  kbl() %>%\n  kable_material()\n\n\n\n \n  \n    participantId \n    householdSize \n    haveKids \n    age \n    educationLevel \n    interestGroup \n    joviality \n  \n \n\n  \n    0 \n    3 \n    TRUE \n    36 \n    HighSchoolOrCollege \n    H \n    0.0016267 \n  \n  \n    1 \n    3 \n    TRUE \n    25 \n    HighSchoolOrCollege \n    B \n    0.3280865 \n  \n  \n    2 \n    3 \n    TRUE \n    35 \n    HighSchoolOrCollege \n    A \n    0.3934696 \n  \n  \n    3 \n    3 \n    TRUE \n    21 \n    HighSchoolOrCollege \n    I \n    0.1380634 \n  \n  \n    4 \n    3 \n    TRUE \n    43 \n    Bachelors \n    H \n    0.8573967 \n  \n\n\n\n\n\n\n\nChecking the structure of demo_data using str():\n\nstr(demo_data)\n\nspc_tbl_ [1,011 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ participantId : num [1:1011] 0 1 2 3 4 5 6 7 8 9 ...\n $ householdSize : num [1:1011] 3 3 3 3 3 3 3 3 3 3 ...\n $ haveKids      : logi [1:1011] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ age           : num [1:1011] 36 25 35 21 43 32 26 27 20 35 ...\n $ educationLevel: chr [1:1011] \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" ...\n $ interestGroup : chr [1:1011] \"H\" \"B\" \"A\" \"I\" ...\n $ joviality     : num [1:1011] 0.00163 0.32809 0.39347 0.13806 0.8574 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   participantId = col_double(),\n  ..   householdSize = col_double(),\n  ..   haveKids = col_logical(),\n  ..   age = col_double(),\n  ..   educationLevel = col_character(),\n  ..   interestGroup = col_character(),\n  ..   joviality = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nThere are a total of 1011 rows and 7 variables. The output reveals that variables participantId and householdSize have been read as numeric, continuous data types, but should be analysed as nominal data instead.\n\n\nChecking for duplicates:\n\ndemo_data[duplicated(demo_data),]\n\n# A tibble: 0 × 7\n# ℹ 7 variables: participantId <dbl>, householdSize <dbl>, haveKids <lgl>,\n#   age <dbl>, educationLevel <chr>, interestGroup <chr>, joviality <dbl>\n\n\nFrom the output, there are no duplicated rows found in demo_data.\nChecking for missing values:\n\nsum(is.na(demo_data))\n\n[1] 0\n\n\nFrom the output, there are zero missing values across all columns in demo_data.\n\n\n\n   \n Changing Data Types:\n\nparticipantId is classified as <dbl>, numerical continuous data, instead of nominal. This is cast as <chr> class using as.character()\neducationLevel is classified as <chr> categorical data, and consists of four levels, with inherent hierarchy. This variable is cast as factor type on an ordinal scale using the ordered() function\nhouseholdSize and interestGroup are classified as <dbl> and <chr> respectively, but are categorical in nature with different levels. These variables are cast as factors using as.factor()\n\n\n\ncode block\ndemo_data_new <- demo_data %>%\n  # Changing participantId to character \n  mutate(participantId = as.character(demo_data$participantId),\n\n  # Updating educationLevel with ordinal scale\n  educationLevel = ordered(demo_data$educationLevel, levels = c(\"Graduate\", \"Bachelors\", \"HighSchoolOrCollege\", \"Low\")),\n\n  # Casting householdSize and interestGroup as factors\n  householdSize = as.factor(demo_data$householdSize),\n  interestGroup = as.factor(demo_data$interestGroup)\n  )\n\n\n\n\nVisual Summary of demo_data_new:\n\n\ncode block\n# Setting default theme for all plots\nset_urbn_defaults(\"print\", base_family = \"Lato\")\n\n# Assigning each plot to a variable name to patch together\ndemo_p1 <- ggplot(demo_data_new, aes(x = householdSize)) +\n  geom_bar() +\n  labs(\n    title = \"Household Size\",\n    x = NULL,\n    y = NULL\n  ) +\n  # Set limit to ensure that geom_text annotation is not cut off\n  ylim(0,420\n  ) + \n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -1) #< Set count annotations above bar\n\ndemo_p2 <- ggplot(demo_data_new, aes(x = haveKids)) +\n  geom_bar() +\n  labs(\n    title = \"Households with Children\",\n    x = NULL,\n    y = NULL\n  ) +\n  ylim(0,800\n  ) +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -1)\n\ndemo_p3 <- ggplot(demo_data_new, aes(x = age)) +\n  geom_dotplot(\n    binwidth = 1,\n    stackratio = 1.2,\n    stackdir = \"up\",\n    fill = \"#1696d2\", #< Fill colour same as bar charts\n    color = NA,\n    dotsize = 0.6\n  ) +\n  labs(\n    title = \"Age\",\n    x = NULL,\n    y = NULL)\n\ndemo_p4 <- ggplot(demo_data_new, aes(x = educationLevel)) +\n  geom_bar() +\n  labs(\n    title = \"Highest Education\",\n    x = NULL,\n    y = NULL\n  ) +\n  ylim(0,600\n  ) +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -1)\n\ndemo_p5 <- ggplot(demo_data_new, aes(x = interestGroup)) +\n  geom_bar() +\n  labs(\n    title = \"Interest Group\",\n    x = NULL,\n    y = NULL\n  ) +\n  ylim(0,150\n  ) +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -1)\n\ndemo_jov <- ggplot(\n    demo_data_new, \n    aes(x = joviality)\n  ) +\n  geom_dotplot(\n    stackratio = 1.2,\n    stackdir = \"up\",\n    fill = \"#1696d2\", #< Fill colour same as bar charts\n    color = NA,\n    dotsize = .3\n  ) +\n  labs(\n    title = \"Joviality\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme(\n    axis.text.y = element_blank(), \n    panel.grid.major = element_blank(), \n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\ndemo_jov\n\n\n\n\n\n\n\ncode block\n# Patch all other summary plots together\nhouse_patch <- demo_p1 + demo_p2 #< patch together first so that age plot takes up larger width\ndemo_patch <- ((demo_p3 + house_patch) / (demo_p5 + demo_p4)\n              ) +\n              plot_layout(heights = c(3,2.5)\n              ) + \n              plot_annotation(\n                title = \"Summary Statistics of Demographic Data\")\n\ndemo_patch & \n  theme(\n  # Remove y axis since annotations already show count\n  axis.text.y = element_blank(), \n  # Remove lines in panel background for cleaner design\n  panel.grid.major = element_blank(), \n  # Same colour as webpage\n  plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  ) \n\n\n\n\n\n\nInitial Insights from Summary Statistics\n\nThere seems to be a fairly even distribution of participants across householdSize and interestGroup. However, there is are uneven disributions across joviality score and age, with multimodal peaks in the dotplots.\nThere are twice as many households that have children than those without.\nApproximately half of the participants have attained the highest education at high school or college level.\n\nThe distributions and correlations of these variables will be investigated further in subsequent sections, after appropriate data wrangling techniques have been applied."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-financial_data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-financial_data",
    "title": "Take-home Exercise 1",
    "section": "1.2.2: Summary Statistics of financial_data",
    "text": "1.2.2: Summary Statistics of financial_data\n\n\ncode block\nfinancial_data <- read_csv(\"data/FinancialJournal.csv\")\n\n\n\nAt a GlimpseData Health\n\n\n\nglimpse(financial_data)\n\nRows: 1,513,636\nColumns: 4\n$ participantId <dbl> 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,…\n$ timestamp     <dttm> 2022-03-01, 2022-03-01, 2022-03-01, 2022-03-01, 2022-03…\n$ category      <chr> \"Wage\", \"Shelter\", \"Education\", \"Wage\", \"Shelter\", \"Educ…\n$ amount        <dbl> 2472.50756, -554.98862, -38.00538, 2046.56221, -554.9886…\n\n\nThe dataset captures specific financial transactions by participants, with a single transaction recorded in each row. Participants may have multiple transactions over time.\n\n\nChecking for duplicates:\n\nfinancial_data[duplicated(financial_data),]\n\n# A tibble: 1,113 × 4\n   participantId timestamp           category   amount\n           <dbl> <dttm>              <chr>       <dbl>\n 1             0 2022-03-01 00:00:00 Shelter    -555. \n 2             0 2022-03-01 00:00:00 Education   -38.0\n 3             1 2022-03-01 00:00:00 Shelter    -555. \n 4             1 2022-03-01 00:00:00 Education   -38.0\n 5             2 2022-03-01 00:00:00 Shelter    -557. \n 6             2 2022-03-01 00:00:00 Education   -12.8\n 7             3 2022-03-01 00:00:00 Shelter    -555. \n 8             3 2022-03-01 00:00:00 Education   -38.0\n 9             4 2022-03-01 00:00:00 Shelter   -1556. \n10             4 2022-03-01 00:00:00 Education   -12.8\n# ℹ 1,103 more rows\n\n\nFrom the output, there are 1113 duplicated rows found in financial_data.\nChecking for missing values:\n\nsum(is.na(financial_data))\n\n[1] 0\n\n\nFrom the output, there are zero missing values across all columns in financial_data.\n\n\n\n\n\n Data Quality Issues:\n\nduplicated() revealed that there were 1113 duplicated entries in the financial data. These are removed using dplyr::unique() function\nparticipantId is classified as <dbl>, numerical continuous data, instead of nominal. This is cast as <chr> class using as.character()\ncategory is classified as <chr>, but is categorical in nature with six different levels. This is cast as factor type using as.factor()\ntimestamp contains both Date and Time, which is not suitable for analysis. Year-Month is extracted and saved into a separate variable, transDate, and cast as factor (categorical).\namount is reflected as a numeric value with 3 decimal places. This is rounded to 2 d.p. to reflect standard currency structure while maintaing accuracy.\n\nData format is unsuitable for analysis: pivot table with individual columns per category would give a better monthly summary of financial transactions by participant.\n\n\nAltering table format of financial_data:\n\nStep 1: Changing data types:Step 2: Create pivot table\n\n\n\n# Ensuring that duplicates are removed\nfinancial_data <- unique(financial_data)\n\n\nfinancial_data_new <- financial_data %>%\n  # Changing participantId to character \n  mutate(participantId = as.character(financial_data$participantId),\n\n  # Casting category as factor\n  category = as.factor(financial_data$category),\n\n  # Extracting Month-Year from timestamp and casting as factor\n  transDate = as.factor(format(parse_date_time(timestamp, \"YmdHMS\"), \"%Y-%m\")),\n  \n  # Rounding amount to 2 decimal places\n  amount = as.integer(round(amount, digits = 2))) %>%\n  \n  # remove timestamp column\n  select(-timestamp) %>%\n  \n  # Sort by Participant ID\n  arrange(participantId)\n\n\n\n\nfinancial_pivot <- financial_data_new %>%\n                    # Define row groups \n                    group_by(participantId, transDate) %>%\n  \n                    # Sum total amount per category for each month\n                    summarise(\n                      Education = sum(amount[category == \"Education\"]),\n                      Food = sum(amount[category == \"Food\"]),\n                      Recreation = sum(amount[category == \"Recreation\"]),\n                      Shelter = sum(amount[category == \"Shelter\"]),\n                      RentAdj = sum(amount[category == \"RentAdjustment\"]),\n                      Wage = sum(amount[category == \"Wage\"])) %>%\n                    ungroup()\n\n\n\n\n\n\ncode block\nhead(financial_pivot,5) %>%\n  kbl() %>%\n  kable_styling(\n    full_width = F, \n    bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n\n \n  \n    participantId \n    transDate \n    Education \n    Food \n    Recreation \n    Shelter \n    RentAdj \n    Wage \n  \n \n\n  \n    0 \n    2022-03 \n    -38 \n    -259 \n    -335 \n    -554 \n    0 \n    11902 \n  \n  \n    0 \n    2022-04 \n    -38 \n    -255 \n    -213 \n    -554 \n    0 \n    8610 \n  \n  \n    0 \n    2022-05 \n    -38 \n    -257 \n    -368 \n    -554 \n    0 \n    9020 \n  \n  \n    0 \n    2022-06 \n    -38 \n    -249 \n    -446 \n    -554 \n    0 \n    9020 \n  \n  \n    0 \n    2022-07 \n    -38 \n    -262 \n    -1030 \n    -554 \n    0 \n    8610 \n  \n\n\n\n\n\n   \nVisualising Expenditure Trends over Data Time Range:\n\nDesign Considerations\n\nTo visualise the different expenditure trends over time, a line plot was chosen\n\nSeparate lines were used for each expenditure category in order to show trend and amount differences\n\ngeom_point() dots were added to the trend lines to identify points in time, to visualise month-on-month changes\n\n\n Average expenditure per category is calculated from financial_pivot:\n\nUse group_by() to condense transactions by year-month\npivot_longer() to transpose categories back into a single column with factor levels, such that each expenditure category can be represented by a different line.\n\n\n\ncode block\n# Calculating mean amount per category\nmonthly_mean <- financial_pivot %>%\n    group_by(transDate) %>%\n    summarise(\n      num_people = n_distinct(participantId),\n      Education = abs(round((sum(Education)/num_people),2)),\n      Food = abs(round((sum(Food)/num_people),2)),\n      Recreation = abs(round((sum(Recreation)/num_people),2)),\n      Shelter = abs(round((sum(Shelter)/num_people),2)),\n      RentAdj = round((sum(RentAdj)/num_people),2),\n      Wage = round((sum(Wage)/num_people),2)) %>% \n  # change transDate to ymd format to arrange by date in lineplot\n    mutate(\n      transDate = ymd(paste(transDate, \"01\", sep = \"-\"))) %>% \n    ungroup()\n\nmonthly_mean %>%\n  kbl() %>%\n  kable_styling(full_width = F, bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n\n \n  \n    transDate \n    num_people \n    Education \n    Food \n    Recreation \n    Shelter \n    RentAdj \n    Wage \n  \n \n\n  \n    2022-03-01 \n    1011 \n    14.12 \n    307.30 \n    619.17 \n    624.27 \n    52.85 \n    6314.80 \n  \n  \n    2022-04-01 \n    880 \n    12.90 \n    328.17 \n    426.91 \n    635.77 \n    1.62 \n    3923.61 \n  \n  \n    2022-05-01 \n    880 \n    12.90 \n    338.31 \n    368.68 \n    634.11 \n    0.00 \n    4098.12 \n  \n  \n    2022-06-01 \n    880 \n    12.90 \n    327.00 \n    344.98 \n    634.11 \n    0.00 \n    4082.08 \n  \n  \n    2022-07-01 \n    880 \n    12.90 \n    338.49 \n    361.26 \n    634.11 \n    0.00 \n    3942.84 \n  \n  \n    2022-08-01 \n    880 \n    12.90 \n    337.62 \n    336.34 \n    634.11 \n    0.00 \n    4257.32 \n  \n  \n    2022-09-01 \n    880 \n    12.90 \n    326.89 \n    330.82 \n    634.11 \n    0.00 \n    4083.92 \n  \n  \n    2022-10-01 \n    880 \n    12.90 \n    338.35 \n    358.11 \n    634.11 \n    0.00 \n    3940.10 \n  \n  \n    2022-11-01 \n    880 \n    12.90 \n    326.85 \n    315.82 \n    634.11 \n    0.00 \n    4080.11 \n  \n  \n    2022-12-01 \n    880 \n    12.90 \n    337.89 \n    347.01 \n    634.11 \n    0.00 \n    4103.61 \n  \n  \n    2023-01-01 \n    880 \n    12.90 \n    338.06 \n    341.48 \n    634.11 \n    0.00 \n    4098.06 \n  \n  \n    2023-02-01 \n    880 \n    12.90 \n    304.88 \n    297.04 \n    634.11 \n    0.00 \n    3724.34 \n  \n\n\n\n\n\nFrom the table output, there were transactions from all 1011 participants in Mar-2022, but only 880 from Apr-2022 onwards. This suggests that the transactions from those 31 participants could have been skewing the data. financial data from 2022-03 will thus be excluded from datasets for further analysis using filter() function.\n\n\ncode block\n# Removing records from transDate \nfinancial_data_new <- financial_data_new %>%\n                        filter(transDate != \"2022-03\")\n\nfinancial_pivot <- financial_pivot %>%\n                    filter(transDate != \"2022-03\")\n\nmonthly_mean <- monthly_mean %>%\n                  filter(transDate != \"2022-03-01\")\n\n\nVisual Summary of financial data: monthly_mean:\n\n\ncode block\n# Set font options\nt <- list(\n  family = \"Lato, sans-serif\",\n  size = 16,\n  color = \"#000000\")\n\nt2 <- list(\n  family = \"Lato, sans-serif\",\n  size = 12,\n  color = \"#000000\")\n\nt3 <- list(\n  family = \"Lato, sans-serif\",\n  size = 9,\n  color = \"#000000\")\n\n# Build plot\n\nfrfig <- plot_ly(\n    monthly_mean, \n    x = ~transDate\n  ) %>%\n  # Add Recreation TrendLine\n  add_trace(\n    y = ~Recreation, \n    type = 'scatter', \n    mode = 'lines+markers', \n    name = 'Recreation',\n    # Specify Line and dot colors to match\n    line = list(color = 'rgb(0,0,0)', width = 2),\n    marker = list(color = 'rgb(0,0,0)')\n  ) %>%\n  # Add Food TrendLine\n  add_trace(\n    y = ~Food, \n    type = 'scatter', \n    mode = 'lines+markers', \n    name = 'Food',\n    line = list(color = 'rgb(253,191,17)', width = 2)\n  )%>%\n  layout(\n    title = \"Decreasing Trend in Monthly Expenditure on Recreation\", \n    # Remove x-axis title and ensure all months are shown in axis\n    xaxis = list(title = '',\n                 tickfont = t3,\n                 nticks = 20),\n    # Remove amount \n    yaxis = list(title = 'Amount Spent ($)',\n                 font = t2,\n                 showticklabels=FALSE), \n    legend = list(title = list(text = \"<b> Category </b>\",\n                               font = t)),\n              list(text = list(font = t2)),\n    font = t, \n    # Add top margin to prevent title from being truncated\n    margin = list(t = 80),\n    # Specify plot and background colors\n    plot_bgcolor = \"#F8F3E6\",\n    paper_bgcolor = \"#F8F3E6\"\n  ) \n\nfrfig\n\n\n\n\n\n\n\n\ncode block\n# Specify annotation\nnote1 <- list(\n  xref = 'paper',\n  yref = 'y',\n  x = 0.25,\n  y = 300,\n  xanchor = 'left',\n  yanchor = 'middle',\n  text = \"Large gap in monthly expenditure on both categories\",\n  font = list(size = 13,\n              color = 'rgb(50,50,50)'),\n  showarrow = FALSE)\n\n# Plot Rent and Education Expenditures\nrefig <- plot_ly(\n    monthly_mean, \n    x = ~transDate\n  ) %>%\n  # Add Rent TrendLine\n  add_trace(\n    y = ~Shelter, \n    type = 'scatter', \n    mode = 'lines+markers', \n    name = 'Recreation',\n    # Specify Line and dot colors to match\n    line = list(color = 'rgb(226,85,82)', width = 2),\n    marker = list(color = 'rgb(226,85,82)')\n  ) %>%\n  add_trace(\n    y = ~Education, \n    type = 'scatter', \n    mode = 'lines+markers', \n    name = 'Food',\n    # Specify Line and dot colors to match\n    line = list(color = '   rgb(22,150,210)', width = 2),\n    marker = list(color = ' rgb(22,150,210)')\n  )%>%\n  layout(\n    title = \"Little Variation in Monthly Expenditure on Education and Shelter\", \n    xaxis = list(title = '',\n                 tickfont = t3,\n                 nticks = 20),\n    yaxis = list(title = 'Amount Spent ($)',\n                 font = t2,\n                 showticklabels=FALSE), \n    legend = list(title = list(text = \"<b> Category </b>\",\n                               font = t)),\n              list(text = list(font = t2)),\n    font = t, \n    # Add top margin to prevent title from being truncated\n    margin = list(t = 80),\n    # Add annotation to plot\n    annotations = note1,\n    plot_bgcolor = \"#F8F3E6\",\n    paper_bgcolor = \"#F8F3E6\"\n  ) \n\nrefig\n\n\n\n\n\n\n\nInitial Insights from Line Chart and Table\n\nExpenditure on education is the lowest, and has remained constant > probably refers to school fees, which is normally a fixed monthly amount\nExpenditure on recreation and food shows monthly variation, and have decreased from Apr 2022 to Feb 2023\nExpenditure on Shelter is significantly higher that other categories, and also remains constant > probably refers to rent"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#computing-aggregate-transaction-variables-based-on-financial_data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#computing-aggregate-transaction-variables-based-on-financial_data",
    "title": "Take-home Exercise 1",
    "section": "2.1: Computing Aggregate Transaction Variables based on financial_data",
    "text": "2.1: Computing Aggregate Transaction Variables based on financial_data\n\nVisual Considerations\n\nRaincloud plots are used to capture the density and range of values by expense, with dotplots beneath the half-density plots revealing patterns in consistency\n\nSeparate plots were coded for -ve and +ve transactions, with Education, Food & Recreation and Shelter separated as well. This is due to the wide scale of y-axis values, which made the narrower density plots too condensed for the distribution to be viewed in full.\n\npatchwork package was used to group the plots together in a single figure, using plot_layout(heights) to configure height ratio of the overall patched plots\n\n\n\n\ncode block\n# Filtering Food and Recreation from data\nefr_range <- financial_data_new %>%\n    filter(\n      category %in% c(\"Education\", \"Food\", \"Recreation\")) %>%\n  # Getting Average amount per participant\n    group_by(\n      participantId, category) %>%\n    summarise(\n      num = n(),\n      avgamount = round((sum(amount)/num),2)) %>%\n  ungroup()\n\n# Food and Recreation Plot\nefr <- ggplot(efr_range, \n       aes(1, \n           y = avgamount, \n           fill = category,\n          color = category)\n  ) +\n  # Raincloud Plot\n  geom_rain(\n    alpha = .7,\n    # Adding outline to boxplot\n    boxplot.args = list(\n              color = \"grey20\", outlier.shape = NA),\n    violin.args = list(alpha = .7)\n  ) +\n  # Specifying colors, to match previous graph\n  scale_fill_manual(\n    values = c(\"#1696d2\",\"#fdbf11\",\"grey10\")\n  ) +\n  scale_color_manual(\n    values = c(\"#1696d2\",\"#fdbf11\",\"grey10\")\n  ) +\n  scale_y_continuous(\n    breaks = scales::pretty_breaks(n = 5),\n    labels = scales::dollar\n  ) +\n  labs(\n    title = \"I. Dot Patterns Reveal Consistent Amounts Spent on Education,\\nDensity Shapes Reveal Differences in Expenditure Range\"\n  ) +\n  theme(\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  ) + \n  coord_flip() \n\n# Filtering Education amounts and computing average\nsh_range <- financial_data_new %>%\n    filter(\n      category %in% c(\"Shelter\")) %>%\n    group_by(\n      participantId, category) %>%\n    summarise(\n      num = n(),\n      avgamount = round((sum(amount)/num),2)) %>%\n  ungroup()\n\n# Education plot\nsh <- ggplot(sh_range, \n       aes(1, \n           y = avgamount, \n           fill = category,\n           color = category)\n  ) +\n  geom_rain(\n    alpha = .7,\n    boxplot.args = list(\n              color = \"grey20\", outlier.shape = NA),\n    violin.args = list(alpha = .7)\n  ) +\n  scale_y_continuous(\n    breaks = scales::pretty_breaks(n = 5),\n    labels = scales::dollar\n  ) +\n  scale_fill_manual(\n    values = \"salmon\"\n  ) +\n  scale_color_manual(\n    values = \"salmon\"\n  ) +\n  labs(\n    title = \"II. Widest Range in Expenditure on Rent\",\n  ) + \n  theme(\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  ) + \n  coord_flip() \n\n# Filtering out +ve transactions\ninc_range <- financial_data_new %>%\n                filter(category %in% c(\"Wage\")) %>%\n      group_by(\n      participantId, category) %>%\n    summarise(\n      num = n(),\n      avgamount = round((sum(amount)/num),2)) %>%\n  ungroup()\n\ninc <- ggplot(inc_range, \n       aes(1, \n           y = avgamount, \n           fill = category,\n          color = category)\n  ) +\n  geom_rain(\n    adjust = 1/6,\n    alpha = .7,\n    boxplot.args = list(\n              color = \"grey20\", outlier.shape = NA),\n    violin.args = list(alpha = .7)\n  ) +\n  # Specifying colors\n  scale_fill_manual(\n    values = c(\"#98cf90\",\"salmon\")\n  ) +\n  scale_color_manual(\n    values = c(\"#98cf90\",\"salmon\")\n  ) +\n  scale_y_continuous(\n    breaks = scales::pretty_breaks(n = 5),\n    labels = scales::dollar\n  ) +\n  labs(\n    title = \"III. Right-skewed Distribution of Average Income\"\n  ) +\n  theme(\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  ) + \n  coord_flip() \n\n# Patchwork plots\nbottompatch <- sh / inc\nmoneypatch <- (efr / bottompatch\n    ) +\n    plot_layout(\n      heights = c(3,4)\n    ) + \n    plot_annotation(\n      title = \"Variations in Distributions of Average Expenditure and Income:\"\n    )\n\nmoneypatch & theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\n\nInsights from Raincloud Plots\n\nTransactions are either outflows (-ve value) or inflows (+ve value)\nPlot I:\n\nDotplot forms lines in intervals below half-density plot for Education, which show fixed rates of expenditure\nFlat, wider density of Recreation compared to narrow tall peaks in density of Food show that range of values spent on Food is much smaller than on Recreation.\n\nPlots II and III:\n\nWage and Shelter have the widest range of average values for income and expenditure transactions respectively\nMultiple peaks in density of Shelter suggests presence of ‘clusters’ of rental ranges\nPresence of long tail in distribution of Wage suggests a large wage gap across participants\n\nRentAdjustment was only recorded for a single participantId no.497, and was excluded from plots\n\n\n\n\nNew aggregate variables are computed based on this for further analysis:\n\ntotInflow & totOutflow: Sum of cash inflow and outflow per participant\nmonthly_in: Average total cash inflow per month per participant (Income)\nmonthly_out: Average total cash outflow per month per participant (Expenditure)\nmonthlyWage: Average monthly income, per participant\nexpenseRatio: Ratio of outflow (expense) to inflow (income) per participant\nEducation, Food, Recreation, Shelter: Total expenditure by category\n\n\n\ncode block\n# Create new dataframe with transformed variables\nfinancial_agg <- financial_data_new %>%\n                  group_by(participantId) %>% \n                  summarise(numTrans = n_distinct(transDate), #< Count number of distinct months \n                            netAmount = sum(amount), #< Sum net total amount per participantId\n                            monthlyWage = (sum(amount[category == \"Wage\"]))/numTrans, #< Ave monthly income per participantId\n                            \n                            totRentAdj = sum(amount[category == \"RentAdjustment\"]),\n                            \n                            totInflow = sum(amount[category == \"Wage\"]) + \n                                        sum(amount[category == \"RentAdjustment\"]), #< Compute inflow value\n                            totOutflow = sum(abs(amount[category == \"Education\"])) + \n                                         sum(abs(amount[category == \"Food\"])) +\n                                         sum(abs(amount[category == \"Recreation\"])) +\n                                         sum(abs(amount[category== \"Shelter\"])), #< Compute outflow value\n                            expenseRatio = round((totOutflow/totInflow), 2), #< Compute outflow/inflow ratio\n                        #< Monthly Income and Expenditure\n                            monthly_in = round((totInflow/numTrans), 2), \n                            monthly_out = round((totOutflow/numTrans), 2), \n                        #< % of each category contribution to outflow    \n                            Education = sum(abs(amount[category == \"Education\"])), \n                            Food = sum(abs(amount[category == \"Food\"])),\n                            Recreation = sum(abs(amount[category == \"Recreation\"])),\n                            Shelter = sum(abs(amount[category == \"Shelter\"]))\n                            ) %>%\n                  replace(is.na(.),0) %>%\n                  select(-numTrans) %>% #< Drop column numTrans\n                  arrange(as.numeric(participantId)) %>%\n                  ungroup()\n\n\nfinancial_agg:\n\n\ncode block\nhead(financial_agg, 5) %>%\n  kbl() %>%\n  kable_styling(full_width = F, bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n\n \n  \n    participantId \n    netAmount \n    monthlyWage \n    totRentAdj \n    totInflow \n    totOutflow \n    expenseRatio \n    monthly_in \n    monthly_out \n    Education \n    Food \n    Recreation \n    Shelter \n  \n \n\n  \n    0 \n    84404 \n    8870.909 \n    0 \n    97580 \n    13176 \n    0.14 \n    8870.91 \n    1197.82 \n    418 \n    2784 \n    3880 \n    6094 \n  \n  \n    1 \n    71293 \n    7810.727 \n    0 \n    85918 \n    14625 \n    0.17 \n    7810.73 \n    1329.55 \n    418 \n    2746 \n    5367 \n    6094 \n  \n  \n    2 \n    62373 \n    6837.091 \n    0 \n    75208 \n    12835 \n    0.17 \n    6837.09 \n    1166.82 \n    132 \n    3016 \n    3571 \n    6116 \n  \n  \n    3 \n    58979 \n    6599.091 \n    0 \n    72590 \n    13611 \n    0.19 \n    6599.09 \n    1237.36 \n    418 \n    3008 \n    4091 \n    6094 \n  \n  \n    4 \n    75376 \n    8568.000 \n    0 \n    94248 \n    18872 \n    0.20 \n    8568.00 \n    1715.64 \n    132 \n    2925 \n    4793 \n    11022"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#banding-of-age-and-wage-into-groups",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#banding-of-age-and-wage-into-groups",
    "title": "Take-home Exercise 1",
    "section": "2.2: Banding of Age and Wage into Groups",
    "text": "2.2: Banding of Age and Wage into Groups\nAge\nThe range of participants’ ages is rather wide, spanning from 18-60 years old. There are also multiple peaks in the distribution:\n\n\ncode block\n# Computing min and max age to annotate plot\nmin_age <- min(demo_data_new$age)\nmax_age <- max(demo_data_new$age)\n\ndemo_age <-demo_p3 + \n            annotate(geom = \"text\", x = min_age, y = 0.83,\n            label = paste0(\"Youngest:\\n\", min_age)) + #< add text annotation to show age range\n            annotate(geom = \"text\", x = max_age, y = 0.83,\n            label = paste0(\"Oldest:\\n\", max_age)) +\n            theme(axis.text.y = element_blank(), #< remove unnecessary elements from plot\n            panel.grid.major = element_blank(),\n            plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\ndemo_age\n\n\n\n\n\n\nThese may be grouped together by percentile, and analysed as age groups instead to give a better overview of different demographics. Each band represents sequential 20th percentiles:\n\nLowest 20th Percentile: 18-26\n20-40th Percentile: 27-35\n40-60th Percentile: 36-44\n60-80th Percentile: 45-52\nTop 20th Percentile: 53-60\n\n\n\n\ncode block\n# Function to bin by 20th Percentile\ncutpct <- function(x) {\n  cut(x, breaks=c(quantile(demo_data_new$age, \n                           probs = seq(0, 1, by = 0.20))), \n      labels=c(\"18-26\",\"27-35\",\"36-44\",\"45-52\",\"53-60\"), \n      include.lowest=TRUE)\n}\n\n# Applying to new column, grouping Age into Age Groups\ndemo_data_new$ageGroup <- sapply(demo_data_new$age, cutpct)\n\n\n# Barchart of ageGroup\ndemo_agegrp<- ggplot(\n  demo_data_new, \n  aes(x = ageGroup)\n  ) +\n  geom_bar() +\n  labs(\n    # Linebreak added to title so it does not get truncated\n    title = \"Participants are evenly\\ndistributed across Age Groups\", \n    x = \"Age Group\",\n    y = NULL\n  ) +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -1\n  ) +\n  # Same y-axis limits for both age and wage plots to standardise\n  ylim(0,250) + \n  theme(\n    text = element_text(size = 12),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n\nWage\nFrom the boxplot diagram in section 2.2, there is a large variation in wage range, and a segregation between lower and higher wage bands.\n\n\ncode block\ndescribe(financial_agg$monthlyWage)\n\n\nfinancial_agg$monthlyWage \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     880        0      412        1     4030     2249     1731     1924 \n     .25      .50      .75      .90      .95 \n    2467     3429     4803     6675     8486 \n\nlowest :  1709.273  1709.364  1709.455  1710.182  1719.636\nhighest: 14085.273 14344.636 14496.364 17287.455 17309.091\n\n\n\nBased on the Mean and distribution of values across percentiles as shown above, participants are banded according to annual income:\n\nBottom 20th Percentile: Low\n20-40th Percentile: Mid-low\n40-60th Percentile: Mid\n60-80th Percentile: Mid-high\nTop 20th Percentile: High\n\n\n\n\ncode block\n# Function to bin by 20th Percentile\ncutwpct <- function(x) {\n  cut(x, breaks=c(quantile(financial_agg$monthlyWage, \n                           probs = seq(0, 1, by = 0.20))), \n      labels=c(\"Low\",\"Mid-low\",\"Mid\",\"Mid-high\",\"High\"), \n      include.lowest=TRUE)\n}\n\n# Applying to new column, grouping Age into Age Groups\nfinancial_agg$incomeGroup <- sapply(financial_agg$monthlyWage, cutwpct)\n\n# Barchart of incomeGroup\nfin_incgrp<- ggplot(financial_agg, aes(x = incomeGroup)) +\n                geom_bar() +\n                labs(title = \"Number of Citizens by Income Group\", #< Linebreak added to title so it does not get truncated\n                    x = \"Income Group\",\n                    y = NULL) +\n                geom_text(stat = \"count\",\n                          aes(label = after_stat(count)),\n                          vjust = -1) +\n                ylim(0,250) + #< Upper bound of y-axis limit is set so that geom_text annotations are not cut off\n                theme(text = element_text(size = 12),\n                      axis.text.y = element_blank(), #< Shared y-axis when used in patchwork with age chart\n                      plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\nAge and Income Groups\n\n\ncode block\n(demo_agegrp + fin_incgrp) & theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combining-datasets-and-computing-monthly-income-per-capita",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combining-datasets-and-computing-monthly-income-per-capita",
    "title": "Take-home Exercise 1",
    "section": "2.3: Combining Datasets and Computing Monthly Income per Capita",
    "text": "2.3: Combining Datasets and Computing Monthly Income per Capita\nThe dataframes are first combined into df_combined:\n\n\ncode block\n#Inner join as only 880 participants are listed in financial data\n\ndf_combined <- merge(demo_data_new, financial_agg, by = \"participantId\") %>%\n              select(unique(colnames(.))) %>%\n              arrange(as.numeric(participantId)) \n\nDT::datatable(df_combined,\n              class =\"compact\")\n\n\n\n\n\n\n\n   \nThe formula used to determine Monthly Income per Capita for this study is as follows:\n\\[Monthly\\ Income\\ per\\ Capita = \\frac{Monthly\\ Wage}{Household\\ Size}\\]\n\n\ncode block\n# Compute income per capita and save as new variable\ndf_combined <- df_combined %>%\n              mutate(incomePerCapita = round((monthlyWage/as.integer(householdSize)), 0))\n\n# Calculate min, max, 95th percentile and median values for annotations\nmin_incomePC <- round(min(df_combined$incomePerCapita),0)\nmax_incomePC <- round(max(df_combined$incomePerCapita),0)\nq_incomePC <- round(quantile(df_combined$incomePerCapita, probs = .95),0)\nmedian_incomePC <- round(median(df_combined$incomePerCapita),0)\n\n# Histogram of income per capita\nh <- \n  ggplot(\n    df_combined, \n    aes(x = incomePerCapita)\n  ) +\n  geom_histogram(\n    bins = 25,\n    color = \"#F8F3E6\"\n  ) +\n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 5),\n    # Set same limits for both plots to ensure justification\n    limits = c(500,12000), \n    # Label with $ unit\n    labels = label_dollar()\n  ) + \n  geom_vline(\n    aes(xintercept = median_incomePC),\n    colour=\"grey20\", \n    linewidth = 0.7, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 3900, \n    y = 290,\n    label = paste0(\"Median Income per Capita: $\", median_incomePC)\n  ) +\n  labs(x = NULL, y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n#Boxplot of Income per capita\nbox <- \n  ggplot(\n    df_combined, \n    aes(y = incomePerCapita)\n  ) + \n  geom_boxplot(\n    outlier.colour=\"salmon\", \n    outlier.shape=16,\n    outlier.size=1, \n    notch=FALSE\n  ) + \n  coord_flip() + \n    #Annotate with amounts to show range of income on boxplot diagram\n  annotate(\n    geom = \"text\", \n    x = 0.38, \n    y = min_incomePC,\n    label = paste0(\"$\", min_incomePC),\n    color = \"grey20\"\n  ) + \n   annotate(\n    geom = \"text\", \n    x = 0.38, \n    y = q_incomePC,\n    label = paste0(\"$\", q_incomePC),\n    color = \"grey20\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 0.38, \n    y = max_incomePC,\n    label = paste0(\"$\", max_incomePC),\n    color = \"salmon\"\n  ) + \n  labs(\n    title = \"Right-skewed distribution of Income per Capita\",\n     y = \"\", \n    x = \"\"\n  ) + \n   scale_y_continuous(\n    limits = c(500,12000), \n    labels = label_dollar()\n  ) +\n  stat_boxplot(\n    geom=\"errorbar\", \n    width=0.5\n  ) + \n  theme_minimal() +\n  theme(\n    axis.text = element_blank(), \n    axis.ticks = element_blank(),\n    panel.grid.major = element_blank(),\n     plot.background = element_rect(\n       fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\nhbox <- (box / h) + \n        plot_layout(heights = c(1, 3.5)) #< Scale layout to keep boxplot height shorter\n\nhbox & theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\n\nInsights from Visualisation\n\nThere is a right-skewed distribution of Income per Capita, with median value ($1947) far from the 95th Percentile tail ($5487)\n\nTrail of red points in the boxplot show the presence of outliers and Highest Income per Capita is 4 times that of median: this suggests a large income disparity among City residents\n\nCity Revitalisation Efforts could thus aim to increase affordability of spaces or services to cater to the larger concentration of citizens within or below median income range."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#joviality",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#joviality",
    "title": "Take-home Exercise 1",
    "section": "3.1: Joviality",
    "text": "3.1: Joviality\nEach participant has a joviality score on a scale of 0 to 1. For the purpose of this study, we assume that the closer the score is to 1 (maximum), the more jovial the participant was recorded at the start of the survey. Joviality will thus be analysed across different demographic and financial variables, to find significant patterns and trends. Key portions of the EDA are visualised to aid city revitalisation efforts in determining ways to increase overall joviality of the population.\n\n3.1.1: Distribution\nThe distribution of joviality scores is first visualised to determine the variation of values across the sample population:\n\n\ncode block\n# Calculate Median and Mean values for annotations, standard deviation for plotting normal curve\nmed_jov <- median(df_combined$joviality)\nmean_jov <- mean(df_combined$joviality)\nstd_jov <- sd(df_combined$joviality)\n\nggplot(\n    df_combined, \n    aes(x = joviality)\n  ) +\n  geom_density(\n    color = \"#1696d2\",\n  # Adjust bandwidth to reduce smoothness of density plot to reveal variations\n    adjust = .2,\n    alpha = .6\n  ) +\n  # Plot normal curve\n  stat_function(\n    fun = dnorm,\n    args = list(mean = mean_jov,\n                sd = std_jov),\n    col = \"grey30\",\n    size = .6\n  ) +\n  # Add vertical line to show mean across plot\n  geom_vline(\n    aes(xintercept = mean_jov),\n    colour=\"#4d5887\", \n    linewidth = .6, \n    linetype = \"dashed\"\n  ) +\n  # Add annotations to show mean value positioned next to geom_vline\n  annotate(\n    geom = \"text\", \n    x = mean_jov + 0.12, \n    y = 1.5,\n    label = paste0(\"Mean Joviality: \", round((mean_jov),2)),\n    color = \"#4d5887\"\n  ) +\n  # Add vertical line to show median across plot\n  geom_vline(\n    aes(xintercept = med_jov),\n    colour = \"#00AFBB\", \n    linewidth = .6, \n    linetype = \"dashed\"\n  ) +\n  # Add annotations to show median value positioned next to geom_vline\n  annotate(\n    geom = \"text\", \n    x = med_jov - 0.12, \n    y = 1.5,\n    label = paste0(\"Median Joviality: \", round((med_jov),2)),\n    color = \"#00AFBB\"\n  ) +\n  labs(\n    title = \"Uneven Distribution of Joviality Score across Participants\",\n    subtitle = \"Median joviality score is close to Mean score, but distribution density reveals multiple peaks and troughs\",\n    x = \"Joviality Score\"\n  ) +\n  theme(\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n\n\n\n\n\n\n3.1.2: Are there differences in Joviality Across Income and Age Groups?\nThis study first proposes to find out if specific groups within the population have reported lower or higher joviality scores, and if this difference between factor levels in the sample is significant enough to represent the overall city population.\n\n\n\n\nflowchart LR\nA((Joviality)) -->|differences?| B[Income Groups]\nA -->|differences?| C[Age Groups]\nB -.- C\n\n\n\n\n\n\n\n\n \nA normality assumption test is first conducted across factor levels for joviality score across income and age groups. At a confidence level of 95%, we test the following hypothesis:\n\\[H_0: Joviality\\ is\\ normally\\ distributed\\ across\\ groups\\] \\[H_1: Joviality\\ is\\ not\\ normally\\ distributed\\ across\\ groups\\]\nIncome Groups\n\nDistributionNormality TestANOVA\n\n\n\n\ncode block\nggplot(\n    df_combined, \n    aes(x = joviality, \n        y = incomeGroup,\n        fill = incomeGroup,\n        color = incomeGroup)\n  ) +\n  geom_density_ridges(\n    # Adjust bandwidth to reveal variations \n    bandwidth = .05, \n    alpha = .6\n  ) +\n  labs(\n    title = \"Distribution of Joviality Score Across Income Groups\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 0.2, y = 5.9,\n    label = \"High income groups\\nrecorded peaks in lower joviality\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 0.8, y = 1.5,\n    label = \"Low income groups\\nrecorded peaks in higher joviality\"\n  ) +\n  theme(\n    legend.position = \"none\",\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n\n\n\n\n\n\n\n\ncode block\nggplot(\n    df_combined, \n    mapping = aes(sample = joviality, \n                  fill = incomeGroup)\n  )+\n  stat_qq_band(alpha=0.15) +\n  stat_qq_line(alpha=0.15) +\n  stat_qq_point(size=0.5) + \n  facet_wrap(\n    ~ incomeGroup, \n    nrow = 1 #<nrow used to fit all plots into a line\n  ) + \n  labs(\n    title = \"Deviation from Normality across Income Groups\",\n    subtitle = \"Q-Q plots visually indicate that points diverge from diagonal\",\n    x = \"\", \n    y = \"\"\n  ) +\n  # theme selected as the border and colored title bar makes it easier to differentiate\n  theme_bw() + \n  remove_ticks() +\n  theme(\n    # legend removed as it was unnecessary\n    legend.position = \"none\", \n    axis.text.y = element_blank(),\n    axis.text.x = element_blank(),\n    panel.grid.minor = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n\n\n\n\n\n\ncode block\ndf_combined %>%\n      group_by(incomeGroup) %>%\n      shapiro_test(joviality) %>%\n      ungroup() %>%\n      kbl() %>%\n      kable_styling(full_width = F, bootstrap_options = \"responsive\")\n\n\n\n\n \n  \n    incomeGroup \n    variable \n    statistic \n    p \n  \n \n\n  \n    Low \n    joviality \n    0.9275730 \n    0.0000001 \n  \n  \n    Mid-low \n    joviality \n    0.9575466 \n    0.0000450 \n  \n  \n    Mid \n    joviality \n    0.9391820 \n    0.0000008 \n  \n  \n    Mid-high \n    joviality \n    0.9654749 \n    0.0002385 \n  \n  \n    High \n    joviality \n    0.9224990 \n    0.0000000 \n  \n\n\n\n\n\nSince the p-value across mid-low and high income groups is < significance level 0.05, we reject the null hypothesis, concluding that joviality does not follow a normal distribution across all income groups. To test if there is a significant difference between groups, a non-parametric test will be used in subsequent analysis, with median value as measure of central tendency.\n\n\nA non-parametric Kruskal-Wallis one-way ANOVA test is conducted to determine if there is a significant difference in joviality score between income groups. At a significance level of 0.05, we test the following hypothesis:\n\\[H_0: There\\ is\\ no\\ difference\\ in\\ \\mu\\ between\\ income\\ groups\\] \\[H_0: There\\ is\\ a\\ difference\\ in\\ \\mu\\ between\\ two\\ or\\ more\\ income\\ groups\\]\n\n\ncode block\nset.seed(1234)\nggbetweenstats(data = df_combined,\n               x = incomeGroup,\n               y = joviality,\n               type = \"np\",\n               mean.ci = TRUE, \n              pairwise.comparisons = TRUE, \n              pairwise.display = \"s\",\n              p.adjust.method = \"fdr\",\n              messages = FALSE\n              ) +\n  theme_classic() +\n  theme(legend.position = \"none\",\n        plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\nThe p-value is < significance level of 0.05, so we can reject the null hypothesis and conclude that median joviality differs among income groups. In fact, there is a large difference in mean joviality between low income and high income groups, with participants in low income groups having significantly greater joviality (median = 0.69) than those in the high income group (median = 0.27).\n\n\n\n  Age Groups\n\nDistributionNormality TestANOVA\n\n\n\n\ncode block\nggplot(\n    df_combined, \n    aes(x = joviality, \n        y = ageGroup,\n        fill = ageGroup,\n        color = ageGroup)\n  ) +\n  geom_density_ridges(\n    bandwidth = .05, \n    alpha = .6\n  ) +\n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 5)\n  ) +\n  labs(\n    title = \"Distribution of Joviality Score Across Age Groups\",\n    subtitle = \"Variation of joviality across all age groups -- suggests possible influence of multiple factors\"\n  ) +\n  theme(\n    legend.position = \"none\",\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n\n\n\n\n\n\n\n\ncode block\nggplot(df_combined, \n       mapping = aes(sample = joviality, \n                     fill = ageGroup))+\n      stat_qq_band(alpha=0.15) +\n      stat_qq_line(alpha=0.15) +\n      stat_qq_point(size=0.5) + \n      facet_wrap(~ ageGroup, nrow = 1) + #< nrow used to fit all plots into a line\n      labs(title = \"Deviation from normality across Age Groups\",\n           subtitle = \"Q-Q plots visually indicate that points diverge from diagonal at tail ends\",\n           x = \"\", y = \"\") +\n      theme_bw() + #< theme selected as the border and colored title bar makes it easier to differentiate\n      theme(legend.position = \"none\", #< legend removed as it was unnecessary\n            axis.text.y = element_blank(),\n            axis.text.x = element_blank(),\n            axis.ticks.y = element_blank(),\n            axis.ticks.x = element_blank(),\n            panel.grid.minor = element_blank(),\n            plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\n\n\ncode block\ndf_combined %>%\n  group_by(ageGroup) %>%\n  shapiro_test(joviality) %>%\n  ungroup() %>%\n  kbl() %>%\n  kable_styling(full_width = F, bootstrap_options = \"responsive\")\n\n\n\n\n \n  \n    ageGroup \n    variable \n    statistic \n    p \n  \n \n\n  \n    18-26 \n    joviality \n    0.9528571 \n    1.11e-05 \n  \n  \n    27-35 \n    joviality \n    0.9409988 \n    5.00e-07 \n  \n  \n    36-44 \n    joviality \n    0.9425735 \n    9.00e-07 \n  \n  \n    45-52 \n    joviality \n    0.9554757 \n    5.20e-05 \n  \n  \n    53-60 \n    joviality \n    0.9453997 \n    5.40e-06 \n  \n\n\n\n\n\nSince the p-value across all age groups is < 0.05, we reject the null hypothesis, concluding that joviality does not follow a normal distribution across age groups either. To test if there is a significant difference between groups, a non-parametric test will be used in subsequent analysis.\n\n\nA non-parametric Kruskal-Wallis one-way ANOVA test is conducted to determine if there is a significant difference in mean joviality score between age groups. At a significance level of 0.05, we test the following hypothesis:\n\\[H_0: There\\ is\\ no\\ difference\\ in\\ \\mu\\ between\\ age\\ groups\\] \\[H_0: There\\ is\\ a\\ difference\\ in\\ \\mu\\ between\\ two\\ or\\ more\\ age\\ groups\\]\n\n\ncode block\nset.seed(1234)\nggbetweenstats(data = df_combined,\n               x = ageGroup,\n               y = joviality,\n               type = \"np\",\n               mean.ci = TRUE, \n              pairwise.comparisons = TRUE, \n              pairwise.display = \"s\",\n              p.adjust.method = \"fdr\",\n              messages = FALSE\n              ) +\n  theme_classic() +\n  theme(legend.position = \"none\",\n        plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\nThe p-value (0.17) is > significant level of 0.05, so we conclude that there is no significant difference in mean joviality score across age groups.\n\n\n\n\nVisual Considerations\n\nDensity ridges were used to compare across groups to reveal ‘peaks’ between high and low income groups at opposite ends of the joviality spectrum. As there were multiple variations in the distribution of Income and Age Groups, bandwidth argument from geom_density_ridges() was used to alter the bandwidth such that the density estimation was less smoothed out. This enabled the visualisation of the variations present in joviality across the groups.\nTransparency for each density plot was toggled to show overlapping layers. color argument was added to Age Group plot as transparency value was increased due to the multiple overlaps. This enabled clearer visualisation of each group without obscuring.\nAnnotations were added to emphasize on insights from analysis of density\nQ-Q plots were used to reveal deviations from normality for each group. facet_wrap() was used to show the distribution of each group side-by-side for clarity\nkable styling of tables were used to display p-value statistics below each Q_Q plot.\n\n\n\n\n3.1.3: How are Age and Income Groups Related?\n   \n\nMosaic PlotChi-square Test\n\n\nThere seems to be a fairly even spread of age group across income groups:\n\n\ncode block\nggSpine(\n    df_combined,\n    aes(x = ageGroup, \n    fill = incomeGroup),\n    addlabel = TRUE,\n    interactive = TRUE\n  )\n\n\n\n\n\n\n\n\nTo determine if there is an association between both groups, a chi-square test of association is conducted at 95% confidence level.\n\\[H_0: There\\ is\\ no\\ association\\ between\\ income\\ and\\ age\\ groups\\] \\[H_1: There\\ is\\ an\\ association\\ between\\ income\\ and\\ age\\ groups\\]\n\n\ncode block\n#fig-width: 8\nset.seed(1234)\n  ggbarstats(\n    df_combined,\n    x = ageGroup, \n    y = incomeGroup,\n    bf.message = FALSE\n  ) +\n  theme(\n    plot.background = element_rect(\n      fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n\n\n\n\nSince p-value (0.76) is > significance level of 0.05, we conclude that there is no significant association between Income Group and Education Level.\n\n\n\n\n\n3.1.4 Joviality Across Both Income and Age\nThe one-way ANOVA tests reported significant differences in joviality between income groups but not between age groups. There was also no reported association between income and age groups. However, there are still trends that can be observed when comparing multiple groups and different factor levels. This could give more specific insight into demographic patterns, as visualised in the following chart that compares joviality score across both Age and Income groups:\n\nDesign Considerations\n\nA heatmap was selected to visualise the density of joviality by two different categorical variables.\nGradient fill could show the variation in joviality across both categories, with “lighter” gradients representing “happier” or higher joviality scores. This variation was made more obvious with a diverging yellow-blue palette.\nThe plot was made interactive, such that the user could access specific information per tile, without cluttering the plot with figures or annotations.\nSubtitle was added to highlight most important insight from the analysis\nIdeally, I would have changed the font output to match the rest of my visualisations – this proved tricky due to the interactive layer, which had different parameters.\n\n\n\n\ncode block\n# Calculate mean joviality per tile\ngbcols <- c(\"ageGroup\", \"incomeGroup\")\n\n# Calculate Mean joviality score by agegroup and incomegroup and save in new dataframe\ncal_joviality <- df_combined %>% \n  group_by(\n    across(all_of(gbcols))) %>% \n  # Create new variable for mean joviality score by both groups\n  summarise(\n    mean_joviality = round(mean(joviality),2), \n    .groups = \"drop\") %>%\n  ungroup()\n\n# Style tooltip\ntooltip_css <- \"background-color:#3E4254; font-style:bold; color:#F8F3E6;\" \n\n# Tile Plot\ngg_tile <-\n  ggplot(\n    cal_joviality,\n    aes(x = ageGroup, \n        y = incomeGroup)\n  ) +\n  geom_tile_interactive(\n    aes(fill = mean_joviality,\n        # Format tooltip information\n        tooltip = paste(\"Age Group: \", ageGroup, \"<br>\",\n                        \"Income Group: \", incomeGroup, \"<br>\",\n                        \"Mean Joviality Score: \", mean_joviality))\n  ) + \n  # Specify gradient colors for divergent scale \n  scale_fill_gradient(\n    low = \"#0a4c6a\",\n    high = \"#fdd870\",\n    space = \"Lab\",\n    na.value = \"grey50\",\n    guide = \"colourbar\",\n    aesthetics = \"fill\"\n  ) +  \n labs(\n   title = \"Joviality across Income and Age Groups\",\n    subtitle = \"Younger People from lower Income Groups had the highest joviality scores\",\n    x = \"Age Group\",\n    y = \"Income Group\"\n  ) +\n  theme(\n    # Move legend to right and change orientation so values are not overlapping \n    legend.position = \"right\",\n    legend.direction = \"vertical\",\n    axis.line.x = element_blank(),\n    panel.grid.major.y = element_blank(),\n    text = element_text(family = \"Lato\")\n  ) +\n  # Remove plot ticks as they are distracting and unnecessary\n  remove_ticks() +\n  theme(\n    plot.background = element_rect(\n      fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n# Make into interactive ggiraph object\nggiraph::girafe(ggobj = gg_tile,\n                width_svg = 6,\n                height_svg = 6*0.7,\n                options = list(opts_tooltip(css = tooltip_css)))                   \n\n\n\n\n\n\n   \n\nInsights from Visualisations\n\nInterestingly, participants from lower income brackets reported much higher joviality scores than those in the highest income group, with age group 30-39 having the highest mean joviality. This is suggestive of social segregation within the city based on income.\nAcross all age bands in the highest income group, joviality scores were lower than median score of 0.44\nParticipants from higher income groups in the 51-60 age group reported lowest mean joviality score of 0.21\n\nTo cater to the wide range of income groups and age groups, city revitalisation efforts could focus on investing in developing community hubs that could foster a more inclusive environment. This could promote greater social interaction between diverse groups of citizens that may lead to a better sense of community."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#what-makes-these-groups-more-or-less-jovial",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#what-makes-these-groups-more-or-less-jovial",
    "title": "Take-home Exercise 1",
    "section": "3.2 What makes these groups more or less jovial?",
    "text": "3.2 What makes these groups more or less jovial?\nTo address this gap in joviality scores, there was a need to investigate if there are associations between high and low income groups and other categorical variables such as education level, interest group, household size, as well as expenses. These differences could also cast some insight into the wide variation in joviality scores.\n\n\n\n\nflowchart LR\nA((Joviality)) --> B[Income Groups]\nA --> C[Age Groups]\nB -.- C\nB -->|association?| D[Education]\nB -->|association?| E[Interest Groups]\nB -->|association?| F[Household Size]\nB --> G[Children]\nF -.- G\n\n\n\n\n\n\n\n\n\n3.2.1: Tests of Association\nTo determine if there are significant associations between income group, education level, interest group and household size, we conduct a chi-square test of association. At a significance level of 0.05:\n\\[H_0: There\\ is\\ no\\ association\\ between\\ groups\\] \\[H_1: There\\ is\\ an\\ association\\ between\\ groups\\]\n\nOverviewEducationInterest GroupsHousehold SizeChildren\n\n\nA Summary of results from Chi-Square Tests of Association:\n\n\n\n\n\n\n\n\n\n\nSignificant Association?\nEducation\nInterest Groups\nHousehold Size\nChildren\n\n\n\n\nIncome Group\nYes\nNo\nYes\nYes\n\n\np-value\n8.26e-48\n0.09\n7.06e-18\n5.58e-09\n\n\n\n\n\n\n\ncode block\n# As we want to compare only high and low groups, filter out into new df\ndf_highlow <- df_combined %>%\n  filter(incomeGroup %in% c(\"Low\", \"High\"))\n\nset.seed(1234)\ntest_edu <- ggbarstats(df_highlow,\n                        x = educationLevel, y = incomeGroup,\n                        bf.message = FALSE) +\n            labs(title = \"Higher Income Groups are Significantly More Highly Educated\",\n                 x = \"Income Group\") +\n            theme(panel.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n                  plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\ntest_edu          \n\n\n\n\n\nSince p-value is < significance level of 0.05, we reject the null hypothesis and conclude that there is an association between Income Group and Education Level.\n\n\n\n\ncode block\nset.seed(1234)\ntest_interest <- ggbarstats(df_highlow,\n                            x = interestGroup, y = incomeGroup,\n                            bf.message = FALSE) +\n            labs(title = \"No Significant Association Between Income and Interest\",\n                 x = \"Income Group\") +\n            theme(panel.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n                plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\ntest_interest\n\n\n\n\n\nSince p-value is > significance level of 0.05, we conclude that there is no dependent association between Income Group and Education Level.\n\n\n\n\ncode block\nset.seed(1234)\ntest_hhsize <- ggbarstats(df_highlow,\n                          x = householdSize, y = incomeGroup,\n                          bf.message = FALSE) +\n            labs(title = \"Significantly Higher Proportion of Singles in Lower Income Groups\",\n                 x = \"Income Group\") +\n            theme(panel.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n                  plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\ntest_hhsize\n\n\n\n\n\nSince p-value is < significance level of 0.05, we reject the null hypothesis and conclude that there is an association between Income Group and Household Size.\n\n\n\n\ncode block\nset.seed(1234)\ntest_kids <- ggbarstats(df_highlow,\n                          x = haveKids, y = incomeGroup, \n                        bf.message = FALSE)+\n            labs(title = \"Lower Proportion of Children in Households with Lower Income\",\n                 x = \"Income Group\") +\n            theme(\n              panel.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n              plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\ntest_kids\n\n\n\n\n\nSince p-value is < significance level of 0.05, we reject the null hypothesis and conclude that there is an association between Income Group and whether the household includes Children.\n\n\n\n\n\n3.2.2: Comparing Joviality across Income Groups and Education Level\nFrom the chi-square Tests of Association conducted above, income and education level are significantly associated. This relationship is visualised in an interactive boxplot grid:\n\nDesign Considerations\n\nAn interactive boxplot grid using ggplotly() enables the user to filter by income group, which is useful to compare across education levels and age groups\nTo find out if education level is indicative of age (i.e. older participants have higher qualifications) or if there are patterns related to both categorical groups, facet_grid() was used to segregate the plots by age group as well\nY-axis breaks were limited to n=3, to prevent over-cluttering. Light grid lines in the panel background were kept such that axis text could be read across the grid.\nX-axis title, text and ticks were removed as there are only two distinct groups, which are labelled in the legend and colour coded across the graph. These unnecessary elements were removed to present a cleaner overall visual.\n\n\n\n\ncode block\nedu2 <- ggplot(\n    df_highlow, \n    aes(x = incomeGroup, \n        y = joviality, \n        # Different colors for income groups for greater differentiation\n        fill = incomeGroup)\n  ) + \n  geom_boxplot() + \n  facet_grid(ageGroup~educationLevel) + \n  # Use this theme as the border makes each plot clearly defined\n  theme_bw() +  \n  scale_y_continuous(breaks = scales::pretty_breaks(n=3)) + \n  theme(\n    # Add panel spacing so that plots are not too clustered\n    panel.spacing = unit(1, 'lines'),  \n    axis.text.x = element_blank(), \n    axis.ticks.x = element_blank(), \n    axis.title.x = element_blank(), \n    panel.background = element_rect(\n      fill=\"#F8F3E6\",colour=\"#F8F3E6\"), \n    plot.background = element_rect(\n      fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n# Make into interactive diagram to show Statistics\n\nggplotly(edu2)\n\n\n\n\n\n\n\nInsights from Visualisation\n\nFiltering by Income Group revealed that citizens from the high income group generally have higher educational qualifications, with a minimum level of High School or College education.\nFor the low income group, variation in joviality scores was significantly wider in the High School/College and Low education levels, compared to Graduate and Bachelors. Joviality score range and median was also much higher for the latter.\nFrom these insights, it is possible to deduce that affordability is an obstacle to attaining higher education. City planners could look into improving the educational infrastructure, or providing grants and greater access to higher education, especially for the lower income groups.\n\n\n\n\n3.2.3: Comparing Joviality across Income Groups and Household Composition\nHousehold Composition\nBefore comparing joviality score with Household data, there is a need to understand the relationship between householdSize – how large the household is – and haveKids – whether there are children present in the household.\n\n\ncode block\nggbarstats(df_combined,\n    x = haveKids, \n    y = householdSize,\n    bf.message = FALSE\n  ) +\n  labs(\n    title = \"All 3-member Households Have Children\",\n    x = \"Household Size\"\n  ) +\n  theme(\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n\n\n\n\nFrom the output plot, we can use householdSize as a proxy for Household Composition, with household size = 3 referring to families with children.\n\n\ncode block\nggplot(df_highlow, \n    aes(x = joviality, \n        y = incomeGroup, \n      # Fill with cumulative probability density\n        fill = 0.5 - abs(0.5 - after_stat(ecdf)))\n  ) + \n  geom_density_ridges_gradient(\n    calc_ecdf = TRUE, \n  # Reduce space between high and low \n    scale = 3\n  ) +\n  facet_wrap(~householdSize) + \n  scale_fill_viridis(\n    alpha = .7,\n  # Select Colour Palette\n    option = \"E\"\n  ) +\n  labs(\n    title = \"Probability Density of Joviality Score Across Income Groups and Households\",\n    subtitle = \"Brighter yellow colors suggest higher probability of joviality score occurring\",\n    x = \"Joviality\", \n    y = \"Income Groups\"\n  ) +\n  theme(\n    legend.position = \"right\",\n    legend.direction = \"vertical\",\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n\n\n\n\n\nInsights from Visualisation\n\nPeaks in Joviality seem to increase in larger households with children in low income groups\nJoviality distribution is similarly right-skewed across household sizes in high income groups, suggesting that the presence of children does not have a large effect on joviality score in this income group.\n\n\n\n\n3.2.4: Comparing Joviality and Expenses\n\n\n\n\nflowchart LR\nA((Joviality)) --> B[Income Groups]\nA --> C[Age Groups]\nB -.- C\nB --> D[Education]\nB --> E[Interest Groups]\nB --> F[Household Size]\nB --> G[Children]\nF -.- G\nB -->|correlation?| H[Expenses]\nH -.- I(Expense Ratio)\n\n\n\n\n\n\n\n\n   \nWhat proportion of income does the average citizen spend?\n\n\ncode block\nggplot(financial_agg, \n    aes(x = expenseRatio, \n        y = incomeGroup)\n  ) +\n  geom_point(\n    alpha = 0.2, \n    size = 7\n  ) +\n  stat_summary(\n    color = \"#fdbf11\", \n    fun = \"median\", \n    geom = \"point\", \n    size = 7, \n    alpha = 0.8\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0.002, 0)), \n    limits = c(0, 1),\n    breaks = scales::pretty_breaks(n=3)\n  ) +  \n  labs(\n    title = \"Lower Income Groups Tend to Spend a Higher Proportion of Their Income\",\n    subtitle = \"Median values are highlighted in Yellow\",\n    x = \"Expense Ratio\",\n    y = NULL\n  ) +\n  theme(\n    axis.ticks.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n\n\n\n\n   \n\nDesign Considerations\n\nTo visualise the variation as well as differences in range between groups, a strip chart was used to represent all data points in linear fashion\n\nalpha value was set low to allow translucency of overlapping points. Since the points would tend to cluster, using a lower alpha value would enable visibility of points. It also creates a visual density, where higher proportion of overlaps produce darker colours.\n\nUsing stat_summary() enabled the visualisation of median value per group, specifying a contrasting color to make it stand out from the other points.\n\n\n   \nTo find understand the spending patterns across Income Groups, average total expense is calculated and visualised:\n\n\ncode block\n# Get Average amount spent per category\ndf_ave_expense <- df_combined %>%\n                  select(\n                    participantId, incomeGroup, Education, Food, Recreation, Shelter, totOutflow) %>%\n                  group_by(\n                    incomeGroup) %>%\n                  summarise(\n                    num = n(),\n                    AvgOutflow = sum(totOutflow)/num,\n                    Education = round((sum(Education)/num),0),\n                    Food = round((sum(Food)/num),0), \n                    Recreation = round((sum(Recreation)/num),0), \n                    Shelter = round((sum(Shelter)/num),0))\n                            \n\n# reshape the dataframe to long format\ndf_longer <- df_ave_expense %>%\n              select(c(incomeGroup, Education, Food, Recreation, Shelter)) %>%\n              pivot_longer(!incomeGroup, names_to = \"Expense\", values_to = \"Amount\")\n\n\nxform <- list(title = 'Income Group',\n              categoryorder = \"array\",\n              # Specify category titles\n              categoryarray = c(\"Low\",\n                                \"Mid-low\",\n                                \"Mid\",\n                                \"Mid-high\",\n                                \"High\"))\n\n\nexpfig <- plot_ly(df_longer, \n               x = ~incomeGroup, \n               y = ~Amount,\n               type = \"bar\",\n               color = ~Expense,\n               colors = c(\"salmon\", \"grey10\", \"#fdbf11\",\"#1696d2\")) %>%\n          layout(barmode = \"stack\", \n                 xaxis = xform, \n                 yaxis = list(title = \"Total Expenditure ($)\"), \n                 title = \"Highest Expenditure on Shelter across Income Groups\",\n                 plot_bgcolor = \"#F8F3E6\",\n                 paper_bgcolor = \"#F8F3E6\" )\nexpfig\n\n\n\n\n\n\n \nFrom this initial visualisation, all groups spent the most on Shelter. Subsidised or improved housing facilities, especially for larger households, could also be explored to improve overall quality of life.\n \nWhat is the correlation between Joviality and Expenditure amounts by category?\n\n\ncode block\ndf_corr <- df_combined %>%\n  select(joviality, Shelter, Recreation, Food, Education)\n\ncorrplot <- ggcorr(\n    df_corr,\n    low = \"salmon\", \n    mid = \"#cfe8f3\",\n    high = \"#062635\",\n  # Styling label title size, position and color\n    label = TRUE,\n    size = 3.5,\n    hjust = .5,\n    vjust = 3,\n    color = \"grey20\"\n  ) +\n  labs(\n    title = \"Strongest Correlation Between Joviality and\\nExpenditure on Food\"\n  ) +\n  theme(\n    legend.direction = \"vertical\",\n    panel.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\ncorrplot\n\n\n\n\n\nThe correlation matrix revealed that there was a stronger positive correlation between joviality and amount spent on Food and Recreation. Visualising Correlations between Food and Recreation Expenditure by Income Group\n \n\nVisual Considerations\n\nThe aim of this visualisation was to show the relation between joviality and expense on Food and Recreation, by income group.\nRecreation Plots: A separate group at Expense = $0 was emphasized by:\n\nusing geom_vlineto visualise the trend,\nusing annotate to identify and label the separate group on the plot panel,\nFormatting the label using linebreaks \\n such that it was not obscured by the points on the plot.\n\nPlots were coded separately and put side-by-side for comparison by income groups using patchwork\n\n\n\n\ncode block\nHfscat <- df_highlow %>%\n  filter(incomeGroup == \"High\") %>%\n  ggscatterstats(\n    x = Food, \n    y = joviality, \n    conf.level = 0.95,\n    bf.message = FALSE\n  ) +\n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 4),\n    labels = label_dollar()\n  ) +\n  labs(\n    title = \"High Income Group:\",\n    x = \"Amount Spent on Food\"\n  ) +\n  theme(\n    panel.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\nLfscat <- df_highlow %>%\n  filter(incomeGroup == \"Low\") %>%\n  ggscatterstats(\n    x = Food, \n    y = joviality, \n    conf.level = 0.95,\n    bf.message = FALSE\n  ) +\n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 4),\n    labels = label_dollar()\n  ) +\n  labs(\n    title = \"Low Income Group:\",\n    x = \"Amount Spent on Food\"\n  ) +\n  theme(\n    panel.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\nfoodpatch <- (Hfscat | Lfscat) +\n   plot_annotation(\n      title = \"Stronger Positive Correlation Between Food and Joviality in High Income Group\")\n\nfoodpatch & theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\n\n\ncode block\nHrecscat <- df_highlow %>%\n  filter(incomeGroup == \"High\") %>%\n  ggscatterstats(\n    x = Recreation, \n    y = joviality, \n    conf.level = 0.95,\n    bf.message = FALSE\n  ) +\n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 4),\n    labels = label_dollar()\n  ) +\n  geom_vline(\n    xintercept = 0,\n    colour=\"blue\", linewidth = 1\n  ) +\nannotate(\n    geom = \"text\", x = 1200, y = 0.6,\n    label = \"Splinter group\\nwith Expense=$0\"\n  ) +\n  labs(\n    title = \"High Income Group:\",\n    x = \"Amount Spent on Recreation\"\n  ) +\n  theme(\n    panel.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\nLrecscat <- df_highlow %>%\n  filter(incomeGroup == \"Low\") %>%\n  ggscatterstats(\n    x = Recreation, \n    y = joviality, \n    conf.level = 0.95,\n    bf.message = FALSE\n  ) +\n  scale_x_continuous(\n    breaks = scales::pretty_breaks(n = 4),\n    labels = label_dollar()\n  ) +\n  geom_vline(\n    xintercept = 0,\n    colour=\"blue\", linewidth = 1\n  ) +\nannotate(\n    geom = \"text\", x = 1200, y = 0.6,\n    label = \"Splinter group\\nwith Expense=$0\"\n  ) +\n  labs(\n    title = \"Low Income Group:\",\n    x = \"Amount Spent on Recreation\"\n  ) +\n  theme(\n    panel.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\nrecpatch <- (Hrecscat | Lrecscat) +\n   plot_annotation(\n      title = \"Stronger Positive Correlation Between Recreation and Joviality in Low Income Group\")\n\nrecpatch & theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\n\nInsights from Visualisations\n\nFood and Joviality:\n\nThere is a stronger positive linear correlation between expenditure on food and higher joviality in High income participants compared to those in lower income groups.\nMultiple clumps of points across both graphs seem to suggest presence of multiple groups, which may indicate other factors affecting expenditure.\n\nRecreation and Joviality:\n\nThere is a stronger positive linear correlation between expenditure on recreation and higher jovialiaty in Low income participants compared to those in the High income group\nDistribution of points in the High Income Group is more widely scattered around the middle expenditure range, indicative of lower expenditure range compared to Low income groups\nHowever, there is a diverging line in the correlation scatterplots for both groups, identifying a group of participants who have spent $0 on recreation, yet recorded a range of low-high joviality scores. This splinter group represents a smaller portion of the overall sample.\nFrom Section 1.2.2, which summarized expenditure trends over time range of transactions, average spending on Recreation declined over the year. While associated changes in joviality cannot be determined due to lack of data, community revitalisation plans could involve developing communal recreational infrastructure, increasing recreational spaces in the City such as parks or cultural attractions that are free for use or subsidised."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-limitations",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-limitations",
    "title": "Take-home Exercise 1",
    "section": "4.1 Data Limitations",
    "text": "4.1 Data Limitations\nDespite the discovery of various insights from the datasets, there are a few caveats that the user should be aware of:\n\nSampling Bias: It cannot be accurately determined if the sample data is representative of the entire City population. As there is no geographic data included, the sample may be biased towards certain areas within the city. There was also a much higher proportion of households without children, and participants with lower educational qualifications surveyed. The sample thus may not accurately reflect the broader population.\n\nIncomplete Data: Financial data was not representative of all survey participants (covered in Section 1.2.2)\nResponse Bias: As data was collected through a survey, the dataset may rely on self-reported statistics that may be partially influenced by a variety of factors. This may limit the accuracy of data collected, especially regarding financial transactions.\n\nTime-based Limitations: Joviality score was recorded only at the start of the survey, but financial statements were taken over the course of the year. Declining expenditure on Food and Recreation were observed, but any potential changes in joviality were not recorded, which could lead to different insights. Changes in personal circumstances could also affect joviality score, and may have occurred in the course of the data collection process.\nCorrelation is not Causation: While the data exploration and visualisations have given some interesting insights and highlighted some correlations between variables affecting joviality, it is unclear if these factors directly cause changes in joviality. Several rounds of surveys could be conducted to collect a more complete data set, or findings from this initial survey could be tested against a separate sample for comparison."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#a-visual-summary",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#a-visual-summary",
    "title": "Take-home Exercise 1",
    "section": "4.2 A Visual Summary",
    "text": "4.2 A Visual Summary\n\n\n\n\nflowchart LR\nA((Joviality)) --> B[Income Groups] --- E[Age Group]\nB -.-|fa:fa-circle-up joviality| C(High Income)\nB -.- D(fa:fa-face-smile Low Income)\nE -.- F(fa:fa-face-smile Younger) ===|fa:fa-face-smile Most Jovial| D\nE -.-|fa:fa-circle-up joviality| G(Older)\nA ---> H[Expenses] -.-> I[Expense ratio] -.- D\nH -.- J(fa:fa-up-long fa:fa-sack-dollar Recreation)\nC -.-|fa:fa-circle-up joviality| J\nH -.-|fa:fa-circle-up joviality| K(fa:fa-down-long fa:fa-sack-dollar Shelter)\nH -.-|fa:fa-circle-up joviality| S(fa:fa-up-long fa:fa-sack-dollar Food)\nA --> L[Household Size] -.- M(fa:fa-face-smile Single)\nL -.-|fa:fa-circle-up joviality| N(2-3) --- O[Have Kids]\nA ---> P[Education] -.- Q(fa:fa-face-smile Higher Edu) -.- D\nP -.-|fa:fa-circle-up joviality| R(Lower Edu)\nB ----> T((fa:fa-tree-city Plans))\nE ----> T\nH ----> T\nL ----> T\nP ----> T\n\n\n\n\n\n\n\n\nAn overarching theme (urbnthemes) was used to ensure standardised colors and chart styles throughout the study. In general, density plots, dotplots in various configurations, as well as histograms were chosen to visualise the underlying undulations in distribution of variables. Interactive elements were also deployed to enable filtering through the data to uncover trends and differences. Insights from each visualisation have been added after each visual, or added as titles/subtitles in the charts themselves."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "VAST Challenge: Mini-Challenge 2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#splitting-data-into-nodes-and-edges",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#splitting-data-into-nodes-and-edges",
    "title": "Take-home Exercise 2",
    "section": "1.1: Splitting data into nodes and edges",
    "text": "1.1: Splitting data into nodes and edges\n\nmc2_nodes <- as_tibble(mc2$nodes) %>%\n    # reorder dataframe columns\n  select(id, rcvcountry, shpcountry) %>%\n  arrange(id)\n\nmc2_links <- as_tibble(mc2$links) %>%\n  # Extract year from date and save as factor column\n  mutate(year = as_factor(year(arrivaldate))) %>%\n  \n  # Move Source and Target to the front\n  select(source, target, hscode, year, arrivaldate, weightkg, volumeteu, valueofgoods_omu, valueofgoodsusd)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-health",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-health",
    "title": "Take-home Exercise 2",
    "section": "1.2: Data Health",
    "text": "1.2: Data Health\nDiagnostic checks to survey the extent of “incompleteness” of the data\n\nNodesLinks\n\n\nI. Checking for Missing Values:\n\n# Check for columns with missing values\ncolSums(is.na(mc2_nodes))\n\n        id rcvcountry shpcountry \n         0       2909      22359 \n\n\nrcvcountry has 2909 missing values, and shpcountry has 22359 missing values. There are more incomplete records pertaining to origin of the trades. To facilitate analysis, all NA values are replaced by “Unknown”:\n\nmc2_nodes <- mc2_nodes %>%\n  replace(is.na(mc2_nodes), \"Unknown\")\n\nII. Checking for Duplicates:\n\n# Check for duplicated rows\nmc2_nodes[duplicated(mc2_nodes),]\n\n# A tibble: 0 × 3\n# ℹ 3 variables: id <chr>, rcvcountry <chr>, shpcountry <chr>\n\n\nThere are no duplicated entries in the nodes tibble.\nIII. Assigning unique identifier:\nAs the company names are long and may be difficult to use as labels, a numerical universal unique identifier (uuid) is assigned to each company:\n\n# Add unique id for each company\nmc2_nodes$uuid <- seq.int(nrow(mc2_nodes))\n\n\n\nI. Checking for Missing Values:\n\n# Check for columns with missing values\ncolSums(is.na(mc2_links))\n\n          source           target           hscode             year \n               0                0                0                0 \n     arrivaldate         weightkg        volumeteu valueofgoods_omu \n               0                0           520933          5464097 \n valueofgoodsusd \n         3017844 \n\n\nvalueofgoods_omu has too many missing values and will unnecessarily skew aggregated values. While some missing values could be intentional non-reporting of value and thus indicate possible IUU, there are too many to be able to filter out based on this criteria alone. This column will be dropped for the analysis, while the relationship between weightkg, volumeteu and valueofgoodsusd will be looked into more closely to check for possible discrepencies.\nII. Checking for Duplicates:\n\n# Check for duplicated rows\nmc2_links[duplicated(mc2_links),]\n\n# A tibble: 155,291 × 9\n   source    target hscode year  arrivaldate weightkg volumeteu valueofgoods_omu\n   <chr>     <chr>  <chr>  <fct> <chr>          <int>     <dbl>            <dbl>\n 1 French C… Mar d… 851629 2028  2028-03-09        20         0               NA\n 2 French C… Mar d… 851629 2028  2028-06-02       110         0               NA\n 3 French C… -1992  852990 2028  2028-01-02      2830         0               NA\n 4 French C… -1992  852990 2028  2028-01-02      2830         0               NA\n 5 French C… -1992  852990 2028  2028-01-04      2805         0               NA\n 6 French C… -1992  852990 2028  2028-01-11      1895         0               NA\n 7 French C… -1992  852990 2028  2028-01-11      2790         0               NA\n 8 French C… -1992  852990 2028  2028-01-11      2790         0               NA\n 9 French C… -1992  852990 2028  2028-01-18      1895         0               NA\n10 French C… -1992  852990 2028  2028-01-18      2790         0               NA\n# ℹ 155,281 more rows\n# ℹ 1 more variable: valueofgoodsusd <dbl>\n\n\nThere are 155,291 duplicated transactions. As these may be indicative of possible  fishy activity, the duplicated rows are saved separately as mc2_links_dup.\n\n# Save duplicated transactions in a separate tibble\nmc2_links_dup <- mc2_links[duplicated(mc2_links),]\n\n# Leave only unique transactions in original edges tibble\nmc2_links <- unique(mc2_links)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#filtering-and-aggregating-links-variables",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#filtering-and-aggregating-links-variables",
    "title": "Take-home Exercise 2",
    "section": "1.3: Filtering and Aggregating links Variables",
    "text": "1.3: Filtering and Aggregating links Variables\n\nhscode is an internationally used 6-digit system to classify traded goods, documented by International and Governmental bodies such as the World Customs Organisation and United States ITC These different articles/products are coded as subcategories under 99 chapters, with the first 2 digits identifying the chapter that the goods are classified in.\n\n\n\ncode block\ndescribe(mc2_links$hscode)\n\n\nmc2_links$hscode \n       n  missing distinct \n 5309087        0     4761 \n\nlowest : 100119 100191 100199 100210 100290, highest: 970300 970400 970500 970600 999999\n\n\nFrom the code output describing the distribution of hscode numbers above (1 - 99), it is not possible to assume that the first number of each 6-digit hscode represents the chapter number identifying type of traded good, as most official hscodes start with a ‘0’. Products of interest belong to Chapter 3: Fish and Crustaceans, Molluscs and other Aquatic Invertebrates, but it is unclear if hscodes beginning with ‘3’ belong to chapter 3 or chapter 30.\nThe transactions recorded in mc2_links are too granular for visualisation, spread across 7 years (2028-2034). The dataframe is grouped by source, target and year-month, to get the number of transactions per traderoute (source->target) per month each year.\n\n\ncode block\nmc2_links_agg <- mc2_links %>%\n  # Change date to ym format\n  mutate(\n    yearmonth = floor_date(as_date(arrivaldate), \"month\")) %>%\n  # group by traderoute and yearmonth\n  group_by(\n    source, target, year, yearmonth) %>%\n  summarise(\n  # count number of transactions per source-target traderoute per product type per month\n    weight = n(),\n  # Calculate total weight of export per month per traderoute\n    weightkg = sum(weightkg),\n  # Calculate total volume in teu per month per traderoute\n    volumeteu = sum(volumeteu),\n  # Calculate total value in usd per month per traderoute\n    valueusd = sum(valueofgoodsusd)\n  ) %>%\n  filter(\n   # Filter to keep traderoutes with more than one transaction\n    weight >1,\n    # Filter to keep traderoutes between different companies only\n    source != target) %>%\n  arrange(\n    year, yearmonth) %>%\n  ungroup()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#summary-statistics-i.-trends-in-number-of-unique-traderoutes-source-fa-angles-right-target-by-year",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#summary-statistics-i.-trends-in-number-of-unique-traderoutes-source-fa-angles-right-target-by-year",
    "title": "Take-home Exercise 2",
    "section": "Summary Statistics I. Trends in number of unique traderoutes (source  target) by Year",
    "text": "Summary Statistics I. Trends in number of unique traderoutes (source  target) by Year\n\n\ncode block\n# Aggregating number of routes into new dataframe\nroutes_by_year <- mc2_links_agg %>%\n  # Change month to character\n  mutate(yearmonth = format(yearmonth,\"%b\")) %>%\n  # Group by year and month to count frequency of trade routes\n  group_by(year, yearmonth) %>%\n  summarise(nroutes = n(),\n            avgkg = sum(weightkg)/nroutes) %>%\n  # Sort by Year-month\n  arrange(year, \n  # Manually assign ordinal levels to month to retain order\n          factor(yearmonth, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \n                            \"May\", \"Jun\", \"Jul\", \"Aug\", \n                            \"Sep\", \"Oct\", \"Nov\", \"Dec\"))) %>%\n  ungroup()\n\n# Create pivot table to get years as columns \nrby_pivot <- routes_by_year %>%\n# Remove avgkg column \n  select(-avgkg) %>%\n  pivot_wider(names_from = year,\n              values_from = nroutes)\n\n# Manually set order of months in new pivot table\nrby_pivot$yearmonth <- factor(rby_pivot$yearmonth, \n                          levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \n                            \"May\", \"Jun\", \"Jul\", \"Aug\", \n                            \"Sep\", \"Oct\", \"Nov\", \"Dec\"))\n\n# List columns (years) to use in plot \nrby_columns <- colnames(rby_pivot)\n\n# Setting default theme for all plots\nset_urbn_defaults(\"print\", base_family = \"Lato\")\n\n# Specify annotation\nnote1 <- list(\n  xref = 'paper',\n  yref = 'y',\n  x = 0.23,\n  y = 8800,\n  xanchor = 'left',\n  yanchor = 'middle',\n  text = \"Abnormal Increase in Mar 2030\",\n  font = list(size = 12,\n# color-code annotation to match line color\n              color = 'rgb(85,183,72)'),\n  showarrow = FALSE)\n\n# Plot trend lines\nrby <- plot_ly(\n    rby_pivot, \n    x = ~yearmonth\n  ) %>%\n# Add Trendlines by Year\n  add_trace(\n    y = ~rby_pivot[[rby_columns[2]]],\n    type = 'scatter', \n    mode = 'lines+markers', \n    name = \"2028\"\n  ) %>%\n  add_trace(\n    y = ~rby_pivot[[rby_columns[3]]],\n    type = 'scatter', \n    mode = 'lines+markers', \n    name = \"2029\"\n  ) %>%\n  add_trace(\n    y = ~rby_pivot[[rby_columns[4]]],\n    type = 'scatter', \n    mode = 'lines+markers', \n    name = \"2030\"\n  ) %>%\n  add_trace(\n    y = ~rby_pivot[[rby_columns[5]]],\n    type = 'scatter', \n    mode = 'lines+markers', \n    name = \"2031\"\n  ) %>%\n  add_trace(\n    y = ~rby_pivot[[rby_columns[6]]],\n    type = 'scatter', \n    mode = 'lines+markers', \n    name = \"2032\"\n  ) %>%\n  add_trace(\n    y = ~rby_pivot[[rby_columns[7]]],\n    type = 'scatter', \n    mode = 'lines+markers', \n    name = \"2033\"\n  ) %>%\n  add_trace(\n    y = ~rby_pivot[[rby_columns[8]]],\n    type = 'scatter', \n    mode = 'lines+markers', \n    name = \"2034\"\n  ) %>%\n  layout(\n    title = \"Increasing Trend in Traderoute Count in 2029 and 2033\", \n    yaxis = list(title = 'Number of Traderoutes'),\n  # Specify blank title to remove x-axis title\n    xaxis = list(title = \"\"),\n  # Add top margin to prevent title from being truncated\n    margin = list(t = 80),\n  # Add annotation to plot\n    annotations = note1,\n  # Specify plot and background colors\n    plot_bgcolor = \"#F8F3E6\",\n    paper_bgcolor = \"#F8F3E6\"\n  ) \n\nrby"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#ii.-trends-in-average-weight-kg-of-exports-by-year",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#ii.-trends-in-average-weight-kg-of-exports-by-year",
    "title": "Take-home Exercise 2",
    "section": "II. Trends in Average Weight (kg) of Exports by Year",
    "text": "II. Trends in Average Weight (kg) of Exports by Year\n\n\ncode block\n# Create pivot table to get years as columns \nkgby_pivot <- routes_by_year %>%\n# Remove nroutes column \n  select(-nroutes) %>%\n  pivot_wider(names_from = year,\n              values_from = avgkg)\n\n# Manually set order of months in new pivot table\nkgby_pivot$yearmonth <- factor(kgby_pivot$yearmonth, \n                          levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \n                            \"May\", \"Jun\", \"Jul\", \"Aug\", \n                            \"Sep\", \"Oct\", \"Nov\", \"Dec\"))\n\n# List columns (years) to use in plot \nkgby_columns <- colnames(kgby_pivot)\n\n# Plot trend lines\nkgby <- plot_ly(\n    kgby_pivot, \n    x = ~yearmonth\n  ) %>%\n# Add Trendlines by Year\n  add_trace(\n    y = ~kgby_pivot[[kgby_columns[2]]],\n    type = 'scatter', \n    mode = 'lines', \n    name = \"2028\"\n  ) %>%\n  add_trace(\n    y = ~kgby_pivot[[kgby_columns[3]]],\n    type = 'scatter', \n    mode = 'lines', \n    name = \"2029\"\n  ) %>%\n  add_trace(\n    y = ~kgby_pivot[[kgby_columns[4]]],\n    type = 'scatter', \n    mode = 'lines', \n    name = \"2030\"\n  ) %>%\n  add_trace(\n    y = ~kgby_pivot[[kgby_columns[5]]],\n    type = 'scatter', \n    mode = 'lines', \n    name = \"2031\"\n  ) %>%\n  add_trace(\n    y = ~kgby_pivot[[kgby_columns[6]]],\n    type = 'scatter', \n    mode = 'lines', \n    name = \"2032\"\n  ) %>%\n  add_trace(\n    y = ~kgby_pivot[[kgby_columns[7]]],\n    type = 'scatter', \n    mode = 'lines', \n    name = \"2033\"\n  ) %>%\n  add_trace(\n    y = ~kgby_pivot[[kgby_columns[8]]],\n    type = 'scatter', \n    mode = 'lines', \n    name = \"2034\"\n  ) %>%\n  layout(\n    title = \"Fluctuations in Average Trade Weights Across each Year\", \n    yaxis = list(title = 'Average Weight of Trade (kg)'),\n  # Specify blank title to remove x-axis title\n    xaxis = list(title = \"\"),\n  # Add top margin to prevent title from being truncated\n    margin = list(t = 80),\n  # Specify plot and background colors\n    plot_bgcolor = \"#F8F3E6\",\n    paper_bgcolor = \"#F8F3E6\"\n  )\n\nkgby\n\n\n\n\n\n\n\nInsights from LineChart:\n\nAbnormal increase in traderoute count in Mar 2030\n\nNo regularly coinciding ‘peaks’ to suggest seasonal trends (through changes in export weight) across the years\n\nTo determine if there are specific companies or traderoutes accounting for a high percentage of these spikes in trade volume, it would be useful to visualise and compare tradecount and export weight of the highest contributors over the years. This is to investigate if the spikes are attributed to specific companies or traderoutes, or just an overall increase in numbers or trade volume across the board (pointing to increases in demand instead of fishy activity)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#classifying-companies-based-on-trade-records",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#classifying-companies-based-on-trade-records",
    "title": "Take-home Exercise 2",
    "section": "1.4: Classifying Companies based on trade records",
    "text": "1.4: Classifying Companies based on trade records\nCompanies’ trade records are flagged as “suspicious” or “normal” based on the following logic:\n\n\n\n\n\n\n\n\n\nTradecount\nTradedProduct Weight(kg)\nTrade Value ($usd)\nFlag\n\n\n\n\nHigh\n-\n0\nsuspicious\n\n\n-\nHigh\n0\nsuspicious\n\n\nLow\n-\nHigh\nsuspicious\n\n\n\n\n# Aggregate values based on traderoute (source-target)\nmc2_links_class <- mc2_links_agg %>%\n  group_by(source, target, year) %>%\n  summarise(weight = sum(weight),\n            weightkg = sum(weightkg),\n            valueusd = sum(valueusd, na.rm = TRUE)) %>%\n  ungroup()\n\n# Apply ifelse conditions to classify traderecord\nmc2_links_class$tradeRecord <- \n  ifelse(\n    # High tradecount, no recorded trade value\n    mc2_links_class$weight > quantile(mc2_links_class$weight, .75) & mc2_links_class$valueusd == 0 |\n    # High traded product weight, no recorded trade value \n    mc2_links_class$weightkg > quantile(mc2_links_class$weightkg, .75) & mc2_links_class$valueusd == 0 |\n    # High recorded trade value, low tradecount\n    mc2_links_class$valueusd > quantile(mc2_links_class$valueusd, .75) & mc2_links_class$weight < quantile(mc2_links_class$weight, .25), \n    \"suspicious\", \"normal\"\n  )\n\n\n\ncode block\nggplot(mc2_links_class, \n       aes(x = tradeRecord)\n  ) +\n  geom_bar() +\n  labs(\n    title = \"Trade Record Classification: Suspicious Records make up ~10% of total\",\n    x = NULL,\n    y = NULL\n  ) +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n  #Set count annotations above bar\n    vjust = -1\n  ) +\n  theme(\n    axis.line.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#country-level-trade-networks",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#country-level-trade-networks",
    "title": "Take-home Exercise 2",
    "section": "2.1 Country Level Trade Networks",
    "text": "2.1 Country Level Trade Networks\nIn order to get plot a network graph detailing links between countries, new links and nodes dataframes have to be created from existing data.\n\ncountry_links <- mc2_links_agg %>%\n  # Match source company to nodes to get shipping origin country\n  inner_join(mc2_nodes, by = join_by(\"source\" == \"id\")) %>%\n  # Use shpcountry as source, rcvcountry as target for links\n  select(shpcountry, rcvcountry, year, yearmonth, weight, weightkg) %>%\n  filter(shpcountry != rcvcountry)\n\n\n2.1.1: Investigating 2030 data\nFrom the summary statistics outlined in Section 1, there was an observed abnormal increase in tradecount in March 2030. Trade records from 2030 are thus filtered out for investigation:\n\nStep 1: Filter records belonging to year 2030Step 2: Create country nodesStep 3: Create Country Graph object\n\n\n\ncountry_links_2030 <- country_links %>%\n  filter(year == \"2030\") %>%\n  group_by(shpcountry, rcvcountry, yearmonth) %>%\n  summarise(weight = sum(weight),\n            weightkg = sum(weightkg)) %>%\n  filter(shpcountry != rcvcountry) %>%\n  ungroup()\n\n\n\n\ndistinct_shpcountry <- country_links_2030 %>%\n    distinct(shpcountry) %>%\n    mutate(country = shpcountry) %>%\n    select(country)\n\ndistinct_rcvcountry <- country_links_2030 %>%\n    distinct(rcvcountry) %>%\n    mutate(country = rcvcountry) %>%\n    select(country)\n\ncountry_nodes_2030 <- unique(rbind(distinct_shpcountry, distinct_rcvcountry))\n\n\n\n\ncountry_graph_2030 <- tbl_graph(nodes = country_nodes_2030,\n                          edges = country_links_2030, \n                          directed = TRUE)\ncountry_graph_2030\n\n# A tbl_graph: 137 nodes and 4439 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 137 × 1\n  country   \n  <chr>     \n1 -22004    \n2 -22005    \n3 -22007    \n4 Alverossia\n5 Alverovia \n6 Andenovia \n# ℹ 131 more rows\n#\n# A tibble: 4,439 × 5\n   from    to yearmonth  weight weightkg\n  <int> <int> <date>      <int>    <dbl>\n1     1    75 2030-01-01      6   580805\n2     1    75 2030-02-01      9  1732215\n3     1    75 2030-03-01      2   252950\n# ℹ 4,436 more rows\n\n\n\n\n\n\n\ncode block\n# Measure directed out-degree centrality and save as a column\nV(country_graph_2030)$out_degree <- degree(country_graph_2030, mode = \"out\")\n\nset.seed(1234)\ng2030 <- country_graph_2030 %>%\n  activate(edges) %>%\n  mutate(yearmonth = factor(format(yearmonth, \"%b\"),\n                            levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \n                            \"May\", \"Jun\", \"Jul\", \"Aug\", \n                            \"Sep\", \"Oct\", \"Nov\", \"Dec\"))) %>%\n  ggraph(layout = \"linear\",\n         circular = TRUE) +\n  geom_edge_fan(\n    aes(width = weight,\n        color = yearmonth),\n    alpha = .6,\n    arrow = arrow(length = unit(2, 'mm')),\n    show.legend = FALSE\n  ) +\n  scale_edge_width(\n    range = c(0.1,4)\n  ) +\n  geom_node_point(\n    aes(size = out_degree),\n    color = \"grey20\",\n    alpha = .7,\n    show.legend = FALSE\n  ) +\n  geom_node_text(\n    aes(label = ifelse(out_degree > quantile(out_degree, .75), country, \"\")), \n    size = 2,\n    repel = TRUE\n  ) +\n  theme(\n    plot.title = element_text(size = 16,\n                              color = \"grey20\"),\n    legend.title = element_text(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.margin = margin(r = 10,\n                         l = 10)\n  ) +\n  transition_states(yearmonth,\n                    transition_length = 6,\n                    state_length = 4\n  ) +\n  labs(\n    title = \"Country-level Trade Network in {closest_state} 2030\",\n    subtitle = \"Larger nodes have higher Out-Degree Centrality. Countries with the most export routes are identified: \"\n  ) +\n  enter_fade() +\n  exit_fade()\n\ng2030\n\n\n\n\n\n\nInsights from Network Graph:\nThere are no visually fishy patterns identified in March 2030, compared to the other months. The links with thicker widths represent higher number of traderoutes – these have largely remained the same throughout the year. This suggests that the abnormal increase could be detected at a company-level instead of a country-level network analysis. However, more information is first gathered from country-level traderoute activities to sieve out possible flags for IUU activity."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-records-across-the-years",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-records-across-the-years",
    "title": "Take-home Exercise 2",
    "section": "2.1.2: Visualising Records Across the Years",
    "text": "2.1.2: Visualising Records Across the Years\nWhich countries have the heaviest trade activities? Plotting an overall network graph would result in a dense web of links with little analytical value. To detect fishy temporal patterns, countries that have higher traderoute counts are used for the network analysis.\n\nStep 1: Filter countries in top 1000 by Traderoute countStep 2: Create Country Nodes and Graph Object\n\n\n\n# Filtering out countries by weight\ncountry_links_top <- top_n(country_links, 1000, weight)\n\n\n\n\n# Getting unique country names from links data\ndistinct_shpcountry_all <- country_links_top %>%\n    distinct(shpcountry) %>%\n    mutate(country = shpcountry) %>%\n    select(country)\n\ndistinct_rcvcountry_all <- country_links_top %>%\n    distinct(rcvcountry) %>%\n    mutate(country = rcvcountry) %>%\n    select(country)\n\n# Creating nodes list from combined links data\ncountry_nodes <- unique(rbind(distinct_shpcountry_all, distinct_rcvcountry_all))\n\n# Create Graph Object\ncountry_graph <- tbl_graph(nodes = country_nodes,\n                          edges = country_links_top, \n                          directed = TRUE)\ncountry_graph\n\n# A tbl_graph: 24 nodes and 1005 edges\n#\n# A directed acyclic multigraph with 2 components\n#\n# A tibble: 24 × 1\n  country   \n  <chr>     \n1 Marebak   \n2 Rio Isla  \n3 Kondanovia\n4 Alverossia\n5 Merigrad  \n6 Utoporiana\n# ℹ 18 more rows\n#\n# A tibble: 1,005 × 6\n   from    to year  yearmonth  weight weightkg\n  <int> <int> <fct> <date>      <int>    <dbl>\n1     1    17 2028  2028-01-01    435  7607660\n2     1    17 2028  2028-01-01    199  3353530\n3     2    18 2028  2028-01-01    307 24667540\n# ℹ 1,002 more rows\n\n\n\n\n\nI. Out-degree centrality (Visualising top Exports)\n\n\ncode block\n# Measure directed out-degree centrality and save as a column\nV(country_graph)$out_degree <- degree(country_graph, mode = \"out\")\n\nset.seed(1234)\ng_out <- country_graph %>%\n  ggraph(layout = \"kk\"\n  )+\n  geom_edge_fan(\n    aes(width = weight,\n        color = year),\n    alpha = .6,\n    arrow = arrow(length = unit(2, 'mm')),\n    show.legend = FALSE\n  ) +\n  scale_edge_width(\n    range = c(0.1,4)\n  ) +\n  geom_node_point(\n    aes(size = out_degree),\n    color = \"grey20\",\n    show.legend = FALSE\n  ) +\n  geom_node_text(\n    aes(label = ifelse(out_degree > quantile(out_degree, .5), country, \"\")), \n    size = 3,\n    nudge_x = .3\n  ) +\n  theme(\n    plot.title = element_text(size = 16,\n                              color = \"grey20\"),\n    legend.title = element_text(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.margin = margin(r = 10,\n                         l = 10)\n  ) +\n  transition_states(year,\n                    transition_length = 3,\n                    state_length = 4\n  ) +\n  labs(\n    title = \"Country Trade Network for Year {closest_state}\",\n    subtitle = \"Larger nodes have higher Out-Degree Centrality\"\n  ) +\n  enter_fade() +\n  exit_fade()\n\ng_out\n\n\n\n\n\nII. In-degree centrality (Visualising top Imports)\n\n\ncode block\n# Measure directed out-degree centrality and save as a column\nV(country_graph)$in_degree <- degree(country_graph, mode = \"in\")\n\nset.seed(1234)\ng_in <- country_graph %>%\n  ggraph(layout = \"kk\"\n  )+\n  geom_edge_fan(\n    aes(width = weight,\n        color = year),\n    alpha = .6,\n    arrow = arrow(length = unit(2, 'mm')),\n    show.legend = FALSE\n  ) +\n  scale_edge_width(\n    range = c(0.1,4)\n  ) +\n  geom_node_point(\n    aes(size = in_degree),\n    color = \"grey20\",\n    show.legend = FALSE\n  ) +\n  geom_node_text(\n    aes(label = ifelse(in_degree > quantile(in_degree, .5), country, \"\")), \n    size = 3,\n    nudge_x = .4\n  ) +\n  theme(\n    plot.title = element_text(size = 16,\n                              color = \"grey20\"),\n    legend.title = element_text(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.margin = margin(r = 10,\n                         l = 10)\n  ) +\n  transition_states(year,\n                    transition_length = 3,\n                    state_length = 4\n  ) +\n  labs(\n    title = \"Country Trade Network for Year {closest_state}\",\n    subtitle = \"Larger nodes have higher In-Degree Centrality. Countries with the most imports are identified:\"\n  ) +\n  enter_fade() +\n  exit_fade()\n\ng_in\n\n\n\n\n\nIII. Betweenness Centrality\n\n\ncode block\n# Calculate betweenness centrality and save values to new column\ncountry_graph <- country_graph %>%\n  mutate(betweenness = centrality_betweenness())\n\nset.seed(1234)\ng_bc <- country_graph %>%\n  ggraph(\n    layout = \"kk\") +\n  geom_edge_fan(\n    aes(width = weight,\n        color = year),\n    alpha = .6,\n    arrow = arrow(length = unit(2, 'mm')),\n    show.legend = FALSE\n  ) +\n  scale_edge_width(\n    range = c(0.1,4)\n  ) +\n  geom_node_point(\n    aes(size = betweenness),\n    color = \"grey20\"\n  ) +\n  geom_node_text(\n    aes(label = ifelse(betweenness > quantile(betweenness, .5), country, \"\")), \n    size = 3,\n    nudge_y = .3\n  ) +\n  theme(\n    plot.title = element_text(size = 16,\n                              color = \"grey20\"),\n    legend.position = \"bottom\",\n    legend.title = element_text(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.margin = margin(r = 10,\n                         l = 10)\n  ) +\n  transition_states(yearmonth,\n                    transition_length = 5,\n                    state_length = 5\n  ) +\n  labs(\n    title = \"Country Trade Network for Year {closest_state}\",\n    subtitle = \"Utoporiana has the highest Betweenness Centrality,\\npossibly acting as intermediary facilitating traderoutes \"\n  ) +\n  enter_fade() +\n  exit_fade()\n\ng_bc\n\n\n\n\n\nIV. Eigenvector Centrality\n\n\ncode block\n# Calculate eigenvector centrality and save values to new column\nec <- eigen_centrality(country_graph)$vector\nV(country_graph)$eigencentrality <- ec\n\nset.seed(1234)\ng_ec <- country_graph %>%\n  ggraph(layout = \"kk\") +\n  geom_edge_fan(\n    aes(width = weight,\n        color = year),\n    alpha = .6,\n    arrow = arrow(length = unit(2, 'mm')),\n    show.legend = FALSE\n  ) +\n  scale_edge_width(\n    range = c(0.1,4)\n  ) +\n  geom_node_point(\n    aes(size = eigencentrality),\n    color = \"grey30\"\n  ) +\n  geom_node_text(\n    aes(label = ifelse(eigencentrality > quantile(eigencentrality, .5), country, \"\")), \n    size = 3,\n    nudge_y = -.2\n  ) +\n  theme(\n    plot.title = element_text(size = 16,\n                              color = \"grey20\"),\n    legend.position = \"bottom\",\n    legend.title = element_text(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.margin = margin(r = 10,\n                         l = 10)\n  ) +\n  transition_states(yearmonth,\n                    transition_length = 5,\n                    state_length = 5\n  ) +\n  labs(\n    title = \"Country Trade Network for Year {closest_state}\",\n    subtitle = \"Oceanus, Marebak and Coralmarica have higher Eigenvector Centrality, \n    \\nsuggesting high influence within the overall network\"\n  ) +\n  enter_fade() +\n  exit_fade()\n\ng_ec\n\n\n\n\n\nV. PageRank Score\n\n\ncode block\n# Calculate PageRank Score and save values to new column\npr <- page_rank(country_graph)$vector\nV(country_graph)$pagerank <- pr\n\nset.seed(1234)\ng_pr <- country_graph %>%\n  ggraph(layout = \"linear\",\n         circular = TRUE) +\n  geom_edge_arc(\n    aes(width = weight,\n        color = year),\n    alpha = .5,\n    arrow = arrow(length = unit(2, 'mm')),\n    show.legend = FALSE\n  ) +\n  scale_edge_width(\n    range = c(0.1,4)\n  ) +\n  geom_node_point(\n    aes(size = pagerank),\n    color = \"grey30\"\n  ) +\n  geom_node_text(\n    aes(label = country), \n    size = 3,\n    nudge_y = -.06\n  ) +\n  theme(\n    plot.title = element_text(size = 16,\n                              color = \"grey20\"),\n    legend.title = element_text(),\n    legend.position = \"bottom\",\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.margin = margin(r = 10,\n                         l = 10)\n  ) +\n  transition_states(year,\n                    transition_length = 5,\n                    state_length = 5\n  ) +\n  labs(\n    title = \"Country Trade Network for {closest_state}\",\n    subtitle = \"Oceanus and Utoporiana have highest connectedness to other countries, possibly acting as trade hubs\"\n  ) +\n  enter_fade() +\n  exit_fade()\n\ng_pr\n\n\n\n\n\n\n2.1.2: Comparing Distribution of Centrality Measures\nData Preparation:\n\n\ncode block\n# Retrieve Centrality measures from nodes\ncountry_centrality <- data.frame(\n  OutDegree = V(country_graph)$out_degree,\n  InDegree = V(country_graph)$in_degree,\n  Betweenness_centrality = V(country_graph)$betweenness,\n  Eigenvector_centrality = V(country_graph)$eigencentrality,\n  PageRank_score = V(country_graph)$pagerank\n)\n\n# Create function to transform variables to same scale (min-max normalisation)\ntransform_variable <- function(x) {\n  (x - min(x)) / (max(x) - min(x))\n}\n\n# function to apply scaling across all variables in a dataframe\ntransform_dataframe <- function(df) {\n  df %>%\n    mutate(across(where(is.numeric) & !matches(\"uuid\"), transform_variable))\n}\n\n# Apply function and save to new dataframe\ncountry_centrality_scaled <- transform_dataframe(country_centrality)\n\n# Pivot longer to get centrality measures as factors\ncountry_centrality_long <- gather(country_centrality_scaled, key = \"CentralityMeasure\", value = \"CentralityScore\")\n\n\n\n\ncode block\n# Density ridges to show distribution of data\nggplot(\n    country_centrality_long, \n    aes(x = CentralityScore, \n        y = CentralityMeasure, \n        fill = CentralityMeasure,\n        color = CentralityMeasure)\n  ) +\n  geom_density_ridges(\n    alpha = .6,\n    scale = 3\n  ) +\n  geom_rug() +\n  labs(\n    title = \"Similar Distribution of Values Across Centrality Measures\",\n    subtitle = \"Right-skewed distribution with presence of outliers\",\n    x = \"Centrality Score\",\n    y = \"Centrality Measure\"\n  ) +\n  theme(\n    legend.position = \"none\",\n    axis.title = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n\n\n\n\n\nInsights from Network Graphs: The differences in scores across centrality measures for each country suggests that there are various clusters of networks within the larger trade network, consisting of key Importers, Exporters, Intermediaries/Facilitators and Trade Hubs. Marebak, for instance, has a higher Out-Degree and Eigenvector Centrality value, but lower scores on other measures – this suggests that the country is a net exporter, and may have strong ties to important trading countries."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#company-level-trade-networks-fishy-countries-and-traderoutes",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#company-level-trade-networks-fishy-countries-and-traderoutes",
    "title": "Take-home Exercise 2",
    "section": "2.2 Company Level Trade Networks: fishy Countries and Traderoutes",
    "text": "2.2 Company Level Trade Networks: fishy Countries and Traderoutes\nNetwork analysis at a company level requires extra filters, to narrow down the scope of the graphs: - Retain companies from countries with high centrality values (key players in the network) - Retain companies that have been flagged as ‘suspicious’ from traderoute data\n\n\n\n\n%%{\n  init: {\n    'theme': 'base',\n    'themeVariables': {\n      'primaryColor': '#93c7c2',\n      'primaryTextColor': '#fff',\n      'primaryBorderColor': '#3d7670',\n      'lineColor': '#3d7670',\n      'secondaryColor': '#3d7670',\n      'tertiaryColor': '#fff'\n    }\n  }\n}%%\n\nflowchart LR\n    A{fa:fa-fish-fins \\nOverall\\nnetwork} ==> B((Country\\nLevel))\n    A ==> C((Company\\nLevel))\n    B -.->|filter| C\n    C -.- D{fa:fa-calendar-days \\nTime} -->|patterns?| E(trade frequency)\n    B -.- D -->|patterns?| F(trade weight)\n    D -->|patterns?| G(trade value\\n$usd)\n\n\n\n\n\n\n\n\n\n\nStep 1: Create a dataframe containing only countries with high (> 75th Percentile) centrality valuesStep 2: Filter out nodes from country_filterStep 3: Filter out ‘suspicious’ nodes and aggregate the frequency of traderoutes in filtered countries\n\n\n\n# Extract centrality metrics from country graph and save into new data frame\ncountry_filter <- data.frame(\n  country = V(country_graph)$country,\n  OutDegree = V(country_graph)$out_degree,\n  InDegree = V(country_graph)$in_degree,\n  Betweenness_centrality = V(country_graph)$betweenness,\n  Eigenvector_centrality = V(country_graph)$eigencentrality,\n  PageRank_score = V(country_graph)$pagerank\n)\n\n# Define function to filter each variable by percentile\npercentile_filter <- function(x) {\n  x >= quantile(x, .75)\n}\n\n# Filter the dataframe to retrieve list of countries \ncountry_filter <- country_filter %>%\n  filter(percentile_filter(OutDegree) |\n           percentile_filter(InDegree) |\n           percentile_filter(Betweenness_centrality) |\n           percentile_filter(Eigenvector_centrality) |\n           percentile_filter(PageRank_score)\n          )\n\n\n\n\nmc2_nodes_filtered <- mc2_nodes %>%\n  filter(shpcountry %in% country_filter$country | \n           rcvcountry %in% country_filter$country)\n\n\n\n\nroutes_by_count <- mc2_links_class %>%\n  # Ensure that companies in the dataframe are from top trading countries, or flagged as suspicious\n  filter(\n    source %in% mc2_nodes_filtered$id |\n    target %in% mc2_nodes_filtered$id |\n    tradeRecord == \"suspicious\"\n  ) %>%\n  group_by(source, target) %>%\n  filter(source != target) %>%\n  # Get total tradecount of traderoute\n  summarise(count = sum(weight)) %>%\n  # Arrange in descending order to get top routes first\n  arrange(desc(count)) %>%\nungroup()\n\ndatatable(head(routes_by_count,10))\n\n\n\n\n\n\n\n\n\n\nInsights from Table:\nThere seems to be many common source and target companies appearing across various traderoutes. This suggests that IUU fishing activity could be detected through visualising this information as a network and using centrality measures to determine key players. Since companies caught fishing illegally shut down but often start up again under a different company, identifying  fishy companies by comparing their trading partners over the years could help determine if they are engaging in illegal acts.\n\n\n2.2.1: What are abnormally large tradecounts?\n\n\ncode block\n# Create separate dataframes for plotting \nsource_count <- routes_by_count %>%\n  group_by(source) %>%\n  summarise(sourcecount = n()) %>%\n  arrange(desc(sourcecount)) %>%\n  ungroup()\n \ntarget_count <- routes_by_count %>%\n  group_by(target) %>%\n  summarise(targetcount = n()) %>%\n  arrange(desc(targetcount)) %>%\n  ungroup()\n\n\n\n\ncode block\n# Calculate median, percentile and num distinct source and target to use as annotations\nmedsource <- median(source_count$sourcecount)\nqsource <- quantile(source_count$sourcecount, probs = .95)\ndistinctsource <- n_distinct(routes_by_count$source)\n\nmedtarget <- median(target_count$targetcount)\nqtarget <- quantile(target_count$targetcount, probs = .95)\ndistincttarget <- n_distinct(routes_by_count$target)\n\n# Plot source raincloud plot\nsource <- ggplot(source_count, \n       aes(1, \n           y = sourcecount)\n  ) +\n  geom_rain(\n    alpha = .7,\n    boxplot.args = list(\n              color = \"grey20\",\n              fill = \"salmon\",\n              outlier.shape = NA),\n    violin.args = list(alpha = .6,\n                       fill = \"salmon\")\n  ) +\n  scale_y_continuous(\n    limits = c(0, 1500),\n    breaks = scales::pretty_breaks(n = 5)\n  ) +\n# Add annotation for median and 95th percentile value\n  annotate(\n    geom = \"text\",\n    x = 1.3,\n    y = 500,\n    label = paste0(\"Median count: \", medsource, \"  |  \",\n                   \"95th Percentile count: \", qsource, \"  |  \",\n                   \"No. distinct:\", distinctsource)\n  ) +\n  labs(\n    title = \"I. Distribution of traderoute counts per Source Company\"\n  ) + \n  theme(\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  ) + \n# Flip orientation to get horizontal plots\n  coord_flip() \n\n# Plot Target raincloud plot\ntarget <- ggplot(target_count, \n       aes(1, \n           y = targetcount)\n  ) +\n  geom_rain(\n    alpha = .7,\n    boxplot.args = list(\n              color = \"grey20\",\n              fill = \"#1696d2\",\n              outlier.shape = NA),\n    violin.args = list(alpha = .6,\n                       fill = \"#1696d2\")\n  ) +\n  scale_y_continuous(\n    limits = c(0, 1500),\n    breaks = scales::pretty_breaks(n = 5)\n  ) +\n  annotate(\n    geom = \"text\",\n    x = 1.3,\n    y = 500,\n    label = paste0(\"Median count: \", medtarget, \"  |  \",\n                   \"95th Percentile count: \", qtarget, \"  |  \",\n                   \"No. distinct:\", distincttarget)\n  ) +\n   annotate(\n    geom = \"text\",\n    x = 0.9,\n    y = 1200,\n    label = \"Presence of many Outliers with high traderoute counts\"\n  ) +\n  labs(\n    title = \"II. Distribution of traderoute counts per Target Company\"\n  ) + \n  theme(\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  ) + \n  coord_flip() \n\ncountpatch <- (source / target) +\n              plot_annotation(title = \"Highly Right-skewed Distributions of Traderoute Counts\",\n                              theme = theme(plot.title = element_text(size = 16)))\ncountpatch & theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\n\nInsights from Distribution of traderoute counts:\nThe density raincloud plots of traderoute counts reveal the presence of outliers with values far above the median and 95th percentile value. This suggets that abnormal fishing activity could be investigated by filtering out traderoutes with very high frequency. Investigating by using countries as filters, as well as companies beyond the top 95th percentile of traderoutes could thus give some insight into IUU fishing networks."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#who-are-the-top-players-in-the-network-by-tradecount",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#who-are-the-top-players-in-the-network-by-tradecount",
    "title": "Take-home Exercise 2",
    "section": "2.3: Who are the Top players in the Network by Tradecount?",
    "text": "2.3: Who are the Top players in the Network by Tradecount?\n\nStep 1: Filter links by Country and Yearly FrequencyStep 2: Ensure that id in nodes dataframe are = source and target in links dataframeStep 3: Create graph object\n\n\n\nlinks_sorted <- mc2_links_class %>%\n  # Only keep companies in suspicious countries or with suspicious trade records\n  filter(\n    source %in% mc2_nodes_filtered$id |\n    target %in% mc2_nodes_filtered$id |\n    tradeRecord == \"suspicious\") %>%\n  \n  # Group and calculate total number of tradecounts per year\n  group_by(source, target, year) %>%\n  summarise(weight = sum(weight)) %>%\n  \n  filter(source != target) %>%\n  \n  # Arrange data in order of year and descending order of tradecounts to get top\n  arrange(year, desc(weight)) %>%\n  ungroup()\n  \n# Filter out top 30 per year\ntop_30 <- links_sorted %>%\n  group_by(year) %>%\n  # Get top 30 companies by weight\n  top_n(30, weight) %>%\n  ungroup()\n\n\n\n\n# Create nodes dataframe for top 10 exporters from oceanus\nttdistinct_source <- top_30 %>%\n  distinct(source)\n\nttdistinct_target <- top_30 %>%\n  distinct(target)\n\n# Select only overlapping nodes and distinct companies from links\nttnodes_source <- inner_join(\n    ttdistinct_source, mc2_nodes,\n    by = c(\"source\" = \"id\")) %>%\n  mutate(id = source)\n\nttnodes_target <- inner_join(\n    ttdistinct_target, mc2_nodes,\n    by = c(\"target\" = \"id\")) %>%\n  mutate(id = target)\n\n# Create new nodes data by combining filtered dataframes\ntop_30_nodes <- bind_rows(ttnodes_source, ttnodes_target) %>%\n  select(id, uuid, shpcountry, rcvcountry) %>%\n  distinct()\n\n\n\n\ntop_30_graph <- tbl_graph(nodes = top_30_nodes,\n                          edges = top_30, \n                          directed = TRUE)\ntop_30_graph\n\n# A tbl_graph: 85 nodes and 211 edges\n#\n# A directed acyclic multigraph with 14 components\n#\n# A tibble: 85 × 4\n  id                                     uuid shpcountry rcvcountry  \n  <chr>                                 <int> <chr>      <chr>       \n1 Coastal Cruisers Pic Shipping         24448 Marebak    Oceanus     \n2 Marine Masterminds Dry dock           28774 Marebak    Coralmarica \n3 Mar y Luna Sagl                       28702 Marebak    Coralmarica \n4 Ianira Starfish Sagl Import           26454 Rio Isla   Sol y Oceana\n5 Orange River   GmbH & Co. KG Shipping 30325 Marebak    Oceanus     \n6 Olas del Sur Sea                      30295 Rio Isla   Coralmarica \n# ℹ 79 more rows\n#\n# A tibble: 211 × 4\n   from    to year  weight\n  <int> <int> <fct>  <int>\n1     1    46 2028    5816\n2     2    47 2028    5509\n3     3    30 2028    4822\n# ℹ 208 more rows\n\n\n\n\n\n\n\ncode block\n# Measure directed out-degree centrality and save as a column\nV(top_30_graph)$out_degree <- degree(top_30_graph, mode = \"out\")\n\nset.seed(1234)\nttg_out <- ggraph(top_30_graph, \n    layout = \"kk\"\n  ) +\n  geom_edge_link(\n    aes(width = weight,\n        color = year), \n    alpha = .6,\n    arrow = arrow(length = unit(2, 'mm')),\n    show.legend = FALSE\n  ) +\n  scale_edge_width(\n    range = c(0.1, 4)\n  ) +\n  geom_node_point(\n    color = \"grey30\",\n    aes(size = out_degree)\n  ) +\n  geom_node_text(\n    aes(label = ifelse(out_degree > quantile(out_degree, .75), uuid, \"\")), \n    size = 2,\n    nudge_x = .5,\n    nudge_y = -.2\n  ) +\n  guides(\n    color = \"none\"\n  ) +\n  theme(\n    plot.title = element_text(size = 16,\n                              colour = \"#3A3B60\"),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(),\n    legend.box = \"vertical\",\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.margin = margin(r = 10,\n                         l = 10)\n  ) +\n  transition_states(year,\n                    transition_length = 4,\n                    state_length = 5\n  ) +\n  labs(\n    title = 'Year: {closest_state}',\n    subtitle = \"Top Exporters by Degree Centrality >> \\nLarger nodes represent higher out-degree Centrality, thicker links show higher frequency of trade\"\n  ) +\n  enter_grow() +\n  exit_fade()\n\nttg_out\n\n\n\n\n\nIn the plot above, the relative sizes of the nodes are based on Out-degree centrality, where larger nodes have a higher number of out-going links. This enables us to visually determine companies with higher number of exporting links over time. Subsequent plots using In-degree centrality and betweenness centrality instead are shown below:\n\n\ncode block\n# Measure directed out-degree centrality and save as a column\nV(top_30_graph)$in_degree <- degree(top_30_graph, mode = \"in\")\n\nset.seed(1234)\nttg_in <- ggraph(top_30_graph, \n    layout = \"kk\"\n  ) +\n  geom_edge_fan(\n    aes(width = weight,\n        color = year), \n    alpha = .6,\n    arrow = arrow(length = unit(2, 'mm')),\n    show.legend = FALSE\n  ) +\n  scale_edge_width(\n    range = c(0.1, 4)\n  ) +\n  geom_node_point(\n    color = \"grey30\",\n    aes(size = in_degree)\n  ) +\n  geom_node_text(\n    aes(label = ifelse(in_degree > quantile(in_degree, .75), uuid, \"\")), \n    size = 2,\n    nudge_y = -.3\n  ) +\n  guides(\n    color = \"none\"\n  ) +\n  theme(\n    plot.title = element_text(size = 16,\n                              colour = \"#3A3B60\"),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(),\n    legend.box = \"vertical\",\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.margin = margin(r = 10,\n                         l = 10)\n  ) +\n  transition_states(year,\n                    transition_length = 3,\n                    state_length = 2\n  ) +\n  labs(\n    title = 'Year: {closest_state}',\n    subtitle = \"Expanding trade network through the years\"\n  ) +\n  enter_grow() +\n  exit_fade()\n\nttg_in\n\n\n\n\n\n\n\ncode block\n# Calculate betweenness centrality and save values to new column\ntop_30_graph <- top_30_graph %>%\n  mutate(betweenness = centrality_betweenness())\n\nset.seed(1234)\nttg2 <- \n  ggraph(top_30_graph,\n         layout = \"kk\"\n  ) +\n  geom_edge_link(\n    aes(width = weight,\n        color = year), \n        alpha = .6,\n    arrow = arrow(length = unit(2, 'mm')),\n    show.legend = FALSE\n  ) +\n  scale_edge_width(\n    range = c(0.1, 4)\n  ) +\n  geom_node_point(\n    color = \"grey30\",\n    aes(size = betweenness)\n  ) +\n  geom_node_text(\n  # Only show labels of top 75th percentile by betweenness centrality\n    aes(label = ifelse(betweenness > quantile(betweenness, .75), uuid, \"\")),\n    nudge_x = .7,\n    size = 3\n  ) +\n  theme(\n    plot.title = element_text(size = 16,\n                              color = \"#3A3B60\"),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.margin = margin(r = 10,\n                         l = 10)\n  ) +\n  transition_states(year,\n                    transition_length = 3,\n                    state_length = 2\n  ) +\n  labs(\n    title = \"Year: {closest_state}\",\n    subtitle = \"Top Exporters by Betweenness Centrality >> \\nLarger nodes represent higher out-degree Centrality, thicker links show higher frequency of trade\"\n  ) +\n  enter_grow() +\n  exit_fade()\n\nttg2\n\n\n\n\n\n\n\ncode block\n# Calculate eigenvector centrality and save values to new column\nec <- eigen_centrality(top_30_graph)$vector\nV(top_30_graph)$eigencentrality <- ec\n\nset.seed(1234)\nttg3 <- \n  ggraph(top_30_graph,\n         layout = \"kk\"\n  ) +\n  geom_edge_link(\n    aes(width = weight,\n        color = year), \n        alpha = .6,\n    arrow = arrow(length = unit(2, 'mm')),\n    show.legend = FALSE\n  ) +\n  scale_edge_width(\n    range = c(0.1, 4)\n  ) +\n  geom_node_point(\n    color = \"grey30\",\n    aes(size = eigencentrality)\n  ) +\n  geom_node_text(\n  # Only show labels of top 75th percentile by betweenness centrality\n    aes(label = ifelse(eigencentrality > quantile(eigencentrality, .75), uuid, \"\")),\n    nudge_x = -.5,\n    nudge_y = -.2,\n    size = 2\n  ) +\n  theme(\n    plot.title = element_text(size = 16,\n                              color = \"#3A3B60\"),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.margin = margin(r = 10,\n                         l = 10)\n  ) +\n  transition_states(year,\n                    transition_length = 3,\n                    state_length = 2\n  ) +\n  labs(\n    title = \"Year: {closest_state}\",\n    subtitle = \"Company Network with Eigenvector Centrality >> \\nLarger nodes represent higher Eigenvector Centrality, thicker links show higher frequency of trade\"\n  ) +\n  enter_grow() +\n  exit_fade()\n\nttg3\n\n\n\n\n\n\n\ncode block\n# Calculate pageRank Score and save values to new column\npr <- page_rank(top_30_graph)$vector\nV(top_30_graph)$pagerank <- pr\n\nset.seed(1234)\nttg4 <- \n  ggraph(top_30_graph,\n         layout = \"kk\"\n  ) +\n  geom_edge_link(\n    aes(width = weight,\n        color = year), \n        alpha = .6,\n    arrow = arrow(length = unit(2, 'mm')),\n    show.legend = FALSE\n  ) +\n  scale_edge_width(\n    range = c(0.1, 4)\n  ) +\n  geom_node_point(\n    color = \"grey30\",\n    aes(size = pagerank)\n  ) +\n  geom_node_text(\n  # Only show labels of top 75th percentile by betweenness centrality\n    aes(label = ifelse(pagerank > quantile(pagerank, .75), uuid, \"\")),\n    nudge_x = -.5,\n    nudge_y = -.2,\n    size = 2\n  ) +\n  theme(\n    plot.title = element_text(size = 16,\n                              color = \"#3A3B60\"),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"),\n    plot.margin = margin(r = 10,\n                         l = 10)\n  ) +\n  transition_states(year,\n                    transition_length = 3,\n                    state_length = 2\n  ) +\n  labs(\n    title = \"Year: {closest_state}\",\n    subtitle = \"Company Network with PageRank Score >> \\nLarger nodes represent higher Scores, thicker links show higher frequency of trade\"\n  ) +\n  enter_grow() +\n  exit_fade()\n\nttg4"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-distribution-of-centrality-measures",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-distribution-of-centrality-measures",
    "title": "Take-home Exercise 2",
    "section": "2.3.1 : Visualising distribution of Centrality Measures",
    "text": "2.3.1 : Visualising distribution of Centrality Measures\nData Preparation:\n\nCreate dataframe with centrality measuresCheck that total degree of nodes = in + out degree\n\n\n\n# Retrieve Centrality measures from nodes\ntop30_centrality <- data.frame(\n  company = V(top_30_graph)$id,\n  uuid = V(top_30_graph)$uuid,\n  OutDegree = V(top_30_graph)$out_degree,\n  InDegree = V(top_30_graph)$in_degree,\n  Betweenness_centrality = V(top_30_graph)$betweenness,\n  Eigenvector_centrality = V(top_30_graph)$eigencentrality,\n  PageRank_score = V(top_30_graph)$pagerank\n)\n\n\n\n\nall(degree(top_30_graph) == top30_centrality$OutDegree + top30_centrality$InDegree)\n\n[1] TRUE\n\n\n\n\n\n\n\ncode block\nggplot(top30_centrality,\n       aes(x = InDegree,\n           y = OutDegree,\n           label = uuid)\n  ) +  \n  geom_abline(intercept = 0, \n              slope = 1,\n              color = \"grey40\",\n              alpha = .6\n  ) +\n  ylim(0, 25) +\n  xlim(0, 25) +\n  geom_point(\n    aes(color = ifelse(OutDegree == 0 & InDegree == 0, \"grey40\",\n                       ifelse(OutDegree > 0 & InDegree <= 0,\"#1696d2\", \"#fdbf11\")\n                       )\n        ),\n    show.legend = FALSE\n  ) +\n  geom_label_repel(aes(label = uuid),\n                  box.padding = 0.35\n  ) +\n  annotate(\n    geom = \"text\",\n    x = 8,\n    y = 20,\n    label = \"Net Exporters\",\n    size = 8,\n    color = \"grey70\"\n  ) +\n  annotate(\n    geom = \"text\",\n    x = 20,\n    y = 8,\n    label = \"Net Importers\",\n    size = 8,\n    color = \"grey70\"\n  ) +\n  labs(\n    title = \"Distribution of Net Degree Centrality\"\n  ) +\n  theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\n\n\ncode block\n# Apply function to normalize values in dataframe\ntop30_centrality_scaled <- top30_centrality %>%\n    select(OutDegree, InDegree, Betweenness_centrality, Eigenvector_centrality, PageRank_score)\n    \ntop30_centrality_scaled <- transform_dataframe(top30_centrality_scaled)\n\n\n\n\ncode block\n# Density ridges to show distribution of data\ninout_centrality <- top30_centrality_scaled %>%\n  select(InDegree, OutDegree)\n\ninout_centrality_long <- gather(inout_centrality, key = \"CentralityMeasure\", value = \"CentralityScore\")\n\nridge1 <- \n\n  ggplot(inout_centrality_long,\n    aes(x = CentralityMeasure,\n        y = CentralityScore, \n        fill = CentralityMeasure,\n        color = CentralityMeasure)\n  ) +\n  geom_rain(\n    alpha = .6\n  ) +\n  annotate(\n    geom = \"text\",\n    x = 1.5,\n    y = .5,\n    label = \"Presence of smaller peaks in distibution suggestive of outliers\"\n  ) +\n  scale_fill_manual(\n    values = c(\"#98cf90\",\"salmon\")\n  ) +\n  scale_color_manual(\n    values = c(\"#98cf90\",\"salmon\")\n  ) +\n  labs(\n    title = \"I. Right-skewed Distributions of In and Out Degree Centrality\",\n    x = \"Centrality Score\",\n    y = \"Centrality Measure\"\n  ) +\n  theme(\n    legend.position = \"none\",\n    axis.title = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  ) +\n  coord_flip()\n\nbep_centrality <- top30_centrality_scaled %>%\n  select(Betweenness_centrality, Eigenvector_centrality, PageRank_score)\n\nbep_centrality_long <- gather(bep_centrality, key = \"CentralityMeasure\", value = \"CentralityScore\")\n\nridge2 <- ggplot(\n  bep_centrality_long,\n    aes(x= CentralityMeasure,\n        y = CentralityScore,\n        fill = CentralityMeasure,\n        color = CentralityMeasure)\n  ) +\n  geom_rain(\n    alpha = .6\n  ) +\n  labs(\n    title = \"II. Highly skewed Distributions Indicate Potential Key Network Players\",\n    x = \"Centrality Score\",\n    y = \"Centrality Measure\"\n  ) +\n  theme(\n    legend.position = \"none\",\n    axis.title = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  ) +\n  coord_flip()\n\nridgepatch <- ridge1 / ridge2\nridgepatch & theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\n\nInsights from Network Graphs and Centrality Measure Distributions:\n\nFrom the network graphs, we can see that key nodes are unchanged for the entire time period (2028-2034), but heavier traderoutes (identified by thicker links) seem to vary from key nodes through the years. This could be indicative of IUU activity, with fishy trading partners. The distribution graphs show intensely skewed distributions of centrality measures. This enables us to classify companies based on their relative centrality in the network.\n\nComparing the distribution of centrality measures, there are significantly more nodes with higher in/out degree but lower betweenness centrality. This suggests that there are clusters of nodes in the network, and that these nodes are well-connected within their clusters but not to the rest of the nodes in other clusters. This could be indicative of various smaller IUU networks operating within the overall network."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#categorizing-fa-fish-fishy-companies",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#categorizing-fa-fish-fishy-companies",
    "title": "Take-home Exercise 2",
    "section": "3: Categorizing  fishy companies",
    "text": "3: Categorizing  fishy companies\nThe network analysis metrics in section 2 are used to derive attributes of each fishy company, classifying them according to the following logic:\n\n\n\n\n\n\n\n\n\n\n\nCentrality Measure /Node Category\nIn Degree\nOut Degree\nBetweennessCentrality\nEigenvectorCentrality\nPageRankScore\n\n\n\n\nCentral Broker\n-\n-\nHigh\nHigh\nHigh\n\n\nKey Importer\nHigh\nLow\n-\n-\nHigh\n\n\nKey Exporter\nLow\nHigh\nHigh\n-\n-\n\n\nCluster Broker\nHigh\n-\nLow\nLow\n-\n\n\nNetImporter\nHigh\nLow\nLow\nLow\nLow\n\n\nNetExporter\nLow\nHigh\nLow\nLow\nLow"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#net-exporters-or-importers",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#net-exporters-or-importers",
    "title": "Take-home Exercise 2",
    "section": "3.1: Net Exporters or Importers?",
    "text": "3.1: Net Exporters or Importers?\nSince net Degree Centrality has been established as the sum of In and Out Degree for each node in Section 2.3.1, the same logic will be applied to companies to classify them as Net Importers (higher In-degree) or Net Exporters (higher Out-degree):\n\ntop30_centrality$netDegree <- \n  ifelse(top30_centrality$OutDegree == 0 & top30_centrality$InDegree == 0, \"neutral\",\n  ifelse(top30_centrality$OutDegree > 0 & top30_centrality$InDegree <= 0,\"netExporter\", \"netImporter\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#fa-fish-a-fishy-network",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#fa-fish-a-fishy-network",
    "title": "Take-home Exercise 2",
    "section": "3.2:  A Fishy Network",
    "text": "3.2:  A Fishy Network\n\nClassifying Nodes by Centrality MeasuresCreating visNetwork graph object\n\n\nLabels are assigned to the companies Centrality Measures, based on the distribution of values as visualised in Section 2.3.1. These are stored under a new column variable, ‘group’, which will be used in the plotting of a visNetwork graph:\n\ntop30_centrality <- top30_centrality %>%\n  mutate(\n    group = ifelse(Betweenness_centrality >0 & \n                  Eigenvector_centrality > quantile(Eigenvector_centrality, .75) &\n                  PageRank_score > quantile(PageRank_score, .75), \"centralBroker\",\n            ifelse(netDegree == \"netImporter\" & \n                  PageRank_score > quantile(PageRank_score, .75), \"keyImporter\",\n            ifelse(netDegree == \"netExmporter\" &\n                   Betweenness_centrality > quantile(Betweenness_centrality, .75), \"keyExporter\", \n            ifelse((InDegree > quantile(InDegree, .75) | \n                     OutDegree > quantile(OutDegree, .75)) &\n                  (Betweenness_centrality < quantile(Betweenness_centrality, .5)|\n                  Eigenvector_centrality < quantile(Eigenvector_centrality, .5)), \"clusterBroker\",\n            ifelse(netDegree == \"netImporter\", \"netImporter\", \"netExporter\"))))))\n\n\n\n\n# Combine edges and nodes to a graph dataframe\nvis_links <- top_30 %>% \n  rename(\n  # visNetwork edges need to be renamed in order to parse through as directed links\n    \"from\" = \"source\", \n    \"to\" = \"target\") %>%\n  select(from, to, year, weight)\n\n# Renaming company name variable to 'id' for use as a filter in the network graph\nvis_nodes <- top30_centrality %>%\n  rename(\"id\" = \"company\")\n\n\n\n\n\n\ncode block\nvisNetwork(\n    vis_nodes, \n    vis_links,\n    height = \"500px\", \n    width = \"100%\"\n  ) %>%\n  visIgraphLayout(\n    layout = \"layout_with_kk\"\n  ) %>%\n  visGroups(\n    # Add icon to key Player to identify it in the graph\n    groupname = \"centralBroker\", \n    shape = \"icon\", \n    # Make icon larger and of a darker color so that it stands out\n    icon = list(code = \"f714\", size = 75, color = \"grey20\")\n  ) %>%\n  addFontAwesome() %>%\n  # Color nodes by group\n  visLegend() %>%\n  visEdges(\n    value = \"weight\",\n    arrows = \"to\"\n  ) %>%\n  visOptions(\n  # Specify additional Interactive Elements\n    highlightNearest = list(enabled = T, degree = 2, hover = T),\n  # Add drop-down menu to filter by company name\n    nodesIdSelection = TRUE,\n  # Add drop-down menu to filter by category\n    selectedBy = \"group\",\n    collapse = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "VAST Challenge: Mini-Challenge 3"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-r-packages",
    "title": "Take-home Exercise 3",
    "section": "1.1: Loading R Packages",
    "text": "1.1: Loading R Packages\n\n\ncode block\npacman::p_load(jsonlite, tidyverse, DT, lubridate, Hmisc, \n               urbnthemes,visNetwork, tidygraph, ggraph, \n               ggiraph, igraph, scales, ggplot2, \n               gganimate, ggstatsplot, ggrain, ggridges, \n               graphlayouts, plotly, patchwork, kableExtra, \n               ggpubr, ggrepel, ggforce, tidytext,\n               tm, wordcloud2, forcats, skimr)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-the-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-the-data",
    "title": "Take-home Exercise 3",
    "section": "1.2: Loading the Data",
    "text": "1.2: Loading the Data\nUse jsonlite package to read .json files\n\nmc3 <- fromJSON(\"data/MC3.json\")\n\nmc3 data consists of undirected graph data, with links and nodes. These are stored as lists instead of vector columns. To transform this into a dataframe, each column is mutated into a character data type using mutate() and as.character() methods.\n\n\ncode block\nmc3_links <- as_tibble(mc3$links) %>%\n  distinct() %>%\n  # Change all variable types to character to create dataframe\n  mutate(source = as.character(source),\n         target = as.character(target),\n         type = as.character(type)) %>%\n  group_by(source, target, type) %>%\n  summarise(weights = n()) %>%\n  filter(source != target) %>%\n  select(-weights) %>%\n  ungroup\n\nmc3_nodes <- as_tibble(mc3$nodes) %>%\n  mutate(id = as.character(id), \n         type = as.character(type), \n         country = as.character(country), \n         product_services = as.character(product_services),\n  # Convert to character first to unlist, then revert to numeric form \n         revenue_omu = as.numeric(as.character(revenue_omu))) %>%\n  # Reorganize columns \n  select(id, country, type, revenue_omu, product_services)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-health",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-health",
    "title": "Take-home Exercise 3",
    "section": "1.3: Data Health",
    "text": "1.3: Data Health\n\nNodesLinks\n\n\nI. Checking for Missing Values:\n\n# Check for columns with missing values\ncolSums(is.na(mc3_nodes))\n\n              id          country             type      revenue_omu \n               0                0                0            21515 \nproduct_services \n               0 \n\n\nThere are 21,515 missing values from the revenue_omu column.\nII. Checking for Duplicates\n\nmc3_nodes[duplicated(mc3_nodes),]\n\n# A tibble: 2,595 × 5\n   id                              country type    revenue_omu product_services\n   <chr>                           <chr>   <chr>         <dbl> <chr>           \n 1 Smith Ltd                       ZH      Company          NA Unknown         \n 2 Williams LLC                    ZH      Company          NA Unknown         \n 3 Garcia Inc                      ZH      Company          NA Unknown         \n 4 Walker and Sons                 ZH      Company          NA Unknown         \n 5 Walker and Sons                 ZH      Company          NA Unknown         \n 6 Smith LLC                       ZH      Company          NA Unknown         \n 7 Smith Ltd                       ZH      Company          NA Unknown         \n 8 Romero Inc                      ZH      Company          NA Unknown         \n 9 Niger River   Marine life       Oceanus Company          NA Unknown         \n10 Coastal Crusaders AS Industrial Oceanus Company          NA Unknown         \n# ℹ 2,585 more rows\n\n\nThere are 2,595 duplicated entries. These are removed so as to prevent skewing of aggregate figures in subsequent analyses:\n\nmc3_nodes <- unique(mc3_nodes)\n\n\n\nI. Checking for Missing Values:\n\n# Check for columns with missing values\ncolSums(is.na(mc3_links))\n\nsource target   type \n     0      0      0 \n\n\nThere are no missing values in mc3_links\nII. Checking for Duplicates:\n\nmc3_links[duplicated(mc3_links),]\n\n# A tibble: 0 × 3\n# ℹ 3 variables: source <chr>, target <chr>, type <chr>\n\n\nThere are no duplicated rows for mc3_links data."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#summary-statistics",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#summary-statistics",
    "title": "Take-home Exercise 3",
    "section": "1.4: Summary Statistics",
    "text": "1.4: Summary Statistics\n\nskim(mc3_links)\n\n\n\n\nData summary\n\n\n\n\nName\n\n\nmc3_links\n\n\n\n\nNumber of rows\n\n\n24036\n\n\n\n\nNumber of columns\n\n\n3\n\n\n\n\n_______________________\n\n\n\n\n\n\nColumn type frequency:\n\n\n\n\n\n\ncharacter\n\n\n3\n\n\n\n\n________________________\n\n\n\n\n\n\nGroup variables\n\n\nNone\n\n\n\n\n\nVariable type: character\n\n\n\n\n\nskim_variable\n\n\nn_missing\n\n\ncomplete_rate\n\n\nmin\n\n\nmax\n\n\nempty\n\n\nn_unique\n\n\nwhitespace\n\n\n\n\n\n\nsource\n\n\n0\n\n\n1\n\n\n6\n\n\n700\n\n\n0\n\n\n12856\n\n\n0\n\n\n\n\ntarget\n\n\n0\n\n\n1\n\n\n6\n\n\n28\n\n\n0\n\n\n21265\n\n\n0\n\n\n\n\ntype\n\n\n0\n\n\n1\n\n\n16\n\n\n16\n\n\n0\n\n\n2\n\n\n0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-preparation-tokenisation",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-preparation-tokenisation",
    "title": "Take-home Exercise 3",
    "section": "Data Preparation: Tokenisation",
    "text": "Data Preparation: Tokenisation\n\n# Replace all 'character(0)' values as unknown\nmc3_nodes$product_services[mc3_nodes$product_services == \"character(0)\"] <- \"Unknown\"\n\n# Create new dataframe with words split into separate rows\nnodes_unnest <- mc3_nodes %>%\n  # Create new column 'word' to store split words\n  unnest_tokens(word, \n                product_services,\n    # Change all words to lowercase for more accurate tokenisation\n                to_lower = TRUE,\n    # Remove punctuation to exclude from tokenisation\n                strip_punct = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#what-are-the-most-common-words-in-product_services",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#what-are-the-most-common-words-in-product_services",
    "title": "Take-home Exercise 3",
    "section": "What are the most common words in product_services?",
    "text": "What are the most common words in product_services?\n\nStep 1: Extract the TextStep 2: Clean the text dataStep 3: Create a document-term-matrix to count frequency of words\n\n\n\n# Create a vector containing only the text\nnodes_text <- nodes_unnest$word \n\n# Create a corpus\ntext <- Corpus(VectorSource(nodes_text))\n\n\n\nThe process of removing specific stopwords using removeWords is an iterative process, where higher frequency words are removed if deemed out of context (such as ‘well’, ‘including’, ‘related’ or unproductive in giving specific information about the nature of businesses (such as ‘source’, ‘materials’, etc).\n\ntext <- text %>%\n  # Remove any whitespace\n  tm_map(stripWhitespace) %>%\n  # remove stopwords\n  tm_map(removeWords, stopwords(kind = \"en\")) %>%\n  # Specity stopwords based on initial analysis of word frequency\n  tm_map(removeWords, c(\"products\", \"including\", \"well\", \"related\", \"services\", \"source\", \"materials\", \"goods\"))\n\n\n\n\n# Generate a document-term-matrix\ndtm <- TermDocumentMatrix(text) \nmatrix <- as.matrix(dtm) \n# Sort matrix according to frequency\nwords <- sort(rowSums(matrix),decreasing = TRUE) \n# Count frequency of each word and save as new column in dataframe\ntext_df <- data.frame(word = names(words),freq = words)\n\nkable(head(text_df,15))\n\n\n\n \n  \n      \n    word \n    freq \n  \n \n\n  \n    unknown \n    unknown \n    23604 \n  \n  \n    fish \n    fish \n    740 \n  \n  \n    seafood \n    seafood \n    622 \n  \n  \n    frozen \n    frozen \n    467 \n  \n  \n    food \n    food \n    345 \n  \n  \n    equipment \n    equipment \n    309 \n  \n  \n    fresh \n    fresh \n    276 \n  \n  \n    salmon \n    salmon \n    252 \n  \n  \n    accessories \n    accessories \n    193 \n  \n  \n    systems \n    systems \n    180 \n  \n  \n    freight \n    freight \n    176 \n  \n  \n    industrial \n    industrial \n    164 \n  \n  \n    canned \n    canned \n    163 \n  \n  \n    meat \n    meat \n    157 \n  \n  \n    processing \n    processing \n    155 \n  \n\n\n\n\n\nThe table output shows that “Unknown” products and services are the most frequently listed. While this could possibly point to  fishy business relationships, these records may also be masking other anomalies present. A separate text dataframe is created without “unknown” products and services:\n\ntext_df_known <- text_df[-1,]\n\n\n\n\n\n\ncode block\nwordcloud2(text_df_known, \n           color = \"random-dark\", \n           backgroundColor = \"#F8F3E6\")\n\n\n\n\n\n\n\n\nfindFreqTerms(dtm, lowfreq = 100)\n\n [1] \"chemicals\"      \"equipment\"      \"parts\"          \"accessories\"   \n [5] \"systems\"        \"packaging\"      \"food\"           \"transportation\"\n [9] \"management\"     \"industrial\"     \"steel\"          \"plastic\"       \n[13] \"frozen\"         \"meat\"           \"solutions\"      \"offers\"        \n[17] \"air\"            \"freight\"        \"supplies\"       \"machinery\"     \n[21] \"metal\"          \"range\"          \"processing\"     \"vegetables\"    \n[25] \"canned\"         \"fish\"           \"unknown\"        \"fresh\"         \n[29] \"sea\"            \"shrimp\"         \"seafood\"        \"machines\"      \n[33] \"logistics\"      \"salmon\"         \"shoes\"          \"footwear\"      \n[37] \"tuna\"           \"shellfish\"      \"squid\"          \"freelance\"     \n[41] \"researcher\"    \n\n\n\ntext_df_known %>%\n  top_n(15) %>%\n  arrange(desc(freq)) %>%\n  # Arrange according to frequency count\n  ggplot(\n    aes(x = fct_reorder(word, freq), y = freq)\n  ) +\n  geom_col() +\n  xlab(NULL) +\n  coord_flip() +\n  labs(\n    y = \"Word Frequency\",\n    title = \"Highest Frequency of Fishing-related Businesses\"\n  ) +\n  theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\nSelecting by freq"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "title": "haileycsy",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#what-are-the-most-frequent-company-roles-represented-in-the-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#what-are-the-most-frequent-company-roles-represented-in-the-data",
    "title": "Take-home Exercise 3",
    "section": "What are the most frequent company roles represented in the data?",
    "text": "What are the most frequent company roles represented in the data?\n\nNodes data is aggregated by country and type to visualise frequency of roles, as well as where each company or person is operating geographically.\n\n\n\ncode block\n# Set default plot theme\nset_urbn_defaults(style = \"print\")\n\nnodes_type <- mc3_nodes %>%\n  ggplot(\n    aes(x = type)\n  ) +\n  geom_bar() +\n # Set count annotations above bar\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -1\n  ) +  \n # Ensure than annotations are not cut off\n  ylim(0, 12100) +\n  labs(\n    title = \"Highest Count of Beneficial Owners\"\n  ) +\n  theme(\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\nnodes_type"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#where-are-these-companies-operating-from",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#where-are-these-companies-operating-from",
    "title": "Take-home Exercise 3",
    "section": "Where are these companies operating from?",
    "text": "Where are these companies operating from?\n\n\ncode block\n# Aggregate data frame by country and type\nnodes_agg <- mc3_nodes %>%\n  group_by(country, type) %>%\n  # Count number of companies per country\n  summarise(count = n(),\n  # Calculate total revenue per country\n            revenue_omu = sum(revenue_omu)) %>%\n  ungroup()\n\n\n# Create separate plots for each type\np_company <- nodes_agg %>%\n  # Only plot countries with more than 100 companies\n  filter(type == \"Company\" &\n           count > 100) %>%\n  ggplot(\n  # Arrange in Descending order of count\n    aes(x = fct_rev(fct_reorder(country, count)),\n        y = count)\n  ) +\n  geom_col() +\n  # Set to prevent trunctation when patched\n  ylim(0,3800) +\n  geom_text(\n    aes(label = count),\n    vjust = -1\n  ) +  #< Set count annotations above bar\n  labs(\n    title = \"Most Number of Companies Operating from ZH\"\n  ) +\n  theme(\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n# Plot for company contacts\np_contact <- nodes_agg %>%\n  # Only plot countries with more than 100 companies\n  filter(type == \"Company Contacts\") %>%\n  ggplot(\n  # Arrange in Descending order of count\n    aes(x = fct_rev(fct_reorder(country, count)),\n        y = count)\n  ) +\n  geom_col() +\n  geom_text(\n    aes(label = count),\n    vjust = -1\n  ) + \n  ylim(0,10000) +\n  labs(\n    title = \"Company Contacts\"\n  ) +\n  theme(\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\n# Plot for beneficial owners\np_owner <- nodes_agg %>%\n  # Only plot countries with more than 100 companies\n  filter(type == \"Beneficial Owner\") %>%\n  ggplot(\n  # Arrange in Descending order of count\n    aes(x = fct_rev(fct_reorder(country, count)),\n        y = count)\n  ) +\n  geom_col() +\n  geom_text(\n    aes(label = count),\n    vjust = -1\n  ) +\n  ylim(0,13000) +\n  labs(\n    title = \"Beneficial Owners\"\n  ) +\n  theme(\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\nbottompatch <- (p_contact + p_owner) +\n  plot_annotation(title = \"Almost all Company Contacts & Beneficial Owners from ZH\")\n\nfullpatch <- p_company / bottompatch\nfullpatch & theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#what-are-the-most-frequent-company-roles",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#what-are-the-most-frequent-company-roles",
    "title": "Take-home Exercise 3",
    "section": "What are the most frequent company roles?",
    "text": "What are the most frequent company roles?\n\nNodes data is aggregated by country and type to visualise frequency of roles, as well as where each company or person is operating geographically.\n\n\n\ncode block\n# Set default plot theme\nset_urbn_defaults(style = \"print\")\n\nnodes_type <- mc3_nodes %>%\n  ggplot(\n    aes(x = type)\n  ) +\n  geom_bar() +\n # Set count annotations above bar\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -1\n  ) +  \n # Ensure than annotations are not cut off\n  ylim(0, 11000) +\n  labs(\n    title = \"Highest Count of Beneficial Owners\"\n  ) +\n  theme(\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\nnodes_type"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#what-are-the-most-common-productsservices",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#what-are-the-most-common-productsservices",
    "title": "Take-home Exercise 3",
    "section": "What are the most common products/services?",
    "text": "What are the most common products/services?\n\nData Preparation: Tokenisation\n\n#|code-fold: true\n# Replace all 'character(0)' values as unknown\nmc3_nodes$product_services[mc3_nodes$product_services == \"character(0)\"] <- \"Unknown\"\n\n# Create new dataframe with words split into separate rows\nnodes_unnest <- mc3_nodes %>%\n  # Create new column 'word' to store split words\n  unnest_tokens(word, \n                product_services,\n    # Change all words to lowercase for more accurate tokenisation\n                to_lower = TRUE,\n    # Remove punctuation to exclude from tokenisation\n                strip_punct = TRUE)\n\n\nStep 1: Extract the TextStep 2: Clean the text dataStep 3: Create a document-term-matrix to count frequency of words\n\n\n\n# Create a vector containing only the text\nnodes_text <- nodes_unnest$word \n\n# Create a corpus\ntext <- Corpus(VectorSource(nodes_text))\n\n\n\nThe process of removing specific stopwords using removeWords is an iterative process, where higher frequency words are removed if deemed out of context (such as ‘well’, ‘including’, ‘related’ or unproductive in giving specific information about the nature of businesses (such as ‘source’, ‘materials’, etc).\n\ntext <- text %>%\n  # Remove any whitespace\n  tm_map(stripWhitespace) %>%\n  # remove stopwords\n  tm_map(removeWords, stopwords(kind = \"en\")) %>%\n  # Specity stopwords based on initial analysis of word frequency\n  tm_map(removeWords, c(\"products\", \"including\", \"well\", \"related\", \"services\", \"source\", \"materials\", \"goods\", \"offers\", \"range\"))\n\n\n\n\n# Generate a document-term-matrix\ndtm <- TermDocumentMatrix(text) \nmatrix <- as.matrix(dtm) \n# Sort matrix according to frequency\nwords <- sort(rowSums(matrix),decreasing = TRUE) \n# Count frequency of each word and save as new column in dataframe\ntext_df <- data.frame(word = names(words),freq = words)\n\nkable(head(text_df,15))\n\n\n\n \n  \n      \n    word \n    freq \n  \n \n\n  \n    unknown \n    unknown \n    21009 \n  \n  \n    fish \n    fish \n    740 \n  \n  \n    seafood \n    seafood \n    622 \n  \n  \n    frozen \n    frozen \n    467 \n  \n  \n    food \n    food \n    345 \n  \n  \n    equipment \n    equipment \n    309 \n  \n  \n    fresh \n    fresh \n    276 \n  \n  \n    salmon \n    salmon \n    252 \n  \n  \n    accessories \n    accessories \n    193 \n  \n  \n    systems \n    systems \n    180 \n  \n  \n    freight \n    freight \n    176 \n  \n  \n    industrial \n    industrial \n    164 \n  \n  \n    canned \n    canned \n    163 \n  \n  \n    meat \n    meat \n    157 \n  \n  \n    processing \n    processing \n    155 \n  \n\n\n\n\n\nThe table output shows that “Unknown” products and services are the most frequently listed. While this could possibly point to  fishy business relationships, these records may also be masking other anomalies present. A separate text dataframe is created without “unknown” products and services:\n\ntext_df_known <- text_df[-1,]\n\n\n\n\n\n\ncode block\nwordcloud2(text_df_known, \n           color = \"random-dark\", \n           backgroundColor = \"#F8F3E6\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#understanding-distribution-of-term-frequency",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#understanding-distribution-of-term-frequency",
    "title": "Take-home Exercise 3",
    "section": "Understanding distribution of Term Frequency",
    "text": "Understanding distribution of Term Frequency\n\nnodes_text <- nodes_unnest$word"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#understanding-correlation-between-words",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#understanding-correlation-between-words",
    "title": "Take-home Exercise 3",
    "section": "Understanding correlation between words",
    "text": "Understanding correlation between words\n\nnodes_unnest2 <- mc3_nodes %>%\n   unnest_tokens(bigram, product_services, token = \"ngrams\", n = 2, to_lower = TRUE,) %>%\n   filter(!is.na(bigram)) %>%\n   filter(!str_detect(bigram,\"including|range\"))\n\nproduct_bigram <- nodes_unnest2 %>%\n                  count(bigram, sort = TRUE) %>%\n                  separate(bigram, c(\"word1\", \"word2\"), sep = \" \") %>%\n                  anti_join(stop_words, by = c(\"word1\" = \"word\")) %>%\n  anti_join(stop_words, by = c(\"word2\" = \"word\")) %>%\n  filter(str_detect(word1, \"[a-z]\") &\n         str_detect(word2, \"[a-z]\"))\n\n\nproduct_bigram_graph <- product_bigram %>%\n  filter(n >15) %>%\n  graph_from_data_frame()\n\nset.seed(1234)\nggraph(\n  product_bigram_graph, \n  layout = \"nicely\"\n  ) +\n  geom_edge_link(\n    # Adjust transparency of link based on how common the bigram is\n    aes(edge_alpha = n),\n    arrow = grid::arrow(type = \"closed\", \n                        length = unit(.2, \"cm\")),\n    # Leave a gap between arrow head and circle\n    end_cap = circle(.2, 'cm'),\n    show.legend = FALSE\n  ) +\n  geom_node_point(\n    alpha = .7,\n    size = 3) +\n  geom_node_text(\n    aes(label = name), \n    repel = TRUE\n  ) +\n  labs(title = \"High Frequency of Companies Dealing in Seafood Products\",\n       subtitle = \"Darker links indicate higher commonality of related terms\"\n  ) +\n  theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#who-are-the-companies-connected-to",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#who-are-the-companies-connected-to",
    "title": "Take-home Exercise 3",
    "section": "Who are the companies connected to?",
    "text": "Who are the companies connected to?\n\n\ncode block\n# Get number of type by source (Company)\nlinks_count <- mc3_links %>%\n  group_by(source, type) %>%\n  summarise(count = n()) %>%\n  ungroup()\n\n# Plot strip chart to show distibution\n\nlinks_count %>%\n  ggplot(\n    aes(x = count, \n        y = type)\n  ) +\n  geom_point(\n    alpha = .2, \n    size = 7\n  ) +\n  scale_x_continuous() +  \n  stat_summary(\n    color = \"salmon\", \n    fun = \"median\", \n    geom = \"point\", \n    size = 3.5, \n    alpha = .9\n  ) +\n  labs(title = \"Right-skewed Distribution of Beneficial Owners, Indicative of Publicly Listed Companies\",\n       subtitle = \"Highlighted points represent median values\",\n       x = NULL,\n       y = NULL\n  ) +\n  theme(axis.ticks.y = element_blank(),\n        plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#how-much-revenue-is-being-reported",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#how-much-revenue-is-being-reported",
    "title": "Take-home Exercise 3",
    "section": "How much revenue is being reported?",
    "text": "How much revenue is being reported?\n\n\ncode block\nggplot(mc3_nodes,\n       aes(x = 1, \n           y = revenue_omu)\n  ) +\n  geom_rain(\n    color = \"#1696d2\",\n    alpha = .5\n  ) +\n  scale_y_continuous(\n    breaks = scales::pretty_breaks(n=5),\n    labels = scales::dollar\n  ) +\n  labs(\n    title = \"Skewed Distribution of Revenue Suggests Range of Company Sizes\"\n  ) +\n  theme(\n    axis.ticks.y = element_blank(),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  ) +\n  coord_flip()\n\n\n\n\n\n\nskim(mc3_nodes$revenue_omu)\n\n\n\n\nData summary\n\n\n\n\nName\n\n\nmc3_nodes$revenue_omu\n\n\n\n\nNumber of rows\n\n\n25027\n\n\n\n\nNumber of columns\n\n\n1\n\n\n\n\n_______________________\n\n\n\n\n\n\nColumn type frequency:\n\n\n\n\n\n\nnumeric\n\n\n1\n\n\n\n\n________________________\n\n\n\n\n\n\nGroup variables\n\n\nNone\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\nskim_variable\n\n\nn_missing\n\n\ncomplete_rate\n\n\nmean\n\n\nsd\n\n\np0\n\n\np25\n\n\np50\n\n\np75\n\n\np100\n\n\nhist\n\n\n\n\n\n\ndata\n\n\n18920\n\n\n0.24\n\n\n1822155\n\n\n18184433\n\n\n3652.23\n\n\n7676.36\n\n\n16210.68\n\n\n48327.66\n\n\n310612303\n\n\n▇▁▁▁▁"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#plotting-a-bigram-of-frequent-productsservices",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#plotting-a-bigram-of-frequent-productsservices",
    "title": "Take-home Exercise 3",
    "section": "Plotting a Bigram of frequent Products/Services",
    "text": "Plotting a Bigram of frequent Products/Services\n\nUnnesting tokens as bigrams:\n\nnodes_unnest2 <- mc3_nodes %>%\n   unnest_tokens(bigram, \n                 product_services, \n                 token = \"ngrams\", \n                 n = 2, \n                 to_lower = TRUE,) %>%\n  # remove empty rows\n   filter(!is.na(bigram)) %>%\n  # Remove specific stopwords from bigrams\n   filter(!str_detect(bigram,\"including|range\"))\n\nproduct_bigram <- nodes_unnest2 %>%\n    count(bigram, sort = TRUE) %>%\n  # Split bigram words into separate columns, uding space as delimiter\n    separate(bigram, c(\"word1\", \"word2\"), sep = \" \") %>%\n  # Only match words not in stopwords\n    anti_join(stop_words, by = c(\"word1\" = \"word\")) %>%\n    anti_join(stop_words, by = c(\"word2\" = \"word\")) %>%\n  # Keep only characters, dropping numbers \n    filter(str_detect(word1, \"[a-z]\") & str_detect(word2, \"[a-z]\"))\n\n\nproduct_bigram_graph <- product_bigram %>%\n  filter(n >15) %>%\n  graph_from_data_frame()\n\nset.seed(1234)\nggraph(\n  product_bigram_graph, \n  layout = \"nicely\"\n  ) +\n  geom_edge_link(\n    # Adjust transparency of link based on how common the bigram is\n    aes(edge_alpha = n),\n    arrow = grid::arrow(type = \"closed\", \n                        length = unit(.2, \"cm\")),\n    # Leave a gap between arrow head and circle\n    end_cap = circle(.2, 'cm'),\n    show.legend = FALSE\n  ) +\n  geom_node_point(\n    alpha = .7,\n    size = 3) +\n  geom_node_text(\n    aes(label = name), \n    repel = TRUE\n  ) +\n  labs(title = \"High Frequency of Companies Dealing in Seafood Products\",\n       subtitle = \"Darker links indicate higher commonality of related terms\"\n  ) +\n  theme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\")\n  )\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead."
  }
]